{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "464c2fba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-09T00:46:01.023877Z",
     "iopub.status.busy": "2025-04-09T00:46:01.023481Z",
     "iopub.status.idle": "2025-04-09T00:46:10.268791Z",
     "shell.execute_reply": "2025-04-09T00:46:10.267674Z"
    },
    "papermill": {
     "duration": 9.251421,
     "end_time": "2025-04-09T00:46:10.270613",
     "exception": false,
     "start_time": "2025-04-09T00:46:01.019192",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m144.7/144.7 kB\u001b[0m \u001b[31m3.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m100.9/100.9 kB\u001b[0m \u001b[31m5.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h"
     ]
    }
   ],
   "source": [
    "!pip uninstall -qy jupyterlab  # Remove unused packages from Kaggle's base image that conflict\n",
    "!pip install -U -q \"google-genai==1.7.0\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "567391b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-09T00:46:10.277938Z",
     "iopub.status.busy": "2025-04-09T00:46:10.277554Z",
     "iopub.status.idle": "2025-04-09T00:46:11.564521Z",
     "shell.execute_reply": "2025-04-09T00:46:11.563626Z"
    },
    "papermill": {
     "duration": 1.292423,
     "end_time": "2025-04-09T00:46:11.566313",
     "exception": false,
     "start_time": "2025-04-09T00:46:10.273890",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from google import genai\n",
    "from google.genai import types\n",
    "\n",
    "from IPython.display import HTML, Markdown, display\n",
    "#https://www.kaggle.com/datasets/robbietli/transactions-20250104-test-data-csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9997fd00",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-09T00:46:11.573541Z",
     "iopub.status.busy": "2025-04-09T00:46:11.573022Z",
     "iopub.status.idle": "2025-04-09T00:46:11.709728Z",
     "shell.execute_reply": "2025-04-09T00:46:11.708676Z"
    },
    "papermill": {
     "duration": 0.14226,
     "end_time": "2025-04-09T00:46:11.711607",
     "exception": false,
     "start_time": "2025-04-09T00:46:11.569347",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from kaggle_secrets import UserSecretsClient\n",
    "\n",
    "GOOGLE_API_KEY = UserSecretsClient().get_secret(\"GOOGLE_API_KEY\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2438ca95",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-09T00:46:11.718970Z",
     "iopub.status.busy": "2025-04-09T00:46:11.718594Z",
     "iopub.status.idle": "2025-04-09T00:46:12.101103Z",
     "shell.execute_reply": "2025-04-09T00:46:12.099841Z"
    },
    "papermill": {
     "duration": 0.388248,
     "end_time": "2025-04-09T00:46:12.102979",
     "exception": false,
     "start_time": "2025-04-09T00:46:11.714731",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "client = genai.Client(api_key=GOOGLE_API_KEY)\n",
    "\n",
    "# You can optionally set your model configuration here too\n",
    "model_config = types.GenerateContentConfig(\n",
    "    temperature=0.1,\n",
    "    top_p=1,\n",
    "    max_output_tokens=250,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c4dc0aac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-09T00:46:12.110272Z",
     "iopub.status.busy": "2025-04-09T00:46:12.109917Z",
     "iopub.status.idle": "2025-04-09T00:46:12.415384Z",
     "shell.execute_reply": "2025-04-09T00:46:12.414378Z"
    },
    "papermill": {
     "duration": 0.311284,
     "end_time": "2025-04-09T00:46:12.417357",
     "exception": false,
     "start_time": "2025-04-09T00:46:12.106073",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from google.api_core import retry\n",
    "\n",
    "\n",
    "is_retriable = lambda e: (isinstance(e, genai.errors.APIError) and e.code in {429, 503})\n",
    "\n",
    "genai.models.Models.generate_content = retry.Retry(\n",
    "    predicate=is_retriable)(genai.models.Models.generate_content)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "801c02f7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-09T00:46:12.425024Z",
     "iopub.status.busy": "2025-04-09T00:46:12.424442Z",
     "iopub.status.idle": "2025-04-09T00:46:12.430116Z",
     "shell.execute_reply": "2025-04-09T00:46:12.429134Z"
    },
    "papermill": {
     "duration": 0.011268,
     "end_time": "2025-04-09T00:46:12.431734",
     "exception": false,
     "start_time": "2025-04-09T00:46:12.420466",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def categorise_transaction(description):\n",
    "    few_shot_prompt = f\"\"\"\n",
    "    You are an AI assistant specializing in financial transaction categorization.\n",
    "    Your task is to analyze the provided transaction description and assign it to the most appropriate category and subcategory from the predefined lists.\n",
    "\n",
    "    **Allowed Categories:**\n",
    "    [   - Food & Beverages\n",
    "       - Shopping\n",
    "       - Housing\n",
    "       - Transportation\n",
    "       - Vehicle\n",
    "       - Life & Entertainment\n",
    "       - Communication, PC\n",
    "       - Financial expenses\n",
    "       - Investments\n",
    "       - Income\n",
    "    ]\n",
    "\n",
    "    **Allowed Subcategories (grouped by category for context):**\n",
    "    [\"Food & Beverages\": [\"Bar, cafe, drink, snacks\", \"Groceries\", \"Restaurant, fast-food\"],\n",
    "       \"Shopping\": [\"Clothes & Footwear\", \"Drug-store, chemist\", \"Electronics, accessories\",\n",
    "                    \"Gifts, joy\", \"Health and beauty\", \"Home, garden\", \"Jewels, accessories\",\n",
    "                    \"Kids\", \"Leisure time\", \"Pets, animals\", \"Stationery, tools\"],\n",
    "       \"Housing\": [\"Energy, utilities\", \"Maintenance, repairs\", \"Mortgage\", \"Property insurance\",\n",
    "                   \"Rent\", \"Services\"],\n",
    "       \"Transportation\": [\"Business trips\", \"Long distance\", \"Public transport\", \"Taxi\"],\n",
    "       \"Vehicle\": [\"Fuel\", \"Leasing\", \"Parking\", \"Rentals\", \"Vehicle insurance\", \"Vehicle maintenance\"],\n",
    "       \"Life & Entertainment\": [\"Active sport, fitness\", \"Alcohol, tobacco\", \"Books, audio, subscriptions\",\n",
    "                                \"Charity, gifts\", \"Culture, sport events\", \"Education, development\",\n",
    "                                \"Health care, doctor\", \"Hobbies\", \"Holiday, trips, hotels\",\n",
    "                                \"Life events\", \"Lottery, gambling\", \"TV, Streaming\", \"Wellness, beauty\"],\n",
    "       \"Communication, PC\": [\"Internet\", \"Postal services\", \"Software, apps, games\", \"Telephony, mobile phone\"],\n",
    "       \"Financial expenses\": [\"Advisory\", \"Charges, Fees\", \"Child Support\", \"Fines\", \"Insurances\",\n",
    "                              \"Loans, interests\", \"Taxes\"],\n",
    "       \"Investments\": [\"Collections\", \"Financial investments\", \"Realty\", \"Savings\", \"Vehicles, chattels\"],\n",
    "       \"Income\": [\"Checks, coupons\", \"Child Support\", \"Dues & grants\", \"Gifts\", \"Interests, dividends\",\n",
    "                  \"Lending, renting\", \"Lottery, gambling\", \"Refunds (tax, purchase)\",\n",
    "                  \"Rental income\", \"Sale\", \"Wage, invoices\"]\n",
    "       \"Transfer\":[\"Transfer\"]\n",
    "    ]\n",
    "\n",
    "    **Instructions:**\n",
    "    [...] Respond ONLY with a JSON object [...]\n",
    "\n",
    "    **Examples:**\n",
    "\n",
    "    * **Transaction Description:** \"BP Fuel Richmond VIC\"\n",
    "        **Output:** {{\"category\": \"Transportation\", \"subcategory\": \"Fuel\"}}\n",
    "\n",
    "    * **Transaction Description:** \"Salary Deposit ACME Corp\"\n",
    "        **Output:** {{\"category\": \"Income\", \"subcategory\": \"Salary\"}}\n",
    "\n",
    "    ---\n",
    "    **Now, categorize the following transaction:**\n",
    "\n",
    "    **Description:**\n",
    "    \"{description}\"\n",
    "\n",
    "    Output\n",
    "    \"\"\"\n",
    "    return few_shot_prompt\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9ce4540b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-09T00:46:12.439155Z",
     "iopub.status.busy": "2025-04-09T00:46:12.438743Z",
     "iopub.status.idle": "2025-04-09T00:46:13.290989Z",
     "shell.execute_reply": "2025-04-09T00:46:13.289964Z"
    },
    "papermill": {
     "duration": 0.858153,
     "end_time": "2025-04-09T00:46:13.292951",
     "exception": false,
     "start_time": "2025-04-09T00:46:12.434798",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 1. First, properly load the CSV file\n",
    "file_path = \"/kaggle/input/finance-test/transactions_20250104_test.csv\"\n",
    "import pandas as pd\n",
    "import json\n",
    "df = pd.read_csv(file_path)\n",
    "\n",
    "# 2. Define a function to process transactions in batches\n",
    "def process_transactions_in_batches(descriptions, batch_size=5):\n",
    "    all_categories = []\n",
    "    all_subcategories = []\n",
    "    \n",
    "    # Process in batches\n",
    "    for i in range(0, len(descriptions), batch_size):\n",
    "        batch = descriptions[i:i+batch_size]\n",
    "        batch_categories = []\n",
    "        batch_subcategories = []\n",
    "        \n",
    "        print(f\"Processing batch {i//batch_size + 1} ({i} to {min(i+batch_size, len(descriptions))})\")\n",
    "        \n",
    "        # Process each transaction in the current batch\n",
    "        for description in batch:\n",
    "            try:\n",
    "                # Get the formatted prompt using the function\n",
    "                prompt_text = categorise_transaction(description)\n",
    "                \n",
    "                response = client.models.generate_content(\n",
    "                    model='gemini-2.0-flash',\n",
    "                    config=types.GenerateContentConfig(\n",
    "                        temperature=0.1,\n",
    "                        top_p=1,\n",
    "                        max_output_tokens=250,\n",
    "                    ),\n",
    "                    contents=[{\"text\": prompt_text}]  # Send the already formatted prompt\n",
    "                )\n",
    "                \n",
    "                # Extract category and subcategory from the JSON response\n",
    "                response_text = response.text\n",
    "                # Find JSON object using braces\n",
    "                json_start = response_text.find('{')\n",
    "                json_end = response_text.rfind('}') + 1\n",
    "                \n",
    "                if json_start >= 0 and json_end > json_start:\n",
    "                    json_str = response_text[json_start:json_end]\n",
    "                    result = json.loads(json_str)\n",
    "                    category = result.get('category', 'Unknown')\n",
    "                    subcategory = result.get('subcategory', 'Unknown')\n",
    "                else:\n",
    "                    category = 'Error'\n",
    "                    subcategory = 'Could not parse response'\n",
    "                    \n",
    "            except Exception as e:\n",
    "                print(f\"Error processing '{description}': {e}\")\n",
    "                print(f\"Response was: {response.text if 'response' in locals() else 'No response'}\")\n",
    "                category = 'Error'\n",
    "                subcategory = str(e)\n",
    "            \n",
    "            batch_categories.append(category)\n",
    "            batch_subcategories.append(subcategory)\n",
    "        \n",
    "        # Add batch results to overall results\n",
    "        all_categories.extend(batch_categories)\n",
    "        all_subcategories.extend(batch_subcategories)\n",
    "        \n",
    "        # Optional: Display progress for each batch\n",
    "        if len(batch) > 0:\n",
    "            print(f\"Sample result - '{batch[0]}': {category}, {subcategory}\")\n",
    "    \n",
    "    return all_categories, all_subcategories"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7e71cb2c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-09T00:46:13.300344Z",
     "iopub.status.busy": "2025-04-09T00:46:13.299972Z",
     "iopub.status.idle": "2025-04-09T00:46:18.408404Z",
     "shell.execute_reply": "2025-04-09T00:46:18.407202Z"
    },
    "papermill": {
     "duration": 5.113985,
     "end_time": "2025-04-09T00:46:18.410168",
     "exception": false,
     "start_time": "2025-04-09T00:46:13.296183",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processing batch 1 (0 to 5)\n",
      "Sample result - 'Increase account balance by 1.0 AUD': Income, Interests, dividends\n",
      "Processing batch 2 (5 to 10)\n",
      "Sample result - 'Bonus interest activated ($72.91)': Income, Interests, dividends\n",
      "\n",
      "Results for test data:\n",
      "                           description            category  \\\n",
      "0  Increase account balance by 1.0 AUD  Financial expenses   \n",
      "1                       Amazon Digital            Shopping   \n",
      "2             Bonus interest activated              Income   \n",
      "3             Bonus interest activated              Income   \n",
      "4                      Interest earned              Income   \n",
      "5    Bonus interest activated ($72.91)              Income   \n",
      "6             Bonus interest activated              Income   \n",
      "7             Bonus interest activated              Income   \n",
      "8             Bonus interest activated              Income   \n",
      "9             Bonus interest activated              Income   \n",
      "\n",
      "                subcategory  \n",
      "0             Charges, Fees  \n",
      "1  Electronics, accessories  \n",
      "2      Interests, dividends  \n",
      "3      Interests, dividends  \n",
      "4      Interests, dividends  \n",
      "5      Interests, dividends  \n",
      "6      Interests, dividends  \n",
      "7      Interests, dividends  \n",
      "8      Interests, dividends  \n",
      "9      Interests, dividends  \n"
     ]
    }
   ],
   "source": [
    "# Execute the batch processing function\n",
    "# Start with a small batch for testing before processing the entire dataset\n",
    "test_descriptions = df['description'].head(10).tolist()  # Process just 10 for testing\n",
    "categories, subcategories = process_transactions_in_batches(test_descriptions, batch_size=5)\n",
    "\n",
    "# Add the results to your dataframe for the test data\n",
    "test_df = df.head(10).copy()\n",
    "test_df['category'] = categories\n",
    "test_df['subcategory'] = subcategories\n",
    "\n",
    "# Display the results\n",
    "print(\"\\nResults for test data:\")\n",
    "print(test_df[['description', 'category', 'subcategory']])\n",
    "\n",
    "# After confirming everything works, uncomment these lines to process the full dataset\n",
    "# print(\"\\nProcessing full dataset...\")\n",
    "# categories, subcategories = process_transactions_in_batches(df['description'].tolist(), batch_size=5)\n",
    "# df['category'] = categories\n",
    "# df['subcategory'] = subcategories\n",
    "# print(\"\\nFinal Results:\")\n",
    "# print(df[['description', 'category', 'subcategory']].head(20))"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 7084116,
     "sourceId": 11325548,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30918,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 21.943019,
   "end_time": "2025-04-09T00:46:19.233815",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-04-09T00:45:57.290796",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
