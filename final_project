{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7738e003",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-09T00:21:50.054714Z",
     "iopub.status.busy": "2025-04-09T00:21:50.054418Z",
     "iopub.status.idle": "2025-04-09T00:21:56.509328Z",
     "shell.execute_reply": "2025-04-09T00:21:56.508152Z"
    },
    "papermill": {
     "duration": 6.459923,
     "end_time": "2025-04-09T00:21:56.510799",
     "exception": false,
     "start_time": "2025-04-09T00:21:50.050876",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m144.7/144.7 kB\u001b[0m \u001b[31m9.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m100.9/100.9 kB\u001b[0m \u001b[31m7.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h"
     ]
    }
   ],
   "source": [
    "!pip uninstall -qy jupyterlab  # Remove unused packages from Kaggle's base image that conflict\n",
    "!pip install -U -q \"google-genai==1.7.0\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "618035b2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-09T00:21:56.515663Z",
     "iopub.status.busy": "2025-04-09T00:21:56.515418Z",
     "iopub.status.idle": "2025-04-09T00:21:57.440634Z",
     "shell.execute_reply": "2025-04-09T00:21:57.439850Z"
    },
    "papermill": {
     "duration": 0.929002,
     "end_time": "2025-04-09T00:21:57.442109",
     "exception": false,
     "start_time": "2025-04-09T00:21:56.513107",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from google import genai\n",
    "from google.genai import types\n",
    "\n",
    "from IPython.display import HTML, Markdown, display\n",
    "#https://www.kaggle.com/datasets/robbietli/transactions-20250104-test-data-csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "17dd9b5e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-09T00:21:57.446514Z",
     "iopub.status.busy": "2025-04-09T00:21:57.446149Z",
     "iopub.status.idle": "2025-04-09T00:21:57.628518Z",
     "shell.execute_reply": "2025-04-09T00:21:57.627744Z"
    },
    "papermill": {
     "duration": 0.186007,
     "end_time": "2025-04-09T00:21:57.630063",
     "exception": false,
     "start_time": "2025-04-09T00:21:57.444056",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from google.api_core import retry\n",
    "\n",
    "\n",
    "is_retriable = lambda e: (isinstance(e, genai.errors.APIError) and e.code in {429, 503})\n",
    "\n",
    "genai.models.Models.generate_content = retry.Retry(\n",
    "    predicate=is_retriable)(genai.models.Models.generate_content)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f36ea3fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-09T00:21:57.634454Z",
     "iopub.status.busy": "2025-04-09T00:21:57.634098Z",
     "iopub.status.idle": "2025-04-09T00:21:57.835027Z",
     "shell.execute_reply": "2025-04-09T00:21:57.834299Z"
    },
    "papermill": {
     "duration": 0.204551,
     "end_time": "2025-04-09T00:21:57.836515",
     "exception": false,
     "start_time": "2025-04-09T00:21:57.631964",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from kaggle_secrets import UserSecretsClient\n",
    "\n",
    "GOOGLE_API_KEY = UserSecretsClient().get_secret(\"GOOGLE_API_KEY\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "cb0343de",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-09T00:21:57.840893Z",
     "iopub.status.busy": "2025-04-09T00:21:57.840691Z",
     "iopub.status.idle": "2025-04-09T00:21:57.844769Z",
     "shell.execute_reply": "2025-04-09T00:21:57.844176Z"
    },
    "papermill": {
     "duration": 0.007441,
     "end_time": "2025-04-09T00:21:57.845875",
     "exception": false,
     "start_time": "2025-04-09T00:21:57.838434",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def categorise_transaction(description):\n",
    "    few_shot_prompt = f\"\"\"\n",
    "    You are an AI assistant specializing in financial transaction categorization.\n",
    "    Your task is to analyze the provided transaction description and assign it to the most appropriate category and subcategory from the predefined lists.\n",
    "\n",
    "    **Allowed Categories:**\n",
    "    [   - Food & Beverages\n",
    "       - Shopping\n",
    "       - Housing\n",
    "       - Transportation\n",
    "       - Vehicle\n",
    "       - Life & Entertainment\n",
    "       - Communication, PC\n",
    "       - Financial expenses\n",
    "       - Investments\n",
    "       - Income\n",
    "    ]\n",
    "\n",
    "    **Allowed Subcategories (grouped by category for context):**\n",
    "    [\"Food & Beverages\": [\"Bar, cafe, drink, snacks\", \"Groceries\", \"Restaurant, fast-food\"],\n",
    "       \"Shopping\": [\"Clothes & Footwear\", \"Drug-store, chemist\", \"Electronics, accessories\",\n",
    "                    \"Gifts, joy\", \"Health and beauty\", \"Home, garden\", \"Jewels, accessories\",\n",
    "                    \"Kids\", \"Leisure time\", \"Pets, animals\", \"Stationery, tools\"],\n",
    "       \"Housing\": [\"Energy, utilities\", \"Maintenance, repairs\", \"Mortgage\", \"Property insurance\",\n",
    "                   \"Rent\", \"Services\"],\n",
    "       \"Transportation\": [\"Business trips\", \"Long distance\", \"Public transport\", \"Taxi\"],\n",
    "       \"Vehicle\": [\"Fuel\", \"Leasing\", \"Parking\", \"Rentals\", \"Vehicle insurance\", \"Vehicle maintenance\"],\n",
    "       \"Life & Entertainment\": [\"Active sport, fitness\", \"Alcohol, tobacco\", \"Books, audio, subscriptions\",\n",
    "                                \"Charity, gifts\", \"Culture, sport events\", \"Education, development\",\n",
    "                                \"Health care, doctor\", \"Hobbies\", \"Holiday, trips, hotels\",\n",
    "                                \"Life events\", \"Lottery, gambling\", \"TV, Streaming\", \"Wellness, beauty\"],\n",
    "       \"Communication, PC\": [\"Internet\", \"Postal services\", \"Software, apps, games\", \"Telephony, mobile phone\"],\n",
    "       \"Financial expenses\": [\"Advisory\", \"Charges, Fees\", \"Child Support\", \"Fines\", \"Insurances\",\n",
    "                              \"Loans, interests\", \"Taxes\"],\n",
    "       \"Investments\": [\"Collections\", \"Financial investments\", \"Realty\", \"Savings\", \"Vehicles, chattels\"],\n",
    "       \"Income\": [\"Checks, coupons\", \"Child Support\", \"Dues & grants\", \"Gifts\", \"Interests, dividends\",\n",
    "                  \"Lending, renting\", \"Lottery, gambling\", \"Refunds (tax, purchase)\",\n",
    "                  \"Rental income\", \"Sale\", \"Wage, invoices\"]\n",
    "       \"Transfer\":[\"Transfer\"]\n",
    "    ]\n",
    "\n",
    "    **Instructions:**\n",
    "    [...] Respond ONLY with a JSON object [...]\n",
    "\n",
    "    **Examples:**\n",
    "\n",
    "    * **Transaction Description:** \"BP Fuel Richmond VIC\"\n",
    "        **Output:** {{\"category\": \"Transportation\", \"subcategory\": \"Fuel\"}}\n",
    "\n",
    "    * **Transaction Description:** \"Salary Deposit ACME Corp\"\n",
    "        **Output:** {{\"category\": \"Income\", \"subcategory\": \"Salary\"}}\n",
    "\n",
    "    ---\n",
    "    **Now, categorize the following transaction:**\n",
    "\n",
    "    **Description:**\n",
    "    \"{description}\"\n",
    "\n",
    "    Output\n",
    "    \"\"\"\n",
    "    return few_shot_prompt\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5bbe25f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-09T00:21:57.849771Z",
     "iopub.status.busy": "2025-04-09T00:21:57.849597Z",
     "iopub.status.idle": "2025-04-09T00:21:58.551756Z",
     "shell.execute_reply": "2025-04-09T00:21:58.550760Z"
    },
    "papermill": {
     "duration": 0.705807,
     "end_time": "2025-04-09T00:21:58.553369",
     "exception": false,
     "start_time": "2025-04-09T00:21:57.847562",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 1. First, properly load the CSV file\n",
    "file_path = \"/kaggle/input/finance-test/transactions_20250104_test.csv\"\n",
    "import pandas as pd\n",
    "import json\n",
    "df = pd.read_csv(file_path)\n",
    "\n",
    "# 2. Define a function to process transactions in batches\n",
    "def process_transactions_in_batches(descriptions, batch_size=5):\n",
    "    all_categories = []\n",
    "    all_subcategories = []\n",
    "    \n",
    "    # Process in batches\n",
    "    for i in range(0, len(descriptions), batch_size):\n",
    "        batch = descriptions[i:i+batch_size]\n",
    "        batch_categories = []\n",
    "        batch_subcategories = []\n",
    "        \n",
    "        print(f\"Processing batch {i//batch_size + 1} ({i} to {min(i+batch_size, len(descriptions))})\")\n",
    "        \n",
    "        # Process each transaction in the current batch\n",
    "        for description in batch:\n",
    "            try:\n",
    "                # Get the formatted prompt using the function\n",
    "                prompt_text = categorise_transaction(description)\n",
    "                \n",
    "                response = client.models.generate_content(\n",
    "                    model='gemini-2.0-flash',\n",
    "                    config=types.GenerateContentConfig(\n",
    "                        temperature=0.1,\n",
    "                        top_p=1,\n",
    "                        max_output_tokens=250,\n",
    "                    ),\n",
    "                    contents=[{\"text\": prompt_text}]  # Send the already formatted prompt\n",
    "                )\n",
    "                \n",
    "                # Extract category and subcategory from the JSON response\n",
    "                response_text = response.text\n",
    "                # Find JSON object using braces\n",
    "                json_start = response_text.find('{')\n",
    "                json_end = response_text.rfind('}') + 1\n",
    "                \n",
    "                if json_start >= 0 and json_end > json_start:\n",
    "                    json_str = response_text[json_start:json_end]\n",
    "                    result = json.loads(json_str)\n",
    "                    category = result.get('category', 'Unknown')\n",
    "                    subcategory = result.get('subcategory', 'Unknown')\n",
    "                else:\n",
    "                    category = 'Error'\n",
    "                    subcategory = 'Could not parse response'\n",
    "                    \n",
    "            except Exception as e:\n",
    "                print(f\"Error processing '{description}': {e}\")\n",
    "                print(f\"Response was: {response.text if 'response' in locals() else 'No response'}\")\n",
    "                category = 'Error'\n",
    "                subcategory = str(e)\n",
    "            \n",
    "            batch_categories.append(category)\n",
    "            batch_subcategories.append(subcategory)\n",
    "        \n",
    "        # Add batch results to overall results\n",
    "        all_categories.extend(batch_categories)\n",
    "        all_subcategories.extend(batch_subcategories)\n",
    "        \n",
    "        # Optional: Display progress for each batch\n",
    "        if len(batch) > 0:\n",
    "            print(f\"Sample result - '{batch[0]}': {category}, {subcategory}\")\n",
    "    \n",
    "    return all_categories, all_subcategories"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 7084116,
     "sourceId": 11325548,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30918,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 11.156153,
   "end_time": "2025-04-09T00:21:59.173557",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-04-09T00:21:48.017404",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
