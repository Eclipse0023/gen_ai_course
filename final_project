{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e15d2c2f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-09T03:52:35.161594Z",
     "iopub.status.busy": "2025-04-09T03:52:35.161175Z",
     "iopub.status.idle": "2025-04-09T03:52:44.008435Z",
     "shell.execute_reply": "2025-04-09T03:52:44.007206Z"
    },
    "papermill": {
     "duration": 8.853593,
     "end_time": "2025-04-09T03:52:44.010281",
     "exception": false,
     "start_time": "2025-04-09T03:52:35.156688",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m144.7/144.7 kB\u001b[0m \u001b[31m6.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m100.9/100.9 kB\u001b[0m \u001b[31m5.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h"
     ]
    }
   ],
   "source": [
    "!pip uninstall -qy jupyterlab  # Remove unused packages from Kaggle's base image that conflict\n",
    "!pip install -U -q \"google-genai==1.7.0\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bffc404e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-09T03:52:44.017868Z",
     "iopub.status.busy": "2025-04-09T03:52:44.017442Z",
     "iopub.status.idle": "2025-04-09T03:52:45.314479Z",
     "shell.execute_reply": "2025-04-09T03:52:45.313407Z"
    },
    "papermill": {
     "duration": 1.302833,
     "end_time": "2025-04-09T03:52:45.316488",
     "exception": false,
     "start_time": "2025-04-09T03:52:44.013655",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from google import genai\n",
    "from google.genai import types\n",
    "\n",
    "from IPython.display import HTML, Markdown, display\n",
    "#https://www.kaggle.com/datasets/robbietli/transactions-20250104-test-data-csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "733b5917",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-09T03:52:45.323979Z",
     "iopub.status.busy": "2025-04-09T03:52:45.323462Z",
     "iopub.status.idle": "2025-04-09T03:52:45.506649Z",
     "shell.execute_reply": "2025-04-09T03:52:45.505700Z"
    },
    "papermill": {
     "duration": 0.18894,
     "end_time": "2025-04-09T03:52:45.508562",
     "exception": false,
     "start_time": "2025-04-09T03:52:45.319622",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from kaggle_secrets import UserSecretsClient\n",
    "\n",
    "GOOGLE_API_KEY = UserSecretsClient().get_secret(\"GOOGLE_API_KEY\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "59b27b6e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-09T03:52:45.515970Z",
     "iopub.status.busy": "2025-04-09T03:52:45.515588Z",
     "iopub.status.idle": "2025-04-09T03:52:45.902608Z",
     "shell.execute_reply": "2025-04-09T03:52:45.901477Z"
    },
    "papermill": {
     "duration": 0.393081,
     "end_time": "2025-04-09T03:52:45.904731",
     "exception": false,
     "start_time": "2025-04-09T03:52:45.511650",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "client = genai.Client(api_key=GOOGLE_API_KEY)\n",
    "\n",
    "# You can optionally set your model configuration here too\n",
    "model_config = types.GenerateContentConfig(\n",
    "    temperature=0.1,\n",
    "    top_p=1,\n",
    "    max_output_tokens=250,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "171e7ad8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-09T03:52:45.912115Z",
     "iopub.status.busy": "2025-04-09T03:52:45.911743Z",
     "iopub.status.idle": "2025-04-09T03:52:46.315139Z",
     "shell.execute_reply": "2025-04-09T03:52:46.313710Z"
    },
    "papermill": {
     "duration": 0.409389,
     "end_time": "2025-04-09T03:52:46.317271",
     "exception": false,
     "start_time": "2025-04-09T03:52:45.907882",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from google.api_core import retry\n",
    "\n",
    "\n",
    "is_retriable = lambda e: (isinstance(e, genai.errors.APIError) and e.code in {429, 503})\n",
    "\n",
    "genai.models.Models.generate_content = retry.Retry(\n",
    "    predicate=is_retriable)(genai.models.Models.generate_content)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "993ee188",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-09T03:52:46.325203Z",
     "iopub.status.busy": "2025-04-09T03:52:46.324650Z",
     "iopub.status.idle": "2025-04-09T03:52:46.330526Z",
     "shell.execute_reply": "2025-04-09T03:52:46.329500Z"
    },
    "papermill": {
     "duration": 0.011828,
     "end_time": "2025-04-09T03:52:46.332303",
     "exception": false,
     "start_time": "2025-04-09T03:52:46.320475",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def categorise_transaction(description):\n",
    "    few_shot_prompt = f\"\"\"\n",
    "    You are an AI assistant specializing in financial transaction categorization.\n",
    "    Your task is to analyze the provided transaction description and assign it to the most appropriate category and subcategory from the predefined lists.\n",
    "\n",
    "    **Allowed Categories:**\n",
    "    [   - Food & Beverages\n",
    "       - Shopping\n",
    "       - Housing\n",
    "       - Transportation\n",
    "       - Vehicle\n",
    "       - Life & Entertainment\n",
    "       - Communication, PC\n",
    "       - Financial expenses\n",
    "       - Investments\n",
    "       - Income\n",
    "    ]\n",
    "\n",
    "    **Allowed Subcategories (grouped by category for context):**\n",
    "    [\"Food & Beverages\": [\"Bar, cafe, drink, snacks\", \"Groceries\", \"Restaurant, fast-food\"],\n",
    "       \"Shopping\": [\"Clothes & Footwear\", \"Drug-store, chemist\", \"Electronics, accessories\",\n",
    "                    \"Gifts, joy\", \"Health and beauty\", \"Home, garden\", \"Jewels, accessories\",\n",
    "                    \"Kids\", \"Leisure time\", \"Pets, animals\", \"Stationery, tools\"],\n",
    "       \"Housing\": [\"Energy, utilities\", \"Maintenance, repairs\", \"Mortgage\", \"Property insurance\",\n",
    "                   \"Rent\", \"Services\"],\n",
    "       \"Transportation\": [\"Business trips\", \"Long distance\", \"Public transport\", \"Taxi\"],\n",
    "       \"Vehicle\": [\"Fuel\", \"Leasing\", \"Parking\", \"Rentals\", \"Vehicle insurance\", \"Vehicle maintenance\"],\n",
    "       \"Life & Entertainment\": [\"Active sport, fitness\", \"Alcohol, tobacco\", \"Books, audio, subscriptions\",\n",
    "                                \"Charity, gifts\", \"Culture, sport events\", \"Education, development\",\n",
    "                                \"Health care, doctor\", \"Hobbies\", \"Holiday, trips, hotels\",\n",
    "                                \"Life events\", \"Lottery, gambling\", \"TV, Streaming\", \"Wellness, beauty\"],\n",
    "       \"Communication, PC\": [\"Internet\", \"Postal services\", \"Software, apps, games\", \"Telephony, mobile phone\"],\n",
    "       \"Financial expenses\": [\"Advisory\", \"Charges, Fees\", \"Child Support\", \"Fines\", \"Insurances\",\n",
    "                              \"Loans, interests\", \"Taxes\"],\n",
    "       \"Investments\": [\"Collections\", \"Financial investments\", \"Realty\", \"Savings\", \"Vehicles, chattels\"],\n",
    "       \"Income\": [\"Checks, coupons\", \"Child Support\", \"Dues & grants\", \"Gifts\", \"Interests, dividends\",\n",
    "                  \"Lending, renting\", \"Lottery, gambling\", \"Refunds (tax, purchase)\",\n",
    "                  \"Rental income\", \"Sale\", \"Wage, invoices\"]\n",
    "       \"Transfer\":[\"Transfer\"]\n",
    "    ]\n",
    "\n",
    "    **Instructions:**\n",
    "    [...] Respond ONLY with a JSON object [...]\n",
    "\n",
    "    **Examples:**\n",
    "\n",
    "    * **Transaction Description:** \"BP Fuel Richmond VIC\"\n",
    "        **Output:** {{\"category\": \"Transportation\", \"subcategory\": \"Fuel\"}}\n",
    "\n",
    "    * **Transaction Description:** \"Salary Deposit ACME Corp\"\n",
    "        **Output:** {{\"category\": \"Income\", \"subcategory\": \"Salary\"}}\n",
    "\n",
    "    ---\n",
    "    **Now, categorize the following transaction:**\n",
    "\n",
    "    **Description:**\n",
    "    \"{description}\"\n",
    "\n",
    "    Output\n",
    "    \"\"\"\n",
    "    return few_shot_prompt\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "5f34e62f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-09T03:52:46.339874Z",
     "iopub.status.busy": "2025-04-09T03:52:46.339514Z",
     "iopub.status.idle": "2025-04-09T03:52:47.585988Z",
     "shell.execute_reply": "2025-04-09T03:52:47.584857Z"
    },
    "papermill": {
     "duration": 1.25245,
     "end_time": "2025-04-09T03:52:47.588005",
     "exception": false,
     "start_time": "2025-04-09T03:52:46.335555",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "file_path = \"/kaggle/input/finance-test/transactions_20250104_test.csv\"\n",
    "import pandas as pd\n",
    "import json\n",
    "df = pd.read_csv(file_path)\n",
    "\n",
    "# Import tqdm for progress bar\n",
    "from tqdm.notebook import tqdm\n",
    "import time\n",
    "\n",
    "def process_transactions_in_batches(descriptions, batch_size=5, show_progress=True):\n",
    "    all_categories = []\n",
    "    all_subcategories = []\n",
    "    \n",
    "    # Setup progress bar\n",
    "    if show_progress:\n",
    "        pbar = tqdm(total=len(descriptions), desc=\"Categorizing transactions\")\n",
    "    \n",
    "    # Process in batches\n",
    "    for i in range(0, len(descriptions), batch_size):\n",
    "        batch = descriptions[i:i+batch_size]\n",
    "        batch_categories = []\n",
    "        batch_subcategories = []\n",
    "        \n",
    "        print(f\"Processing batch {i//batch_size + 1} ({i} to {min(i+batch_size, len(descriptions))})...\")\n",
    "        \n",
    "        # Process each transaction in the current batch\n",
    "        for description in batch:\n",
    "            try:\n",
    "                # Get the formatted prompt using the function\n",
    "                prompt_text = categorise_transaction(description)\n",
    "                \n",
    "                # Start timing the API call\n",
    "                start_time = time.time()\n",
    "                \n",
    "                response = client.models.generate_content(\n",
    "                    model='gemini-2.0-flash',\n",
    "                    config=types.GenerateContentConfig(\n",
    "                        temperature=0.1,\n",
    "                        top_p=1,\n",
    "                        max_output_tokens=250,\n",
    "                    ),\n",
    "                    contents=[{\"text\": prompt_text}]  # Send the already formatted prompt\n",
    "                )\n",
    "                \n",
    "                # Calculate API call duration\n",
    "                api_time = time.time() - start_time\n",
    "                \n",
    "                # Extract category and subcategory from the JSON response\n",
    "                response_text = response.text\n",
    "                # Find JSON object using braces\n",
    "                json_start = response_text.find('{')\n",
    "                json_end = response_text.rfind('}') + 1\n",
    "                \n",
    "                if json_start >= 0 and json_end > json_start:\n",
    "                    json_str = response_text[json_start:json_end]\n",
    "                    result = json.loads(json_str)\n",
    "                    category = result.get('category', 'Unknown')\n",
    "                    subcategory = result.get('subcategory', 'Unknown')\n",
    "                else:\n",
    "                    category = 'Error'\n",
    "                    subcategory = 'Could not parse response'\n",
    "                    print(f\"Parse error for '{description}'. Response: {response_text[:100]}...\")\n",
    "                    \n",
    "            except json.JSONDecodeError as je:\n",
    "                print(f\"JSON error for '{description}': {je}\")\n",
    "                print(f\"Response text: {response_text if 'response_text' in locals() else 'No response text'}\")\n",
    "                category = 'Error'\n",
    "                subcategory = 'JSON parse error'\n",
    "            except Exception as e:\n",
    "                print(f\"Error processing '{description}': {e}\")\n",
    "                print(f\"Response was: {response.text if 'response' in locals() else 'No response'}\")\n",
    "                category = 'Error'\n",
    "                subcategory = str(e)\n",
    "            \n",
    "            batch_categories.append(category)\n",
    "            batch_subcategories.append(subcategory)\n",
    "            \n",
    "            # Update progress bar\n",
    "            if show_progress:\n",
    "                pbar.update(1)\n",
    "        \n",
    "        # Add batch results to overall results\n",
    "        all_categories.extend(batch_categories)\n",
    "        all_subcategories.extend(batch_subcategories)\n",
    "        \n",
    "        # Show detailed sample result\n",
    "        if len(batch) > 0:\n",
    "            print(f\"Sample result - '{batch[0]}': Category='{batch_categories[0]}', Subcategory='{batch_subcategories[0]}'\")\n",
    "            print(f\"API response time: {api_time:.2f} seconds\")\n",
    "            print(\"-\" * 50)\n",
    "    \n",
    "    # Close progress bar\n",
    "    if show_progress:\n",
    "        pbar.close()\n",
    "    \n",
    "    return all_categories, all_subcategories\n",
    "\n",
    "# Function to save results to CSV\n",
    "def save_results_to_csv(df, filename=\"categorized_transactions.csv\"):\n",
    "    df.to_csv(filename, index=False)\n",
    "    print(f\"Results saved to {filename}\")\n",
    "    return filename"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "06f7a883",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-09T03:52:47.595324Z",
     "iopub.status.busy": "2025-04-09T03:52:47.595005Z",
     "iopub.status.idle": "2025-04-09T03:53:50.925117Z",
     "shell.execute_reply": "2025-04-09T03:53:50.923864Z"
    },
    "papermill": {
     "duration": 63.335881,
     "end_time": "2025-04-09T03:53:50.927046",
     "exception": false,
     "start_time": "2025-04-09T03:52:47.591165",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Processing full dataset...\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "5a64d60e2eec453094f7eabef46ff57b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Categorizing transactions:   0%|          | 0/99 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processing batch 1 (0 to 10)...\n",
      "Sample result - 'Increase account balance by 1.0 AUD': Category='Financial expenses', Subcategory='Charges, Fees'\n",
      "API response time: 0.60 seconds\n",
      "--------------------------------------------------\n",
      "Processing batch 2 (10 to 20)...\n",
      "Sample result - 'Transfer\\\\nxxxx1085|xxxxx8025|SAV': Category='Transfer', Subcategory='Transfer'\n",
      "API response time: 0.60 seconds\n",
      "--------------------------------------------------\n",
      "Processing batch 3 (20 to 30)...\n",
      "Sample result - 'Transfer\\\\nxxxx1514|||SAV': Category='Transfer', Subcategory='Transfer'\n",
      "API response time: 0.65 seconds\n",
      "--------------------------------------------------\n",
      "Processing batch 4 (30 to 40)...\n",
      "Sample result - 'Direct Credit Seek Limited Pay - xxxxxxxxxxxxxx0000': Category='Income', Subcategory='Wage, invoices'\n",
      "API response time: 0.62 seconds\n",
      "--------------------------------------------------\n",
      "Processing batch 5 (40 to 50)...\n",
      "Sample result - 'Direct Credit Seek Limited Pay - xxxxxxxxxxxxxx0000': Category='Income', Subcategory='Wage, invoices'\n",
      "API response time: 0.65 seconds\n",
      "--------------------------------------------------\n",
      "Processing batch 6 (50 to 60)...\n",
      "Sample result - 'Direct Credit Seek Limited Pay - xxxxxxxxxxxxxx0000': Category='Income', Subcategory='Wage, invoices'\n",
      "API response time: 0.58 seconds\n",
      "--------------------------------------------------\n",
      "Processing batch 7 (60 to 70)...\n",
      "Sample result - 'Transfer\\\\nxxxx1514|||SAV': Category='Transfer', Subcategory='Transfer'\n",
      "API response time: 0.64 seconds\n",
      "--------------------------------------------------\n",
      "Processing batch 8 (70 to 80)...\n",
      "Sample result - 'Direct Credit Seek Limited Pay - xxxxxxxxxxxxxx0000': Category='Income', Subcategory='Wage, invoices'\n",
      "API response time: 0.58 seconds\n",
      "--------------------------------------------------\n",
      "Processing batch 9 (80 to 90)...\n",
      "Sample result - 'Transfer\\\\nxxxx1433|||SAV': Category='Transfer', Subcategory='Transfer'\n",
      "API response time: 0.57 seconds\n",
      "--------------------------------------------------\n",
      "Processing batch 10 (90 to 99)...\n",
      "Sample result - 'Transfer\\\\nxxxx1298|||SAV': Category='Transfer', Subcategory='Transfer'\n",
      "API response time: 0.58 seconds\n",
      "--------------------------------------------------\n",
      "Results saved to full_categorized_transactions.csv\n",
      "\n",
      "Sample of Final Results:\n",
      "                                          description            category  \\\n",
      "0                 Increase account balance by 1.0 AUD  Financial expenses   \n",
      "1                                      Amazon Digital            Shopping   \n",
      "2                            Bonus interest activated              Income   \n",
      "3                            Bonus interest activated              Income   \n",
      "4                                     Interest earned              Income   \n",
      "5                   Bonus interest activated ($72.91)              Income   \n",
      "6                            Bonus interest activated              Income   \n",
      "7                            Bonus interest activated              Income   \n",
      "8                            Bonus interest activated              Income   \n",
      "9                            Bonus interest activated              Income   \n",
      "10                  Transfer\\\\nxxxx1085|xxxxx8025|SAV            Transfer   \n",
      "11                  Transfer\\\\nxxxx1085|xxxxx8577|SAV            Transfer   \n",
      "12                           Bonus interest activated              Income   \n",
      "13                  Transfer\\\\nxxxx1085|xxxxx3965|SAV            Transfer   \n",
      "14                  Transfer\\\\nxxxx1158|xxxxx2470|SAV            Transfer   \n",
      "15                  Transfer\\\\nxxxx1085|xxxxx0369|SAV            Transfer   \n",
      "16                  Transfer\\\\nxxxx1085|xxxxx5814|SAV            Transfer   \n",
      "17                               Transfer\\\\nxxxx1514|            Transfer   \n",
      "18                           Bonus interest activated              Income   \n",
      "19  Direct Credit Seek Limited Pay - xxxxxxxxxxxxx...              Income   \n",
      "\n",
      "                 subcategory  \n",
      "0              Charges, Fees  \n",
      "1   Electronics, accessories  \n",
      "2       Interests, dividends  \n",
      "3       Interests, dividends  \n",
      "4       Interests, dividends  \n",
      "5       Interests, dividends  \n",
      "6       Interests, dividends  \n",
      "7       Interests, dividends  \n",
      "8       Interests, dividends  \n",
      "9       Interests, dividends  \n",
      "10                  Transfer  \n",
      "11                  Transfer  \n",
      "12      Interests, dividends  \n",
      "13                  Transfer  \n",
      "14                  Transfer  \n",
      "15                  Transfer  \n",
      "16                  Transfer  \n",
      "17                  Transfer  \n",
      "18      Interests, dividends  \n",
      "19            Wage, invoices  \n"
     ]
    }
   ],
   "source": [
    "# For processing the full dataset (uncomment when ready)\n",
    "print(\"\\nProcessing full dataset...\")\n",
    "full_categories, full_subcategories = process_transactions_in_batches(\n",
    "    df['description'].tolist(), \n",
    "    batch_size=10,  # Increased batch size for faster processing\n",
    "    show_progress=True\n",
    ")\n",
    "\n",
    "# Add results to the main dataframe\n",
    "df['category'] = full_categories\n",
    "df['subcategory'] = full_subcategories\n",
    "\n",
    "# Save full results\n",
    "save_results_to_csv(df, \"full_categorized_transactions.csv\")\n",
    "\n",
    "# Display a sample of results\n",
    "print(\"\\nSample of Final Results:\")\n",
    "print(df[['description', 'category', 'subcategory']].head(20))\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 7084116,
     "sourceId": 11325548,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30918,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 79.481121,
   "end_time": "2025-04-09T03:53:51.753092",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-04-09T03:52:32.271971",
   "version": "2.6.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "0c7d609a4d9f43428eacdba1c0ea886c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0f2682d49b3e460d8032f5a950e40764": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4270d904d296495b80521e95e6ed5eea": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0f2682d49b3e460d8032f5a950e40764",
       "placeholder": "​",
       "style": "IPY_MODEL_a8826de0871848869ef290a5f0d0a42a",
       "tabbable": null,
       "tooltip": null,
       "value": "Categorizing transactions: 100%"
      }
     },
     "5a64d60e2eec453094f7eabef46ff57b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_4270d904d296495b80521e95e6ed5eea",
        "IPY_MODEL_8f85f51806254ad5a8f651c08ab7080c",
        "IPY_MODEL_6e131a355bad4469a245a309e5199763"
       ],
       "layout": "IPY_MODEL_0c7d609a4d9f43428eacdba1c0ea886c",
       "tabbable": null,
       "tooltip": null
      }
     },
     "6e131a355bad4469a245a309e5199763": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_fdeef95e6421461a990a1a7caab3af17",
       "placeholder": "​",
       "style": "IPY_MODEL_fe1f8f0c796b4b2087560fd43c4786f5",
       "tabbable": null,
       "tooltip": null,
       "value": " 99/99 [01:03&lt;00:00,  1.64it/s]"
      }
     },
     "74bd67894e1249cc946c5db6c97aff0c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "8f85f51806254ad5a8f651c08ab7080c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_d28d12e74ffd4957b94e2e35d9f3b823",
       "max": 99.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_74bd67894e1249cc946c5db6c97aff0c",
       "tabbable": null,
       "tooltip": null,
       "value": 99.0
      }
     },
     "a8826de0871848869ef290a5f0d0a42a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "d28d12e74ffd4957b94e2e35d9f3b823": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "fdeef95e6421461a990a1a7caab3af17": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "fe1f8f0c796b4b2087560fd43c4786f5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
