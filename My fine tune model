{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"colab":{"name":"day-4-fine-tuning-a-custom-model.ipynb","toc_visible":true},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":11349158,"sourceType":"datasetVersion","datasetId":7099621}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"## Categorise finance transactions\n\nIn life, my financial transactions are often categorised incorrectly in my budgeting app. I decided to find a better solution.\n\nIn this example, I will first try to categrise with an exsiting Gemini model using zero-shot prompt and evaluate it performance.Then I will tune a model with the data catagorised by me,and evaluate its performance.","metadata":{"id":"4KDIFPAL2EnL"}},{"cell_type":"code","source":"!pip uninstall -qqy jupyterlab  # Remove unused conflicting packages\n!pip install -U -q \"google-genai==1.7.0\"","metadata":{"id":"9wafTyEH1_xF","trusted":true,"execution":{"iopub.status.busy":"2025-04-10T12:19:35.738797Z","iopub.execute_input":"2025-04-10T12:19:35.739185Z","iopub.status.idle":"2025-04-10T12:19:47.517312Z","shell.execute_reply.started":"2025-04-10T12:19:35.739154Z","shell.execute_reply":"2025-04-10T12:19:47.515836Z"}},"outputs":[],"execution_count":20},{"cell_type":"code","source":"from google import genai\nfrom google.genai import types\n\ngenai.__version__","metadata":{"id":"T0CBG9xL2PvT","trusted":true,"execution":{"iopub.status.busy":"2025-04-10T12:19:47.519925Z","iopub.execute_input":"2025-04-10T12:19:47.520273Z","iopub.status.idle":"2025-04-10T12:19:47.527735Z","shell.execute_reply.started":"2025-04-10T12:19:47.520239Z","shell.execute_reply":"2025-04-10T12:19:47.526683Z"}},"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"'1.7.0'"},"metadata":{}}],"execution_count":21},{"cell_type":"code","source":"from kaggle_secrets import UserSecretsClient\n\nGOOGLE_API_KEY = UserSecretsClient().get_secret(\"GOOGLE_API_KEY\")\n\nclient = genai.Client(api_key=GOOGLE_API_KEY)","metadata":{"id":"VuJPY3GK2SLZ","trusted":true,"execution":{"iopub.status.busy":"2025-04-10T12:19:47.528923Z","iopub.execute_input":"2025-04-10T12:19:47.529243Z","iopub.status.idle":"2025-04-10T12:19:47.733350Z","shell.execute_reply.started":"2025-04-10T12:19:47.529211Z","shell.execute_reply":"2025-04-10T12:19:47.732297Z"}},"outputs":[],"execution_count":22},{"cell_type":"markdown","source":"### Explore available models","metadata":{"id":"CqVA5QFO6n4z"}},{"cell_type":"markdown","source":"for model in client.models.list():\n        print(model.name)","metadata":{"id":"coEacWAB6o0G","execution":{"iopub.status.busy":"2025-04-10T12:48:47.106062Z","iopub.execute_input":"2025-04-10T12:48:47.106491Z","iopub.status.idle":"2025-04-10T12:48:47.185531Z","shell.execute_reply.started":"2025-04-10T12:48:47.106423Z","shell.execute_reply":"2025-04-10T12:48:47.184499Z"}}},{"cell_type":"markdown","source":"## Use the dataset\n\nI have uploaded transaction data categorised by me. Then I group it to training data and test data","metadata":{"id":"peFm0w_0c1CO"}},{"cell_type":"code","source":"# Load your transaction data\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n# Load your data\nfile_path = \"/kaggle/input/training/categorized_transaction.csv\"\ndf = pd.read_csv(file_path)\n\n# Split into train and test sets (80/20 split)\ndf_train, df_test = train_test_split(df, test_size=0.2, random_state=42)\n\n# Display the subcategories (labels) in your dataset\nsubcategories = df['subcategory'].unique()\nprint(f\"Number of subcategories: {len(subcategories)}\")\nprint(\"Sample subcategories:\", subcategories[:10])  # Show first 10 subcategories\n\n# Quick look at note examples\nprint(\"\\nSample notes:\")\nfor i, note in enumerate(df['note'].head(3)):\n    print(f\"{i+1}. {note} → {df['subcategory'].iloc[i]}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T12:19:47.735339Z","iopub.execute_input":"2025-04-10T12:19:47.735682Z","iopub.status.idle":"2025-04-10T12:19:47.782488Z","shell.execute_reply.started":"2025-04-10T12:19:47.735650Z","shell.execute_reply":"2025-04-10T12:19:47.781365Z"}},"outputs":[{"name":"stdout","text":"Number of subcategories: 65\nSample subcategories: ['Active sport, fitness' 'Advisory' 'Alcohol, tobacco'\n 'Bar, cafe, drink, snacks' 'Books, audio, subscriptions' 'Charges, Fees'\n 'Charity, gifts' 'Checks, coupons' 'Clothes & shoes'\n 'Culture, sport events']\n\nSample notes:\n1. AMAZON AU      SYDNEY SOUTH CREDIT CARD PURCHASEAmazon Basics High-Density Round Foam Roller for Exercise and Recovery - 61cm, Blue Speckled → Active sport, fitness\n2. 02 DEC 20 - $98.00 LULULEMON ATHLETICA AUSTRAlbert Park [Eff Date: 30 NOV 20] → Active sport, fitness\n3. REBEL MELBOURNE CTRL MELBOURNE VI AUSTap and Pay xx3173Value Date_ 17/03/2018 → Active sport, fitness\n","output_type":"stream"}],"execution_count":23},{"cell_type":"markdown","source":"## Sample the dataset\nNow sample the data. I will keep 50 rows for each subcategory for training.","metadata":{"id":"03lDs1O4ZQ0-"}},{"cell_type":"code","source":"def sample_data(df, num_samples):\n    \"\"\"\n    Sample rows from each subcategory, selecting num_samples from each.\n    If a subcategory has fewer than num_samples entries, takes all available rows.\n    \n    Args:\n        df: DataFrame containing transaction data\n        num_samples: Number of samples to take per subcategory\n        \n    Returns:\n        DataFrame with balanced samples across subcategories\n    \"\"\"\n    # Group by subcategory and sample\n    sampled_df = (\n        df.groupby(\"subcategory\")[df.columns]\n        .apply(lambda x: x.sample(min(len(x), num_samples)))\n        .reset_index(drop=True)\n    )\n    \n    # Convert subcategory to category type for efficiency\n    sampled_df[\"subcategory\"] = sampled_df[\"subcategory\"].astype(\"category\")\n    \n    return sampled_df\n\n# Sample training and test data\nTRAIN_NUM_SAMPLES = 50  # 50 samples per subcategory for training\nTEST_NUM_SAMPLES = 10   # 10 samples per subcategory for testing\n\n# Create balanced datasets\ndf_train_sampled = sample_data(df_train, TRAIN_NUM_SAMPLES)\ndf_test_sampled = sample_data(df_test, TEST_NUM_SAMPLES)\n\n# Print statistics about the sampled data\nprint(f\"Original training data: {len(df_train)} rows\")\nprint(f\"Sampled training data: {len(df_train_sampled)} rows\")\nprint(f\"Number of subcategories: {df_train_sampled['subcategory'].nunique()}\")\n\n# Show distribution of a few subcategories\nprint(\"\\nSample of subcategory counts in training data:\")\nprint(df_train_sampled['subcategory'].value_counts().head(5))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T12:19:47.783950Z","iopub.execute_input":"2025-04-10T12:19:47.784385Z","iopub.status.idle":"2025-04-10T12:19:47.826658Z","shell.execute_reply.started":"2025-04-10T12:19:47.784334Z","shell.execute_reply":"2025-04-10T12:19:47.825499Z"}},"outputs":[{"name":"stdout","text":"Original training data: 9936 rows\nSampled training data: 1654 rows\nNumber of subcategories: 63\n\nSample of subcategory counts in training data:\nsubcategory\nHobbies                  50\nInterests, dividends     50\nHome, garden             50\nTRANSFER                 50\nSoftware, apps, games    50\nName: count, dtype: int64\n","output_type":"stream"}],"execution_count":24},{"cell_type":"markdown","source":"## Load the subcategory and category tabe\nIn this step, I load the subcategory and category table.","metadata":{}},{"cell_type":"code","source":"import sqlite3\n\n# Connect to your database\ndb_conn = sqlite3.connect('/kaggle/working/transaction_categories.db')\ncursor = db_conn.cursor()\n\n# Create the tables\ncursor.execute('''\nCREATE TABLE IF NOT EXISTS categories (\n    category_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name VARCHAR(100) NOT NULL UNIQUE,\n    description TEXT,\n    display_order INT DEFAULT 100,\n    is_active BOOLEAN DEFAULT 1,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n''')\n\ncursor.execute('''\nCREATE TABLE IF NOT EXISTS subcategories (\n    subcategory_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category_id INTEGER NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT,\n    display_order INT DEFAULT 100,\n    is_active BOOLEAN DEFAULT 1,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n)\n''')\n\n\n# Insert main categories\ncategories = [\n    ('Food & Beverages', 'Expenses related to food and drinks', 10),\n    ('Shopping', 'Retail purchases and shopping expenses', 20),\n    ('Housing', 'Home-related expenses including rent and utilities', 30),\n    ('Transportation', 'Public and private transportation costs', 40),\n    ('Vehicle', 'Car and vehicle related expenses', 50),\n    ('Life & Entertainment', 'Leisure activities and entertainment', 60),\n    ('Communication, PC', 'Internet, phone and computer expenses', 70),\n    ('Financial expenses', 'Banking fees, loans, and financial costs', 80),\n    ('Investments', 'Investment-related transactions', 90),\n    ('Income', 'All sources of incoming money', 100),\n    ('Transfer', 'Money transfers between accounts', 110)\n]\n\ncursor.executemany('INSERT OR IGNORE INTO categories (name, description, display_order) VALUES (?, ?, ?)', categories)\n\n# Insert subcategories for Food & Beverages\nfood_subcategories = [\n    (1, 'Bar, cafe, drink, snacks', 10),\n    (1, 'Groceries', 20),\n    (1, 'Restaurant, fast-food', 30)\n]\ncursor.executemany('INSERT OR IGNORE INTO subcategories (category_id, name, display_order) VALUES (?, ?, ?)', food_subcategories)\n\n# Insert subcategories for Shopping\nshopping_subcategories = [\n    (2, 'Clothes & Footwear', 10),\n    (2, 'Drug-store, chemist', 20),\n    (2, 'Electronics, accessories', 30),\n    (2, 'Gifts, joy', 40),\n    (2, 'Health and beauty', 50),\n    (2, 'Home, garden', 60),\n    (2, 'Jewels, accessories', 70),\n    (2, 'Kids', 80),\n    (2, 'Leisure time', 90),\n    (2, 'Pets, animals', 100),\n    (2, 'Stationery, tools', 110)\n]\ncursor.executemany('INSERT OR IGNORE INTO subcategories (category_id, name, display_order) VALUES (?, ?, ?)', shopping_subcategories)\n\nhousing_subcategories=[\n    (3, 'Energy, utilities', 10),\n    (3, 'Maintenance, repairs', 20),\n    (3, 'Mortgage', 30),\n    (3, 'Property insurance', 40),\n    (3, 'Rent', 50),\n    (3, 'Services', 60)\n]\ncursor.executemany('INSERT OR IGNORE INTO subcategories (category_id, name, display_order) VALUES (?, ?, ?)', housing_subcategories)\n\n\ntransportation_subcategories=[\n    (4, 'Business trips', 10),\n    (4, 'Long distance', 20),\n    (4, 'Public transport', 30),\n    (4, 'Taxi', 40)\n]\ncursor.executemany('INSERT OR IGNORE INTO subcategories (category_id, name, display_order) VALUES (?, ?, ?)', transportation_subcategories)\n\nvehicle_subcategories=[\n    (5, 'Fuel', 10),\n    (5, 'Leasing', 20),\n    (5, 'Parking', 30),\n    (5, 'Rentals', 40),\n    (5, 'Vehicle insurance', 50),\n    (5, 'Vehicle maintenance', 60)\n]\ncursor.executemany('INSERT OR IGNORE INTO subcategories (category_id, name, display_order) VALUES (?, ?, ?)', vehicle_subcategories)\n\nlife_subcategories=[\n    (6, 'Active sport, fitness', 10),\n    (6, 'Alcohol, tobacco', 20),\n    (6, 'Books, audio, subscriptions', 30),\n    (6, 'Charity, gifts', 40),\n    (6, 'Culture, sport events', 50),\n    (6, 'Education, development', 60),\n    (6, 'Health care, doctor', 70),\n    (6, 'Hobbies', 80),\n    (6, 'Holiday, trips, hotels', 90),\n    (6, 'Life events', 100),\n    (6, 'Lottery, gambling', 110),\n    (6, 'TV, Streaming', 120),\n    (6, 'Wellness, beauty', 130)\n]\ncursor.executemany('INSERT OR IGNORE INTO subcategories (category_id, name, display_order) VALUES (?, ?, ?)', life_subcategories)\n\ncommunication_subcategories=[\n    (7, 'Internet', 10),\n    (7, 'Postal services', 20),\n    (7, 'Software, apps, games', 30),\n    (7, 'Telephony, mobile phone', 40)\n]\ncursor.executemany('INSERT OR IGNORE INTO subcategories (category_id, name, display_order) VALUES (?, ?, ?)', communication_subcategories)\n\nfinancial_subcategories=[\n    (8, 'Advisory', 10),\n    (8, 'Charges, Fees', 20),\n    (8, 'Child Support', 30),\n    (8, 'Fines', 40),\n    (8, 'Insurances', 50),\n    (8, 'Loans, interests', 60),\n    (8, 'Taxes', 70)\n]\ncursor.executemany('INSERT OR IGNORE INTO subcategories (category_id, name, display_order) VALUES (?, ?, ?)', financial_subcategories)\n\ninvestments_subcategories=[\n    (9, 'Collections', 10),\n    (9, 'Financial investments', 20),\n    (9, 'Realty', 30),\n    (9, 'Savings', 40),\n    (9, 'Vehicles, chattels', 50)\n]\ncursor.executemany('INSERT OR IGNORE INTO subcategories (category_id, name, display_order) VALUES (?, ?, ?)', investments_subcategories)\n\nincome_subcategories=[\n    (10, 'Checks, coupons', 10),\n    (10, 'Child Support', 20),\n    (10, 'Dues & grants', 30),\n    (10, 'Gifts', 40),\n    (10, 'Interests, dividends', 50),\n    (10, 'Lending, renting', 60),\n    (10, 'Lottery, gambling', 70),\n    (10, 'Refunds (tax, purchase)', 80),\n    (10, 'Rental income', 90),\n    (10, 'Sale', 100),\n    (10, 'Wage, invoices', 110)\n]\ncursor.executemany('INSERT OR IGNORE INTO subcategories (category_id, name, display_order) VALUES (?, ?, ?)', income_subcategories)\n\ntransfer_subcatgories=[\n    (11, 'Transfer', 10),   \n]\ncursor.executemany('INSERT OR IGNORE INTO subcategories (category_id, name, display_order) VALUES (?, ?, ?)', transfer_subcatgories)\n\n# Commit the changes\ndb_conn.commit()\nprint(\"Database schema created successfully!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T12:19:47.828022Z","iopub.execute_input":"2025-04-10T12:19:47.828348Z","iopub.status.idle":"2025-04-10T12:19:47.859068Z","shell.execute_reply.started":"2025-04-10T12:19:47.828313Z","shell.execute_reply":"2025-04-10T12:19:47.858055Z"}},"outputs":[{"name":"stdout","text":"Database schema created successfully!\n","output_type":"stream"}],"execution_count":25},{"cell_type":"code","source":"def list_tables() -> list[str]:\n    \"\"\"Retrieve the names of all tables in the database.\"\"\"\n    # Include print logging statements so you can see when functions are being called.\n    print(' - DB CALL: list_tables()')\n\n    cursor = db_conn.cursor()\n\n    # Fetch the table names.\n    cursor.execute(\"SELECT name FROM sqlite_master WHERE type='table';\")\n\n    tables = cursor.fetchall()\n    return [t[0] for t in tables]\n\n\nlist_tables()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T12:19:47.860313Z","iopub.execute_input":"2025-04-10T12:19:47.860698Z","iopub.status.idle":"2025-04-10T12:19:47.870186Z","shell.execute_reply.started":"2025-04-10T12:19:47.860667Z","shell.execute_reply":"2025-04-10T12:19:47.869266Z"}},"outputs":[{"name":"stdout","text":" - DB CALL: list_tables()\n","output_type":"stream"},{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"['categories',\n 'sqlite_sequence',\n 'subcategories',\n 'keyword_rules',\n 'transaction_categories']"},"metadata":{}}],"execution_count":26},{"cell_type":"code","source":"def describe_table(table_name: str) -> list[tuple[str, str]]:\n    \"\"\"Look up the table schema.\n\n    Returns:\n      List of columns, where each entry is a tuple of (column, type).\n    \"\"\"\n    print(f' - DB CALL: describe_table({table_name})')\n\n    cursor = db_conn.cursor()\n\n    cursor.execute(f\"PRAGMA table_info({table_name});\")\n\n    schema = cursor.fetchall()\n    # [column index, column name, column type, ...]\n    return [(col[1], col[2]) for col in schema]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T12:19:47.871350Z","iopub.execute_input":"2025-04-10T12:19:47.871679Z","iopub.status.idle":"2025-04-10T12:19:47.884481Z","shell.execute_reply.started":"2025-04-10T12:19:47.871650Z","shell.execute_reply":"2025-04-10T12:19:47.883619Z"}},"outputs":[],"execution_count":27},{"cell_type":"code","source":"def execute_query(sql: str) -> list[list[str]]:\n    \"\"\"Execute an SQL statement, returning the results.\"\"\"\n    print(f' - DB CALL: execute_query({sql})')\n\n    cursor = db_conn.cursor()\n\n    cursor.execute(sql)\n    return cursor.fetchall()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T12:19:47.885784Z","iopub.execute_input":"2025-04-10T12:19:47.886192Z","iopub.status.idle":"2025-04-10T12:19:47.926124Z","shell.execute_reply.started":"2025-04-10T12:19:47.886148Z","shell.execute_reply":"2025-04-10T12:19:47.925147Z"}},"outputs":[{"name":"stdout","text":" - DB CALL: execute_query(select * from subcategories)\n","output_type":"stream"},{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"[(1, 1, 'Bar, cafe, drink, snacks', None, 10, 1, '2025-04-10 11:49:48'),\n (2, 1, 'Groceries', None, 20, 1, '2025-04-10 11:49:48'),\n (3, 1, 'Restaurant, fast-food', None, 30, 1, '2025-04-10 11:49:48'),\n (4, 2, 'Clothes & Footwear', None, 10, 1, '2025-04-10 11:49:48'),\n (5, 2, 'Drug-store, chemist', None, 20, 1, '2025-04-10 11:49:48'),\n (6, 2, 'Electronics, accessories', None, 30, 1, '2025-04-10 11:49:48'),\n (7, 2, 'Gifts, joy', None, 40, 1, '2025-04-10 11:49:48'),\n (8, 2, 'Health and beauty', None, 50, 1, '2025-04-10 11:49:48'),\n (9, 2, 'Home, garden', None, 60, 1, '2025-04-10 11:49:48'),\n (10, 2, 'Jewels, accessories', None, 70, 1, '2025-04-10 11:49:48'),\n (11, 2, 'Kids', None, 80, 1, '2025-04-10 11:49:48'),\n (12, 2, 'Leisure time', None, 90, 1, '2025-04-10 11:49:48'),\n (13, 2, 'Pets, animals', None, 100, 1, '2025-04-10 11:49:48'),\n (14, 2, 'Stationery, tools', None, 110, 1, '2025-04-10 11:49:48'),\n (15, 3, 'Energy, utilities', None, 10, 1, '2025-04-10 11:49:48'),\n (16, 3, 'Maintenance, repairs', None, 20, 1, '2025-04-10 11:49:48'),\n (17, 3, 'Mortgage', None, 30, 1, '2025-04-10 11:49:48'),\n (18, 3, 'Property insurance', None, 40, 1, '2025-04-10 11:49:48'),\n (19, 3, 'Rent', None, 50, 1, '2025-04-10 11:49:48'),\n (20, 3, 'Services', None, 60, 1, '2025-04-10 11:49:48'),\n (21, 4, 'Business trips', None, 10, 1, '2025-04-10 11:49:48'),\n (22, 4, 'Long distance', None, 20, 1, '2025-04-10 11:49:48'),\n (23, 4, 'Public transport', None, 30, 1, '2025-04-10 11:49:48'),\n (24, 4, 'Taxi', None, 40, 1, '2025-04-10 11:49:48'),\n (25, 5, 'Fuel', None, 10, 1, '2025-04-10 11:49:48'),\n (26, 5, 'Leasing', None, 20, 1, '2025-04-10 11:49:48'),\n (27, 5, 'Parking', None, 30, 1, '2025-04-10 11:49:48'),\n (28, 5, 'Rentals', None, 40, 1, '2025-04-10 11:49:48'),\n (29, 5, 'Vehicle insurance', None, 50, 1, '2025-04-10 11:49:48'),\n (30, 5, 'Vehicle maintenance', None, 60, 1, '2025-04-10 11:49:48'),\n (31, 6, 'Active sport, fitness', None, 10, 1, '2025-04-10 11:49:48'),\n (32, 6, 'Alcohol, tobacco', None, 20, 1, '2025-04-10 11:49:48'),\n (33, 6, 'Books, audio, subscriptions', None, 30, 1, '2025-04-10 11:49:48'),\n (34, 6, 'Charity, gifts', None, 40, 1, '2025-04-10 11:49:48'),\n (35, 6, 'Culture, sport events', None, 50, 1, '2025-04-10 11:49:48'),\n (36, 6, 'Education, development', None, 60, 1, '2025-04-10 11:49:48'),\n (37, 6, 'Health care, doctor', None, 70, 1, '2025-04-10 11:49:48'),\n (38, 6, 'Hobbies', None, 80, 1, '2025-04-10 11:49:48'),\n (39, 6, 'Holiday, trips, hotels', None, 90, 1, '2025-04-10 11:49:48'),\n (40, 6, 'Life events', None, 100, 1, '2025-04-10 11:49:48'),\n (41, 6, 'Lottery, gambling', None, 110, 1, '2025-04-10 11:49:48'),\n (42, 6, 'TV, Streaming', None, 120, 1, '2025-04-10 11:49:48'),\n (43, 6, 'Wellness, beauty', None, 130, 1, '2025-04-10 11:49:48'),\n (44, 7, 'Internet', None, 10, 1, '2025-04-10 11:49:48'),\n (45, 7, 'Postal services', None, 20, 1, '2025-04-10 11:49:48'),\n (46, 7, 'Software, apps, games', None, 30, 1, '2025-04-10 11:49:48'),\n (47, 7, 'Telephony, mobile phone', None, 40, 1, '2025-04-10 11:49:48'),\n (48, 8, 'Advisory', None, 10, 1, '2025-04-10 11:49:48'),\n (49, 8, 'Charges, Fees', None, 20, 1, '2025-04-10 11:49:48'),\n (50, 8, 'Child Support', None, 30, 1, '2025-04-10 11:49:48'),\n (51, 8, 'Fines', None, 40, 1, '2025-04-10 11:49:48'),\n (52, 8, 'Insurances', None, 50, 1, '2025-04-10 11:49:48'),\n (53, 8, 'Loans, interests', None, 60, 1, '2025-04-10 11:49:48'),\n (54, 8, 'Taxes', None, 70, 1, '2025-04-10 11:49:48'),\n (55, 9, 'Collections', None, 10, 1, '2025-04-10 11:49:48'),\n (56, 9, 'Financial investments', None, 20, 1, '2025-04-10 11:49:48'),\n (57, 9, 'Realty', None, 30, 1, '2025-04-10 11:49:48'),\n (58, 9, 'Savings', None, 40, 1, '2025-04-10 11:49:48'),\n (59, 9, 'Vehicles, chattels', None, 50, 1, '2025-04-10 11:49:48'),\n (60, 10, 'Checks, coupons', None, 10, 1, '2025-04-10 11:49:48'),\n (61, 10, 'Child Support', None, 20, 1, '2025-04-10 11:49:48'),\n (62, 10, 'Dues & grants', None, 30, 1, '2025-04-10 11:49:48'),\n (63, 10, 'Gifts', None, 40, 1, '2025-04-10 11:49:48'),\n (64, 10, 'Interests, dividends', None, 50, 1, '2025-04-10 11:49:48'),\n (65, 10, 'Lending, renting', None, 60, 1, '2025-04-10 11:49:48'),\n (66, 10, 'Lottery, gambling', None, 70, 1, '2025-04-10 11:49:48'),\n (67, 10, 'Refunds (tax, purchase)', None, 80, 1, '2025-04-10 11:49:48'),\n (68, 10, 'Rental income', None, 90, 1, '2025-04-10 11:49:48'),\n (69, 10, 'Sale', None, 100, 1, '2025-04-10 11:49:48'),\n (70, 10, 'Wage, invoices', None, 110, 1, '2025-04-10 11:49:48'),\n (71, 11, 'Transfer', None, 10, 1, '2025-04-10 11:49:48'),\n (72, 1, 'Bar, cafe, drink, snacks', None, 10, 1, '2025-04-10 11:51:14'),\n (73, 1, 'Groceries', None, 20, 1, '2025-04-10 11:51:14'),\n (74, 1, 'Restaurant, fast-food', None, 30, 1, '2025-04-10 11:51:14'),\n (75, 2, 'Clothes & Footwear', None, 10, 1, '2025-04-10 11:51:14'),\n (76, 2, 'Drug-store, chemist', None, 20, 1, '2025-04-10 11:51:14'),\n (77, 2, 'Electronics, accessories', None, 30, 1, '2025-04-10 11:51:14'),\n (78, 2, 'Gifts, joy', None, 40, 1, '2025-04-10 11:51:14'),\n (79, 2, 'Health and beauty', None, 50, 1, '2025-04-10 11:51:14'),\n (80, 2, 'Home, garden', None, 60, 1, '2025-04-10 11:51:14'),\n (81, 2, 'Jewels, accessories', None, 70, 1, '2025-04-10 11:51:14'),\n (82, 2, 'Kids', None, 80, 1, '2025-04-10 11:51:14'),\n (83, 2, 'Leisure time', None, 90, 1, '2025-04-10 11:51:14'),\n (84, 2, 'Pets, animals', None, 100, 1, '2025-04-10 11:51:14'),\n (85, 2, 'Stationery, tools', None, 110, 1, '2025-04-10 11:51:14'),\n (86, 3, 'Energy, utilities', None, 10, 1, '2025-04-10 11:51:14'),\n (87, 3, 'Maintenance, repairs', None, 20, 1, '2025-04-10 11:51:14'),\n (88, 3, 'Mortgage', None, 30, 1, '2025-04-10 11:51:14'),\n (89, 3, 'Property insurance', None, 40, 1, '2025-04-10 11:51:14'),\n (90, 3, 'Rent', None, 50, 1, '2025-04-10 11:51:14'),\n (91, 3, 'Services', None, 60, 1, '2025-04-10 11:51:14'),\n (92, 4, 'Business trips', None, 10, 1, '2025-04-10 11:51:14'),\n (93, 4, 'Long distance', None, 20, 1, '2025-04-10 11:51:14'),\n (94, 4, 'Public transport', None, 30, 1, '2025-04-10 11:51:14'),\n (95, 4, 'Taxi', None, 40, 1, '2025-04-10 11:51:14'),\n (96, 5, 'Fuel', None, 10, 1, '2025-04-10 11:51:14'),\n (97, 5, 'Leasing', None, 20, 1, '2025-04-10 11:51:14'),\n (98, 5, 'Parking', None, 30, 1, '2025-04-10 11:51:14'),\n (99, 5, 'Rentals', None, 40, 1, '2025-04-10 11:51:14'),\n (100, 5, 'Vehicle insurance', None, 50, 1, '2025-04-10 11:51:14'),\n (101, 5, 'Vehicle maintenance', None, 60, 1, '2025-04-10 11:51:14'),\n (102, 6, 'Active sport, fitness', None, 10, 1, '2025-04-10 11:51:14'),\n (103, 6, 'Alcohol, tobacco', None, 20, 1, '2025-04-10 11:51:14'),\n (104, 6, 'Books, audio, subscriptions', None, 30, 1, '2025-04-10 11:51:14'),\n (105, 6, 'Charity, gifts', None, 40, 1, '2025-04-10 11:51:14'),\n (106, 6, 'Culture, sport events', None, 50, 1, '2025-04-10 11:51:14'),\n (107, 6, 'Education, development', None, 60, 1, '2025-04-10 11:51:14'),\n (108, 6, 'Health care, doctor', None, 70, 1, '2025-04-10 11:51:14'),\n (109, 6, 'Hobbies', None, 80, 1, '2025-04-10 11:51:14'),\n (110, 6, 'Holiday, trips, hotels', None, 90, 1, '2025-04-10 11:51:14'),\n (111, 6, 'Life events', None, 100, 1, '2025-04-10 11:51:14'),\n (112, 6, 'Lottery, gambling', None, 110, 1, '2025-04-10 11:51:14'),\n (113, 6, 'TV, Streaming', None, 120, 1, '2025-04-10 11:51:14'),\n (114, 6, 'Wellness, beauty', None, 130, 1, '2025-04-10 11:51:14'),\n (115, 7, 'Internet', None, 10, 1, '2025-04-10 11:51:14'),\n (116, 7, 'Postal services', None, 20, 1, '2025-04-10 11:51:14'),\n (117, 7, 'Software, apps, games', None, 30, 1, '2025-04-10 11:51:14'),\n (118, 7, 'Telephony, mobile phone', None, 40, 1, '2025-04-10 11:51:14'),\n (119, 8, 'Advisory', None, 10, 1, '2025-04-10 11:51:14'),\n (120, 8, 'Charges, Fees', None, 20, 1, '2025-04-10 11:51:14'),\n (121, 8, 'Child Support', None, 30, 1, '2025-04-10 11:51:14'),\n (122, 8, 'Fines', None, 40, 1, '2025-04-10 11:51:14'),\n (123, 8, 'Insurances', None, 50, 1, '2025-04-10 11:51:14'),\n (124, 8, 'Loans, interests', None, 60, 1, '2025-04-10 11:51:14'),\n (125, 8, 'Taxes', None, 70, 1, '2025-04-10 11:51:14'),\n (126, 9, 'Collections', None, 10, 1, '2025-04-10 11:51:14'),\n (127, 9, 'Financial investments', None, 20, 1, '2025-04-10 11:51:14'),\n (128, 9, 'Realty', None, 30, 1, '2025-04-10 11:51:14'),\n (129, 9, 'Savings', None, 40, 1, '2025-04-10 11:51:14'),\n (130, 9, 'Vehicles, chattels', None, 50, 1, '2025-04-10 11:51:14'),\n (131, 10, 'Checks, coupons', None, 10, 1, '2025-04-10 11:51:14'),\n (132, 10, 'Child Support', None, 20, 1, '2025-04-10 11:51:14'),\n (133, 10, 'Dues & grants', None, 30, 1, '2025-04-10 11:51:14'),\n (134, 10, 'Gifts', None, 40, 1, '2025-04-10 11:51:14'),\n (135, 10, 'Interests, dividends', None, 50, 1, '2025-04-10 11:51:14'),\n (136, 10, 'Lending, renting', None, 60, 1, '2025-04-10 11:51:14'),\n (137, 10, 'Lottery, gambling', None, 70, 1, '2025-04-10 11:51:14'),\n (138, 10, 'Refunds (tax, purchase)', None, 80, 1, '2025-04-10 11:51:14'),\n (139, 10, 'Rental income', None, 90, 1, '2025-04-10 11:51:14'),\n (140, 10, 'Sale', None, 100, 1, '2025-04-10 11:51:14'),\n (141, 10, 'Wage, invoices', None, 110, 1, '2025-04-10 11:51:14'),\n (142, 11, 'Transfer', None, 10, 1, '2025-04-10 11:51:14'),\n (143, 1, 'Bar, cafe, drink, snacks', None, 10, 1, '2025-04-10 12:06:21'),\n (144, 1, 'Groceries', None, 20, 1, '2025-04-10 12:06:21'),\n (145, 1, 'Restaurant, fast-food', None, 30, 1, '2025-04-10 12:06:21'),\n (146, 2, 'Clothes & Footwear', None, 10, 1, '2025-04-10 12:06:21'),\n (147, 2, 'Drug-store, chemist', None, 20, 1, '2025-04-10 12:06:21'),\n (148, 2, 'Electronics, accessories', None, 30, 1, '2025-04-10 12:06:21'),\n (149, 2, 'Gifts, joy', None, 40, 1, '2025-04-10 12:06:21'),\n (150, 2, 'Health and beauty', None, 50, 1, '2025-04-10 12:06:21'),\n (151, 2, 'Home, garden', None, 60, 1, '2025-04-10 12:06:21'),\n (152, 2, 'Jewels, accessories', None, 70, 1, '2025-04-10 12:06:21'),\n (153, 2, 'Kids', None, 80, 1, '2025-04-10 12:06:21'),\n (154, 2, 'Leisure time', None, 90, 1, '2025-04-10 12:06:21'),\n (155, 2, 'Pets, animals', None, 100, 1, '2025-04-10 12:06:21'),\n (156, 2, 'Stationery, tools', None, 110, 1, '2025-04-10 12:06:21'),\n (157, 3, 'Energy, utilities', None, 10, 1, '2025-04-10 12:06:21'),\n (158, 3, 'Maintenance, repairs', None, 20, 1, '2025-04-10 12:06:21'),\n (159, 3, 'Mortgage', None, 30, 1, '2025-04-10 12:06:21'),\n (160, 3, 'Property insurance', None, 40, 1, '2025-04-10 12:06:21'),\n (161, 3, 'Rent', None, 50, 1, '2025-04-10 12:06:21'),\n (162, 3, 'Services', None, 60, 1, '2025-04-10 12:06:21'),\n (163, 4, 'Business trips', None, 10, 1, '2025-04-10 12:06:21'),\n (164, 4, 'Long distance', None, 20, 1, '2025-04-10 12:06:21'),\n (165, 4, 'Public transport', None, 30, 1, '2025-04-10 12:06:21'),\n (166, 4, 'Taxi', None, 40, 1, '2025-04-10 12:06:21'),\n (167, 5, 'Fuel', None, 10, 1, '2025-04-10 12:06:21'),\n (168, 5, 'Leasing', None, 20, 1, '2025-04-10 12:06:21'),\n (169, 5, 'Parking', None, 30, 1, '2025-04-10 12:06:21'),\n (170, 5, 'Rentals', None, 40, 1, '2025-04-10 12:06:21'),\n (171, 5, 'Vehicle insurance', None, 50, 1, '2025-04-10 12:06:21'),\n (172, 5, 'Vehicle maintenance', None, 60, 1, '2025-04-10 12:06:21'),\n (173, 6, 'Active sport, fitness', None, 10, 1, '2025-04-10 12:06:21'),\n (174, 6, 'Alcohol, tobacco', None, 20, 1, '2025-04-10 12:06:21'),\n (175, 6, 'Books, audio, subscriptions', None, 30, 1, '2025-04-10 12:06:21'),\n (176, 6, 'Charity, gifts', None, 40, 1, '2025-04-10 12:06:21'),\n (177, 6, 'Culture, sport events', None, 50, 1, '2025-04-10 12:06:21'),\n (178, 6, 'Education, development', None, 60, 1, '2025-04-10 12:06:21'),\n (179, 6, 'Health care, doctor', None, 70, 1, '2025-04-10 12:06:21'),\n (180, 6, 'Hobbies', None, 80, 1, '2025-04-10 12:06:21'),\n (181, 6, 'Holiday, trips, hotels', None, 90, 1, '2025-04-10 12:06:21'),\n (182, 6, 'Life events', None, 100, 1, '2025-04-10 12:06:21'),\n (183, 6, 'Lottery, gambling', None, 110, 1, '2025-04-10 12:06:21'),\n (184, 6, 'TV, Streaming', None, 120, 1, '2025-04-10 12:06:21'),\n (185, 6, 'Wellness, beauty', None, 130, 1, '2025-04-10 12:06:21'),\n (186, 7, 'Internet', None, 10, 1, '2025-04-10 12:06:21'),\n (187, 7, 'Postal services', None, 20, 1, '2025-04-10 12:06:21'),\n (188, 7, 'Software, apps, games', None, 30, 1, '2025-04-10 12:06:21'),\n (189, 7, 'Telephony, mobile phone', None, 40, 1, '2025-04-10 12:06:21'),\n (190, 8, 'Advisory', None, 10, 1, '2025-04-10 12:06:21'),\n (191, 8, 'Charges, Fees', None, 20, 1, '2025-04-10 12:06:21'),\n (192, 8, 'Child Support', None, 30, 1, '2025-04-10 12:06:21'),\n (193, 8, 'Fines', None, 40, 1, '2025-04-10 12:06:21'),\n (194, 8, 'Insurances', None, 50, 1, '2025-04-10 12:06:21'),\n (195, 8, 'Loans, interests', None, 60, 1, '2025-04-10 12:06:21'),\n (196, 8, 'Taxes', None, 70, 1, '2025-04-10 12:06:21'),\n (197, 9, 'Collections', None, 10, 1, '2025-04-10 12:06:21'),\n (198, 9, 'Financial investments', None, 20, 1, '2025-04-10 12:06:21'),\n (199, 9, 'Realty', None, 30, 1, '2025-04-10 12:06:21'),\n (200, 9, 'Savings', None, 40, 1, '2025-04-10 12:06:21'),\n (201, 9, 'Vehicles, chattels', None, 50, 1, '2025-04-10 12:06:21'),\n (202, 10, 'Checks, coupons', None, 10, 1, '2025-04-10 12:06:21'),\n (203, 10, 'Child Support', None, 20, 1, '2025-04-10 12:06:21'),\n (204, 10, 'Dues & grants', None, 30, 1, '2025-04-10 12:06:21'),\n (205, 10, 'Gifts', None, 40, 1, '2025-04-10 12:06:21'),\n (206, 10, 'Interests, dividends', None, 50, 1, '2025-04-10 12:06:21'),\n (207, 10, 'Lending, renting', None, 60, 1, '2025-04-10 12:06:21'),\n (208, 10, 'Lottery, gambling', None, 70, 1, '2025-04-10 12:06:21'),\n (209, 10, 'Refunds (tax, purchase)', None, 80, 1, '2025-04-10 12:06:21'),\n (210, 10, 'Rental income', None, 90, 1, '2025-04-10 12:06:21'),\n (211, 10, 'Sale', None, 100, 1, '2025-04-10 12:06:21'),\n (212, 10, 'Wage, invoices', None, 110, 1, '2025-04-10 12:06:21'),\n (213, 11, 'Transfer', None, 10, 1, '2025-04-10 12:06:21'),\n (214, 1, 'Bar, cafe, drink, snacks', None, 10, 1, '2025-04-10 12:19:47'),\n (215, 1, 'Groceries', None, 20, 1, '2025-04-10 12:19:47'),\n (216, 1, 'Restaurant, fast-food', None, 30, 1, '2025-04-10 12:19:47'),\n (217, 2, 'Clothes & Footwear', None, 10, 1, '2025-04-10 12:19:47'),\n (218, 2, 'Drug-store, chemist', None, 20, 1, '2025-04-10 12:19:47'),\n (219, 2, 'Electronics, accessories', None, 30, 1, '2025-04-10 12:19:47'),\n (220, 2, 'Gifts, joy', None, 40, 1, '2025-04-10 12:19:47'),\n (221, 2, 'Health and beauty', None, 50, 1, '2025-04-10 12:19:47'),\n (222, 2, 'Home, garden', None, 60, 1, '2025-04-10 12:19:47'),\n (223, 2, 'Jewels, accessories', None, 70, 1, '2025-04-10 12:19:47'),\n (224, 2, 'Kids', None, 80, 1, '2025-04-10 12:19:47'),\n (225, 2, 'Leisure time', None, 90, 1, '2025-04-10 12:19:47'),\n (226, 2, 'Pets, animals', None, 100, 1, '2025-04-10 12:19:47'),\n (227, 2, 'Stationery, tools', None, 110, 1, '2025-04-10 12:19:47'),\n (228, 3, 'Energy, utilities', None, 10, 1, '2025-04-10 12:19:47'),\n (229, 3, 'Maintenance, repairs', None, 20, 1, '2025-04-10 12:19:47'),\n (230, 3, 'Mortgage', None, 30, 1, '2025-04-10 12:19:47'),\n (231, 3, 'Property insurance', None, 40, 1, '2025-04-10 12:19:47'),\n (232, 3, 'Rent', None, 50, 1, '2025-04-10 12:19:47'),\n (233, 3, 'Services', None, 60, 1, '2025-04-10 12:19:47'),\n (234, 4, 'Business trips', None, 10, 1, '2025-04-10 12:19:47'),\n (235, 4, 'Long distance', None, 20, 1, '2025-04-10 12:19:47'),\n (236, 4, 'Public transport', None, 30, 1, '2025-04-10 12:19:47'),\n (237, 4, 'Taxi', None, 40, 1, '2025-04-10 12:19:47'),\n (238, 5, 'Fuel', None, 10, 1, '2025-04-10 12:19:47'),\n (239, 5, 'Leasing', None, 20, 1, '2025-04-10 12:19:47'),\n (240, 5, 'Parking', None, 30, 1, '2025-04-10 12:19:47'),\n (241, 5, 'Rentals', None, 40, 1, '2025-04-10 12:19:47'),\n (242, 5, 'Vehicle insurance', None, 50, 1, '2025-04-10 12:19:47'),\n (243, 5, 'Vehicle maintenance', None, 60, 1, '2025-04-10 12:19:47'),\n (244, 6, 'Active sport, fitness', None, 10, 1, '2025-04-10 12:19:47'),\n (245, 6, 'Alcohol, tobacco', None, 20, 1, '2025-04-10 12:19:47'),\n (246, 6, 'Books, audio, subscriptions', None, 30, 1, '2025-04-10 12:19:47'),\n (247, 6, 'Charity, gifts', None, 40, 1, '2025-04-10 12:19:47'),\n (248, 6, 'Culture, sport events', None, 50, 1, '2025-04-10 12:19:47'),\n (249, 6, 'Education, development', None, 60, 1, '2025-04-10 12:19:47'),\n (250, 6, 'Health care, doctor', None, 70, 1, '2025-04-10 12:19:47'),\n (251, 6, 'Hobbies', None, 80, 1, '2025-04-10 12:19:47'),\n (252, 6, 'Holiday, trips, hotels', None, 90, 1, '2025-04-10 12:19:47'),\n (253, 6, 'Life events', None, 100, 1, '2025-04-10 12:19:47'),\n (254, 6, 'Lottery, gambling', None, 110, 1, '2025-04-10 12:19:47'),\n (255, 6, 'TV, Streaming', None, 120, 1, '2025-04-10 12:19:47'),\n (256, 6, 'Wellness, beauty', None, 130, 1, '2025-04-10 12:19:47'),\n (257, 7, 'Internet', None, 10, 1, '2025-04-10 12:19:47'),\n (258, 7, 'Postal services', None, 20, 1, '2025-04-10 12:19:47'),\n (259, 7, 'Software, apps, games', None, 30, 1, '2025-04-10 12:19:47'),\n (260, 7, 'Telephony, mobile phone', None, 40, 1, '2025-04-10 12:19:47'),\n (261, 8, 'Advisory', None, 10, 1, '2025-04-10 12:19:47'),\n (262, 8, 'Charges, Fees', None, 20, 1, '2025-04-10 12:19:47'),\n (263, 8, 'Child Support', None, 30, 1, '2025-04-10 12:19:47'),\n (264, 8, 'Fines', None, 40, 1, '2025-04-10 12:19:47'),\n (265, 8, 'Insurances', None, 50, 1, '2025-04-10 12:19:47'),\n (266, 8, 'Loans, interests', None, 60, 1, '2025-04-10 12:19:47'),\n (267, 8, 'Taxes', None, 70, 1, '2025-04-10 12:19:47'),\n (268, 9, 'Collections', None, 10, 1, '2025-04-10 12:19:47'),\n (269, 9, 'Financial investments', None, 20, 1, '2025-04-10 12:19:47'),\n (270, 9, 'Realty', None, 30, 1, '2025-04-10 12:19:47'),\n (271, 9, 'Savings', None, 40, 1, '2025-04-10 12:19:47'),\n (272, 9, 'Vehicles, chattels', None, 50, 1, '2025-04-10 12:19:47'),\n (273, 10, 'Checks, coupons', None, 10, 1, '2025-04-10 12:19:47'),\n (274, 10, 'Child Support', None, 20, 1, '2025-04-10 12:19:47'),\n (275, 10, 'Dues & grants', None, 30, 1, '2025-04-10 12:19:47'),\n (276, 10, 'Gifts', None, 40, 1, '2025-04-10 12:19:47'),\n (277, 10, 'Interests, dividends', None, 50, 1, '2025-04-10 12:19:47'),\n (278, 10, 'Lending, renting', None, 60, 1, '2025-04-10 12:19:47'),\n (279, 10, 'Lottery, gambling', None, 70, 1, '2025-04-10 12:19:47'),\n (280, 10, 'Refunds (tax, purchase)', None, 80, 1, '2025-04-10 12:19:47'),\n (281, 10, 'Rental income', None, 90, 1, '2025-04-10 12:19:47'),\n (282, 10, 'Sale', None, 100, 1, '2025-04-10 12:19:47'),\n (283, 10, 'Wage, invoices', None, 110, 1, '2025-04-10 12:19:47'),\n (284, 11, 'Transfer', None, 10, 1, '2025-04-10 12:19:47')]"},"metadata":{}}],"execution_count":28},{"cell_type":"code","source":"# These are the Python functions defined above.\ndb_tools = [list_tables, describe_table, execute_query]\n\ninstruction = \"\"\"You are a helpful chatbot that can interact with an SQL database for financial transactions. You will first use list_tables to see what tables are present, describe_table to understand the\nschema, and execute_query to issue an SQL SELECT query.\"\"\"\n\nclient = genai.Client(api_key=GOOGLE_API_KEY)\n\n# Start with a message prompt for the model\nuser_query = \"\"\"You will find all unique combination of category.subcategory. \nThen you will pick one word or create short,one-word, acronyms for category, lower case only; \nYou will pick max two words or create short, two-words max acronyms for subcategory, lower case only; \nEach acronym or word should be meaningful, distinctive, and ideally 3-6 characters.Avoid common words like \"and\", \"&\", \"of\", \"the\", etc.\nMake sure acronyms are unique within category and subcategory.\nRegenerate the combination using the acroyms, seprate by \".\"\n\"\"\"\n\n                \n# Now use generate_content with required contents parameter\nresponse = client.models.generate_content(\n    model=\"gemini-2.0-flash\",\n    contents=user_query,\n    config=types.GenerateContentConfig(\n        system_instruction=instruction,\n        tools=db_tools,\n    ),\n)\n\nprint(response.text)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T12:54:06.352524Z","iopub.execute_input":"2025-04-10T12:54:06.353291Z","iopub.status.idle":"2025-04-10T12:54:08.449485Z","shell.execute_reply.started":"2025-04-10T12:54:06.353256Z","shell.execute_reply":"2025-04-10T12:54:08.447975Z"}},"outputs":[{"name":"stdout","text":" - DB CALL: list_tables()\n - DB CALL: describe_table(categories)\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mServerError\u001b[0m                               Traceback (most recent call last)","Cell \u001b[0;32mIn[53], line 20\u001b[0m\n\u001b[1;32m     10\u001b[0m user_query \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\"\"\u001b[39m\u001b[38;5;124mYou will find all unique combination of category.subcategory. \u001b[39m\n\u001b[1;32m     11\u001b[0m \u001b[38;5;124mThen you will pick one word or create short,one-word, acronyms for category, lower case only; \u001b[39m\n\u001b[1;32m     12\u001b[0m \u001b[38;5;124mYou will pick max two words or create short, two-words max acronyms for subcategory, lower case only; \u001b[39m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[38;5;124mRegenerate the combination using the acroyms, seprate by \u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m     16\u001b[0m \u001b[38;5;124m\"\"\"\u001b[39m\n\u001b[1;32m     19\u001b[0m \u001b[38;5;66;03m# Now use generate_content with required contents parameter\u001b[39;00m\n\u001b[0;32m---> 20\u001b[0m response \u001b[38;5;241m=\u001b[39m \u001b[43mclient\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmodels\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mgenerate_content\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m     21\u001b[0m \u001b[43m    \u001b[49m\u001b[43mmodel\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mgemini-2.0-flash\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m     22\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcontents\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43muser_query\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m     23\u001b[0m \u001b[43m    \u001b[49m\u001b[43mconfig\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtypes\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mGenerateContentConfig\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m     24\u001b[0m \u001b[43m        \u001b[49m\u001b[43msystem_instruction\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minstruction\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m     25\u001b[0m \u001b[43m        \u001b[49m\u001b[43mtools\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdb_tools\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m     26\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m     27\u001b[0m \u001b[43m)\u001b[49m\n\u001b[1;32m     29\u001b[0m \u001b[38;5;28mprint\u001b[39m(response\u001b[38;5;241m.\u001b[39mtext)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/google/genai/models.py:5370\u001b[0m, in \u001b[0;36mModels.generate_content\u001b[0;34m(self, model, contents, config)\u001b[0m\n\u001b[1;32m   5368\u001b[0m \u001b[38;5;28;01mwhile\u001b[39;00m remaining_remote_calls_afc \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m0\u001b[39m:\n\u001b[1;32m   5369\u001b[0m   i \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1\u001b[39m\n\u001b[0;32m-> 5370\u001b[0m   response \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_generate_content\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   5371\u001b[0m \u001b[43m      \u001b[49m\u001b[43mmodel\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mmodel\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcontents\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcontents\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mconfig\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mconfig\u001b[49m\n\u001b[1;32m   5372\u001b[0m \u001b[43m  \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   5373\u001b[0m   logger\u001b[38;5;241m.\u001b[39minfo(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mAFC remote call \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mi\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m is done.\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m   5374\u001b[0m   remaining_remote_calls_afc \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1\u001b[39m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/google/genai/models.py:4338\u001b[0m, in \u001b[0;36mModels._generate_content\u001b[0;34m(self, model, contents, config)\u001b[0m\n\u001b[1;32m   4335\u001b[0m request_dict \u001b[38;5;241m=\u001b[39m _common\u001b[38;5;241m.\u001b[39mconvert_to_dict(request_dict)\n\u001b[1;32m   4336\u001b[0m request_dict \u001b[38;5;241m=\u001b[39m _common\u001b[38;5;241m.\u001b[39mencode_unserializable_types(request_dict)\n\u001b[0;32m-> 4338\u001b[0m response_dict \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_api_client\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrequest\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   4339\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mpost\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpath\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrequest_dict\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mhttp_options\u001b[49m\n\u001b[1;32m   4340\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   4342\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_api_client\u001b[38;5;241m.\u001b[39mvertexai:\n\u001b[1;32m   4343\u001b[0m   response_dict \u001b[38;5;241m=\u001b[39m _GenerateContentResponse_from_vertex(\n\u001b[1;32m   4344\u001b[0m       \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_api_client, response_dict\n\u001b[1;32m   4345\u001b[0m   )\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/google/genai/_api_client.py:640\u001b[0m, in \u001b[0;36mBaseApiClient.request\u001b[0;34m(self, http_method, path, request_dict, http_options)\u001b[0m\n\u001b[1;32m    630\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mrequest\u001b[39m(\n\u001b[1;32m    631\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[1;32m    632\u001b[0m     http_method: \u001b[38;5;28mstr\u001b[39m,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    635\u001b[0m     http_options: Optional[HttpOptionsOrDict] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[1;32m    636\u001b[0m ):\n\u001b[1;32m    637\u001b[0m   http_request \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_build_request(\n\u001b[1;32m    638\u001b[0m       http_method, path, request_dict, http_options\n\u001b[1;32m    639\u001b[0m   )\n\u001b[0;32m--> 640\u001b[0m   response \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_request\u001b[49m\u001b[43m(\u001b[49m\u001b[43mhttp_request\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mstream\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m)\u001b[49m\n\u001b[1;32m    641\u001b[0m   json_response \u001b[38;5;241m=\u001b[39m response\u001b[38;5;241m.\u001b[39mjson\n\u001b[1;32m    642\u001b[0m   \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m json_response:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/google/genai/_api_client.py:569\u001b[0m, in \u001b[0;36mBaseApiClient._request\u001b[0;34m(self, http_request, stream)\u001b[0m\n\u001b[1;32m    561\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    562\u001b[0m   response \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_httpx_client\u001b[38;5;241m.\u001b[39mrequest(\n\u001b[1;32m    563\u001b[0m       method\u001b[38;5;241m=\u001b[39mhttp_request\u001b[38;5;241m.\u001b[39mmethod,\n\u001b[1;32m    564\u001b[0m       url\u001b[38;5;241m=\u001b[39mhttp_request\u001b[38;5;241m.\u001b[39murl,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    567\u001b[0m       timeout\u001b[38;5;241m=\u001b[39mhttp_request\u001b[38;5;241m.\u001b[39mtimeout,\n\u001b[1;32m    568\u001b[0m   )\n\u001b[0;32m--> 569\u001b[0m   \u001b[43merrors\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mAPIError\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mraise_for_response\u001b[49m\u001b[43m(\u001b[49m\u001b[43mresponse\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    570\u001b[0m   \u001b[38;5;28;01mreturn\u001b[39;00m HttpResponse(\n\u001b[1;32m    571\u001b[0m       response\u001b[38;5;241m.\u001b[39mheaders, response \u001b[38;5;28;01mif\u001b[39;00m stream \u001b[38;5;28;01melse\u001b[39;00m [response\u001b[38;5;241m.\u001b[39mtext]\n\u001b[1;32m    572\u001b[0m   )\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/google/genai/errors.py:108\u001b[0m, in \u001b[0;36mAPIError.raise_for_response\u001b[0;34m(cls, response)\u001b[0m\n\u001b[1;32m    106\u001b[0m   \u001b[38;5;28;01mraise\u001b[39;00m ClientError(status_code, response)\n\u001b[1;32m    107\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;241m500\u001b[39m \u001b[38;5;241m<\u001b[39m\u001b[38;5;241m=\u001b[39m status_code \u001b[38;5;241m<\u001b[39m \u001b[38;5;241m600\u001b[39m:\n\u001b[0;32m--> 108\u001b[0m   \u001b[38;5;28;01mraise\u001b[39;00m ServerError(status_code, response)\n\u001b[1;32m    109\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    110\u001b[0m   \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;28mcls\u001b[39m(status_code, response)\n","\u001b[0;31mServerError\u001b[0m: 503 UNAVAILABLE. {'error': {'code': 503, 'message': 'The service is currently unavailable.', 'status': 'UNAVAILABLE'}}"],"ename":"ServerError","evalue":"503 UNAVAILABLE. {'error': {'code': 503, 'message': 'The service is currently unavailable.', 'status': 'UNAVAILABLE'}}","output_type":"error"}],"execution_count":53},{"cell_type":"markdown","source":"## Instruct the zero-shot prompt\nI draft the prompt asking it to only use the subcategory from the loaded table.","metadata":{}},{"cell_type":"code","source":" import sqlite3\n\ndb_file = \"transaction_categories.db\"\ndb_conn = sqlite3.connect(db_file)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T12:19:47.961216Z","iopub.execute_input":"2025-04-10T12:19:47.961508Z","iopub.status.idle":"2025-04-10T12:19:47.966227Z","shell.execute_reply.started":"2025-04-10T12:19:47.961480Z","shell.execute_reply":"2025-04-10T12:19:47.965220Z"}},"outputs":[],"execution_count":30},{"cell_type":"code","source":"from google.api_core import retry\n\n# Define a system instruction for classification with the subcategories list\nsystem_instruct = \"\"\"\nYou are a financial transaction categorization service. You will be provided with a transaction \ndescription (note) and must classify it into exactly one of the following subcategories:\n\n{}\n\nYour response must be ONLY the exact subcategory name from this list, with no additional text.\nDo not create new categories or modify existing ones.\nIf uncertain, choose the most likely subcategory from the list above.\n\"\"\"\n\n# Get the list of subcategories and format them for the prompt\nall_subcategories = sorted(df['subcategory'].unique())\nsubcategories_text = \"\\n\".join([f\"- {subcat}\" for subcat in all_subcategories])\n\n# Insert the subcategories into the system instruction\nsystem_instruct = system_instruct.format(subcategories_text)\n\n# Define a helper to retry when per-minute quota is reached\nis_retriable = lambda e: (isinstance(e, genai.errors.APIError) and e.code in {429, 503})\n\n@retry.Retry(predicate=is_retriable)\ndef predict_label(transaction_note: str) -> str:\n    \"\"\"Classify the provided transaction note into a subcategory from the predefined list.\"\"\"\n    response = client.models.generate_content(\n        model=\"gemini-2.0-flash\",\n        config=types.GenerateContentConfig(\n            system_instruction=system_instruct),\n        contents=transaction_note)\n    rc = response.candidates[0]\n    \n    # Any errors, filters, recitation, etc we can mark as a general error\n    if rc.finish_reason.name != \"STOP\":\n        return \"(error)\"\n    else:\n        # Clean up the response\n        prediction = response.text.strip()\n        \n        # Verify the prediction is from our list of subcategories\n        if prediction in all_subcategories:\n            return prediction\n        else:\n            # Find the closest matching subcategory if possible\n            for subcat in all_subcategories:\n                if subcat.lower() in prediction.lower():\n                    return subcat\n            return \"(invalid category)\"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T12:19:47.967537Z","iopub.execute_input":"2025-04-10T12:19:47.967855Z","iopub.status.idle":"2025-04-10T12:19:48.145845Z","shell.execute_reply.started":"2025-04-10T12:19:47.967825Z","shell.execute_reply":"2025-04-10T12:19:48.145003Z"}},"outputs":[],"execution_count":31},{"cell_type":"markdown","source":"## Evaluate baseline performance\n\nNow I perform an evaluation on the available models to ensure I can measure how much the tuning helps.","metadata":{}},{"cell_type":"code","source":"import tqdm\nfrom tqdm.rich import tqdm as tqdmr\nimport warnings\n\n# Enable tqdm features on Pandas\ntqdmr.pandas()\n\n# Suppress the experimental warning\nwarnings.filterwarnings(\"ignore\", category=tqdm.TqdmExperimentalWarning)\n\n# Further sample the test data to be mindful of the free-tier quota\n# Sample a small subset of test data (adjust number as needed)\nTEST_SAMPLE_SIZE = 20\ndf_baseline_eval = df_test_sampled.sample(min(TEST_SAMPLE_SIZE, len(df_test_sampled)))\n\nprint(f\"Evaluating {len(df_baseline_eval)} transactions...\")\n\n# Make predictions using the sampled data with progress bar\ndf_baseline_eval['prediction'] = df_baseline_eval['note'].progress_apply(predict_label)\n\n# Calculate the accuracy\naccuracy = (df_baseline_eval['subcategory'] == df_baseline_eval['prediction']).mean()\nprint(f\"Baseline accuracy: {accuracy:.2%}\")\n\n# Display some examples of predictions\nprint(\"\\nSample predictions:\")\nsample_results = df_baseline_eval[['note', 'subcategory', 'prediction']].sample(min(5, len(df_baseline_eval)))\nfor idx, row in sample_results.iterrows():\n    print(f\"Transaction: {row['note'][:50]}...\")\n    print(f\"True subcategory: {row['subcategory']}\")\n    print(f\"Predicted: {row['prediction']}\")\n    print(f\"Correct: {row['subcategory'] == row['prediction']}\\n\")\n\n# Create a confusion matrix to see where the model is making mistakes\nprint(\"Most common error patterns:\")\nerror_patterns = df_baseline_eval[df_baseline_eval['subcategory'] != df_baseline_eval['prediction']]\nif len(error_patterns) > 0:\n    error_counts = error_patterns.groupby(['subcategory', 'prediction']).size().reset_index(name='count')\n    error_counts = error_counts.sort_values('count', ascending=False)\n    print(error_counts.head(5))\nelse:\n    print(\"No errors found in the evaluation set!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T12:19:48.146989Z","iopub.execute_input":"2025-04-10T12:19:48.147512Z","iopub.status.idle":"2025-04-10T12:19:58.283161Z","shell.execute_reply.started":"2025-04-10T12:19:48.147478Z","shell.execute_reply":"2025-04-10T12:19:58.282176Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"Output()","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"05b51f5bef7e48ebacb0f5680727d95e"}},"metadata":{}},{"name":"stdout","text":"Evaluating 20 transactions...\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n</pre>\n"},"metadata":{}},{"name":"stdout","text":"Baseline accuracy: 45.00%\n\nSample predictions:\nTransaction: Inward Debit Direct Entry LITTLE REAL ESTA OC12203...\nTrue subcategory: Rent\nPredicted: Rent\nCorrect: True\n\nTransaction: Regular Transfer to XXXX2596 Monthly awards...\nTrue subcategory: Charity, gifts\nPredicted: Wage, invoices\nCorrect: False\n\nTransaction: AMAZON MKTPLC AU SYDNEY SOUTH ...\nTrue subcategory: Electronics, accessories\nPredicted: Shopping\nCorrect: False\n\nTransaction: BPAY DEPARTMENT OF HOME AFFAIRS 1...\nTrue subcategory: Charges, Fees\nPredicted: Taxes\nCorrect: False\n\nTransaction: Arthurs Seat Eagle Arthurs Seat AU...\nTrue subcategory: Holiday, trips, hotels\nPredicted: Life & Entertainment\nCorrect: False\n\nMost common error patterns:\n                  subcategory      prediction  count\n69             Charity, gifts  Wage, invoices      1\n125  Electronics, accessories        Shopping      1\n457     Software, apps, games        TRANSFER      1\n60             Charity, gifts   Dues & grants      1\n58              Charges, Fees           Taxes      1\n","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_30/3877153812.py:38: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n  error_counts = error_patterns.groupby(['subcategory', 'prediction']).size().reset_index(name='count')\n","output_type":"stream"}],"execution_count":32},{"cell_type":"markdown","source":"## Tune my model\nNow I train the model with training data to tune it for assessment and potential use.","metadata":{}},{"cell_type":"markdown","source":"from collections.abc import Iterable\nimport datetime\nimport time\nimport os\n\n# 1. Prepare your transaction data for fine-tuning\nprint(\"Preparing transaction data for fine-tuning...\")\n\n# Convert the DataFrame into the format expected by the API\ntraining_examples = []\nfor _, row in df_train_sampled.iterrows():\n    training_examples.append({\n        \"textInput\": str(row['note']),\n        \"output\": str(row['subcategory'])\n    })\n\nprint(f\"Created {len(training_examples)} training examples\")\nprint(f\"Sample example - Input: '{training_examples[0]['textInput'][:50]}...'\")\nprint(f\"Sample example - Output: '{training_examples[0]['output']}'\")\n\n# 2. Prepare the dataset in the required format\ntraining_data = {\"examples\": training_examples}\n\n# 3. Set up the fine-tuning job - find existing or create new\nmodel_id = None\n\ntry:\n    # Try to read previous model ID from file\n    try:\n        with open(\"tuned_model_id.txt\", \"r\") as f:\n            saved_model_id = f.read().strip()\n            if saved_model_id:\n                print(f\"Found previously saved model ID: {saved_model_id}\")\n                model_id = saved_model_id\n    except FileNotFoundError:\n        print(\"No previously saved model ID found.\")\n    \n    # If no saved ID, check for existing models\n    if not model_id:\n        queued_model = None\n        print(\"Checking for existing tuned models...\")\n        \n        # List models in reverse order (newest first)\n        for m in reversed(client.tunings.list()):\n            # Look for transaction classifier models with flexible matching\n            if (\"transaction\" in m.name.lower() or\n                m.name.startswith('tunedModels/personal-transaction-classifier-')):\n                \n                print(f\"Found potential model: {m.name} in state: {m.state.name}\")\n                \n                # If there is a completed model, use it\n                if m.state.name == 'JOB_STATE_SUCCEEDED':\n                    model_id = m.name\n                    print(f'Found existing completed model to reuse: {model_id}')\n                    break\n                elif m.state.name == 'JOB_STATE_RUNNING' and not queued_model:\n                    # If there's a model still running, remember it\n                    queued_model = m.name\n                    print(f'Found model still in progress: {queued_model}')\n        \n        # Use queued model if found and no completed model\n        if not model_id and queued_model:\n            model_id = queued_model\n            print(f'Using in-progress model: {model_id}')\n    \n    # Create new model if needed\n    if not model_id:\n        print(\"Starting new fine-tuning job...\")\n        tuning_op = client.tunings.tune(\n            base_model=\"models/gemini-1.5-flash-001-tuning\",\n            training_dataset=training_data,\n            config=types.CreateTuningJobConfig(\n                tuned_model_display_name=\"transaction-category-classifier\",  \n                batch_size=16,\n                epoch_count=3,\n            ),\n        )\n        \n        model_id = tuning_op.name\n        print(f\"Fine-tuning initiated. Model ID: {model_id}\")\n        print(f\"Current status: {tuning_op.state}\")\n        \n        # Poll for status updates (optional)\n        print(\"Initial training status:\")\n        print(f\"  - State: {tuning_op.state}\")\n        print(f\"  - Create time: {tuning_op.create_time}\")\n        if hasattr(tuning_op, 'progress') and tuning_op.progress:\n            print(f\"  - Progress: {tuning_op.progress}%\")\n    \n    # Save the model ID for later use\n    with open(\"tuned_model_id.txt\", \"w\") as f:\n        f.write(model_id)\n    \n    print(f\"\\nUsing model: {model_id}\")\n    print(\"This ID has been saved and will be used for predictions\")\n    \nexcept Exception as e:\n    print(f\"Error in fine-tuning process: {e}\")","metadata":{"execution":{"iopub.status.busy":"2025-04-10T05:48:56.387205Z","iopub.execute_input":"2025-04-10T05:48:56.388511Z","iopub.status.idle":"2025-04-10T05:48:58.145557Z","shell.execute_reply.started":"2025-04-10T05:48:56.388457Z","shell.execute_reply":"2025-04-10T05:48:58.144833Z"}}},{"cell_type":"markdown","source":"## Monitoring progress\nHere I monitor whether this model has been tuned and ready to use.","metadata":{}},{"cell_type":"code","source":"# 4. Monitor the fine-tuning progress\nstart_time = datetime.datetime.now(datetime.timezone.utc)\ntuned_model = client.tunings.get(name=model_id)\n\nwhile not tuned_model.has_ended:\n    print(f\"Current state: {tuned_model.state.name}\")\n    if hasattr(tuned_model, 'progress'):\n        print(f\"Progress: {tuned_model.progress}%\")\n    \n    time.sleep(60)  # Check every minute\n    tuned_model = client.tunings.get(name=model_id)\n\nprint(f\"Done! The model state is: {tuned_model.state.name}\")\n\nif not tuned_model.has_succeeded and tuned_model.error:\n    print(\"Error:\", tuned_model.error)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T12:19:58.284606Z","iopub.execute_input":"2025-04-10T12:19:58.285017Z","iopub.status.idle":"2025-04-10T12:19:58.331995Z","shell.execute_reply.started":"2025-04-10T12:19:58.284971Z","shell.execute_reply":"2025-04-10T12:19:58.330509Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[33], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m# 4. Monitor the fine-tuning progress\u001b[39;00m\n\u001b[0;32m----> 2\u001b[0m start_time \u001b[38;5;241m=\u001b[39m \u001b[43mdatetime\u001b[49m\u001b[38;5;241m.\u001b[39mdatetime\u001b[38;5;241m.\u001b[39mnow(datetime\u001b[38;5;241m.\u001b[39mtimezone\u001b[38;5;241m.\u001b[39mutc)\n\u001b[1;32m      3\u001b[0m tuned_model \u001b[38;5;241m=\u001b[39m client\u001b[38;5;241m.\u001b[39mtunings\u001b[38;5;241m.\u001b[39mget(name\u001b[38;5;241m=\u001b[39mmodel_id)\n\u001b[1;32m      5\u001b[0m \u001b[38;5;28;01mwhile\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m tuned_model\u001b[38;5;241m.\u001b[39mhas_ended:\n","\u001b[0;31mNameError\u001b[0m: name 'datetime' is not defined"],"ename":"NameError","evalue":"name 'datetime' is not defined","output_type":"error"}],"execution_count":33},{"cell_type":"markdown","source":"## Evaluate Tuned Model\nHere I test and evaluate the performance of the tuned model.","metadata":{}},{"cell_type":"code","source":"# 5. Test the tuned model with a sample transaction\ndef categorize_transaction(transaction_note):\n    \"\"\"Use the fine-tuned model to categorize a transaction.\"\"\"\n    response = client.models.generate_content(\n        model=model_id,\n        contents=transaction_note,\n        config=types.GenerateContentConfig(\n            temperature=0.0,  # Use deterministic output for classification\n            max_output_tokens=10,  # Keep it short, we just need the category\n        )\n    )\n    \n    if response.candidates and response.candidates[0].content:\n        return response.candidates[0].content.parts[0].text.strip()\n    else:\n        return \"(error)\"\n\n# Test with a sample transaction\nsample_transaction = \"AMAZON PRIME MEMBERSHIP ANNUAL RENEWAL\"\npredicted_category = categorize_transaction(sample_transaction)\nprint(f\"Transaction: {sample_transaction}\")\nprint(f\"Predicted category: {predicted_category}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T12:19:58.332769Z","iopub.status.idle":"2025-04-10T12:19:58.333110Z","shell.execute_reply.started":"2025-04-10T12:19:58.332948Z","shell.execute_reply":"2025-04-10T12:19:58.332965Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# 6. Evaluate the model on test data\nimport tqdm\nfrom tqdm.rich import tqdm as tqdmr\nimport warnings\n\n# Enable tqdm features on Pandas\ntqdmr.pandas()\n\n# Suppress the experimental warning\nwarnings.filterwarnings(\"ignore\", category=tqdm.TqdmExperimentalWarning)\n\n# Sample a subset of test data for evaluation\nTEST_SAMPLE_SIZE = 20\ndf_eval = df_test_sampled.sample(min(TEST_SAMPLE_SIZE, len(df_test_sampled)))\n\nprint(f\"Evaluating on {len(df_eval)} test transactions...\")\n\n# Make predictions with progress bar\ndf_eval['prediction'] = df_eval['note'].progress_apply(categorize_transaction)\n\n# Calculate accuracy\naccuracy = (df_eval['subcategory'] == df_eval['prediction']).mean()\nprint(f\"Model accuracy: {accuracy:.2%}\")\n\n# Display some examples\nprint(\"\\nSample predictions:\")\nfor idx, row in df_eval.sample(min(5, len(df_eval))).iterrows():\n    print(f\"Transaction: {row['note'][:50]}...\")\n    print(f\"True category: {row['subcategory']}\")\n    print(f\"Predicted: {row['prediction']}\")\n    print(f\"Correct: {row['subcategory'] == row['prediction']}\\n\")\n\n# Show error analysis\nerrors = df_eval[df_eval['subcategory'] != df_eval['prediction']]\nif len(errors) > 0:\n    print(f\"Found {len(errors)} misclassifications\")\n    print(\"Most common error patterns:\")\n    error_matrix = pd.crosstab(\n        errors['subcategory'], \n        errors['prediction'], \n        rownames=['True'], \n        colnames=['Predicted']\n    )\n    print(error_matrix)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T12:19:58.335225Z","iopub.status.idle":"2025-04-10T12:19:58.335645Z","shell.execute_reply.started":"2025-04-10T12:19:58.335463Z","shell.execute_reply":"2025-04-10T12:19:58.335484Z"}},"outputs":[],"execution_count":null}]}