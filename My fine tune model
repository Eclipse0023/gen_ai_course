{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.14"},"colab":{"name":"day-4-fine-tuning-a-custom-model.ipynb","toc_visible":true},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":11385452,"sourceType":"datasetVersion","datasetId":7129309}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"## Categorise finance transactions\n\nIn life, my financial transactions are often categorised incorrectly in my budgeting app. I decided to find a better solution.\n\nIn this example, I will first try to categorise with an existing Gemini model using a zero-shot prompt and evaluate its performance. Then I will tune a model with the data categorised by me and evaluate its performance.","metadata":{"id":"4KDIFPAL2EnL"}},{"cell_type":"code","source":"# Install required libraries\n!pip uninstall -qqy jupyterlab  # Remove unused conflicting packages\n!pip install -U -q \"google-genai==1.7.0\"","metadata":{"execution":{"iopub.status.busy":"2025-04-13T13:12:20.699076Z","iopub.execute_input":"2025-04-13T13:12:20.699523Z","iopub.status.idle":"2025-04-13T13:12:32.904645Z","shell.execute_reply.started":"2025-04-13T13:12:20.699484Z","shell.execute_reply":"2025-04-13T13:12:32.903053Z"},"id":"9wafTyEH1_xF","trusted":true},"outputs":[],"execution_count":123},{"cell_type":"code","source":"# Import necessary libraries\nfrom google import genai\nfrom google.genai import types\n\ngenai.__version__","metadata":{"id":"T0CBG9xL2PvT","trusted":true,"execution":{"iopub.status.busy":"2025-04-13T13:12:32.907854Z","iopub.execute_input":"2025-04-13T13:12:32.908401Z","iopub.status.idle":"2025-04-13T13:12:32.917831Z","shell.execute_reply.started":"2025-04-13T13:12:32.908341Z","shell.execute_reply":"2025-04-13T13:12:32.916582Z"}},"outputs":[{"execution_count":124,"output_type":"execute_result","data":{"text/plain":"'1.7.0'"},"metadata":{}}],"execution_count":124},{"cell_type":"code","source":"# Set up the Google GenAI client\nfrom kaggle_secrets import UserSecretsClient\n\nGOOGLE_API_KEY = UserSecretsClient().get_secret(\"GOOGLE_API_KEY\")\n\nclient = genai.Client(api_key=GOOGLE_API_KEY)","metadata":{"id":"VuJPY3GK2SLZ","trusted":true,"execution":{"iopub.status.busy":"2025-04-13T13:12:32.919693Z","iopub.execute_input":"2025-04-13T13:12:32.920204Z","iopub.status.idle":"2025-04-13T13:12:33.128570Z","shell.execute_reply.started":"2025-04-13T13:12:32.920152Z","shell.execute_reply":"2025-04-13T13:12:33.127325Z"}},"outputs":[],"execution_count":125},{"cell_type":"markdown","source":"## Load the subcategory and category table\nIn this step, I load the subcategory and category table.","metadata":{}},{"cell_type":"markdown","source":"## Load the subcategory and category table\nIn this step, I load the subcategory, category table.","metadata":{"execution":{"iopub.status.busy":"2025-04-13T12:10:19.728661Z","iopub.execute_input":"2025-04-13T12:10:19.729115Z","iopub.status.idle":"2025-04-13T12:10:19.736220Z","shell.execute_reply.started":"2025-04-13T12:10:19.729076Z","shell.execute_reply":"2025-04-13T12:10:19.734777Z"}}},{"cell_type":"code","source":"import sqlite3\n\n# Connect to your database\ndb_conn = sqlite3.connect('/kaggle/working/transaction_categories.db')\ncursor = db_conn.cursor()\n\n# Create the tables\ncursor.execute('''\nCREATE TABLE IF NOT EXISTS categories (\n    category_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name VARCHAR(100) NOT NULL UNIQUE,\n    description TEXT,\n    display_order INT DEFAULT 100,\n    is_active BOOLEAN DEFAULT 1,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n''')\n\ncursor.execute('''\nCREATE TABLE IF NOT EXISTS subcategories (\n    subcategory_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    category_id INTEGER NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    description TEXT,\n    display_order INT DEFAULT 100,\n    is_active BOOLEAN DEFAULT 1,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n)\n''')\n\n\n# Insert main categories\ncategories = [\n    ('Food & Beverages', 'Expenses related to food and drinks', 10),\n    ('Shopping', 'Retail purchases and shopping expenses', 20),\n    ('Housing', 'Home-related expenses including rent and utilities', 30),\n    ('Transportation', 'Public and private transportation costs', 40),\n    ('Vehicle', 'Car and vehicle related expenses', 50),\n    ('Life & Entertainment', 'Leisure activities and entertainment', 60),\n    ('Communication, PC', 'Internet, phone and computer expenses', 70),\n    ('Financial expenses', 'Banking fees, loans, and financial costs', 80),\n    ('Investments', 'Investment-related transactions', 90),\n    ('Income', 'All sources of incoming money', 100),\n    ('TRANSFER', 'Money transfers between accounts', 110)\n]\n\ncursor.executemany('INSERT OR IGNORE INTO categories (name, description, display_order) VALUES (?, ?, ?)', categories)\n\n# Insert subcategories for Food & Beverages\nfood_subcategories = [\n    (1, 'Bar, cafe, drink, snacks', 10),\n    (1, 'Groceries', 20),\n    (1, 'Restaurant, fast-food', 30)\n]\ncursor.executemany('INSERT OR IGNORE INTO subcategories (category_id, name, display_order) VALUES (?, ?, ?)', food_subcategories)\n\n# Insert subcategories for Shopping\nshopping_subcategories = [\n    (2, 'Clothes & Footwear', 10),\n    (2, 'Drug-store, chemist', 20),\n    (2, 'Electronics, accessories', 30),\n    (2, 'Gifts, joy', 40),\n    (2, 'Health and beauty', 50),\n    (2, 'Home, garden', 60),\n    (2, 'Jewels, accessories', 70),\n    (2, 'Kids', 80),\n    (2, 'Leisure time', 90),\n    (2, 'Pets, animals', 100),\n    (2, 'Stationery, tools', 110)\n]\ncursor.executemany('INSERT OR IGNORE INTO subcategories (category_id, name, display_order) VALUES (?, ?, ?)', shopping_subcategories)\n\nhousing_subcategories=[\n    (3, 'Energy, utilities', 10),\n    (3, 'Maintenance, repairs', 20),\n    (3, 'Mortgage', 30),\n    (3, 'Property insurance', 40),\n    (3, 'Rent', 50),\n    (3, 'Services', 60)\n]\ncursor.executemany('INSERT OR IGNORE INTO subcategories (category_id, name, display_order) VALUES (?, ?, ?)', housing_subcategories)\n\n\ntransportation_subcategories=[\n    (4, 'Business trips', 10),\n    (4, 'Long distance', 20),\n    (4, 'Public transport', 30),\n    (4, 'Taxi', 40)\n]\ncursor.executemany('INSERT OR IGNORE INTO subcategories (category_id, name, display_order) VALUES (?, ?, ?)', transportation_subcategories)\n\nvehicle_subcategories=[\n    (5, 'Fuel', 10),\n    (5, 'Leasing', 20),\n    (5, 'Parking', 30),\n    (5, 'Rentals', 40),\n    (5, 'Vehicle insurance', 50),\n    (5, 'Vehicle maintenance', 60)\n]\ncursor.executemany('INSERT OR IGNORE INTO subcategories (category_id, name, display_order) VALUES (?, ?, ?)', vehicle_subcategories)\n\nlife_subcategories=[\n    (6, 'Active sport, fitness', 10),\n    (6, 'Alcohol, tobacco', 20),\n    (6, 'Books, audio, subscriptions', 30),\n    (6, 'Charity, gifts', 40),\n    (6, 'Culture, sport events', 50),\n    (6, 'Education, development', 60),\n    (6, 'Health care, doctor', 70),\n    (6, 'Hobbies', 80),\n    (6, 'Holiday, trips, hotels', 90),\n    (6, 'Life events', 100),\n    (6, 'Lottery, gambling', 110),\n    (6, 'TV, Streaming', 120),\n    (6, 'Wellness, beauty', 130)\n]\ncursor.executemany('INSERT OR IGNORE INTO subcategories (category_id, name, display_order) VALUES (?, ?, ?)', life_subcategories)\n\ncommunication_subcategories=[\n    (7, 'Internet', 10),\n    (7, 'Postal services', 20),\n    (7, 'Software, apps, games', 30),\n    (7, 'Telephony, mobile phone', 40)\n]\ncursor.executemany('INSERT OR IGNORE INTO subcategories (category_id, name, display_order) VALUES (?, ?, ?)', communication_subcategories)\n\nfinancial_subcategories=[\n    (8, 'Advisory', 10),\n    (8, 'Charges, Fees', 20),\n    (8, 'Child Support', 30),\n    (8, 'Fines', 40),\n    (8, 'Insurances', 50),\n    (8, 'Loans, interests', 60),\n    (8, 'Taxes', 70)\n]\ncursor.executemany('INSERT OR IGNORE INTO subcategories (category_id, name, display_order) VALUES (?, ?, ?)', financial_subcategories)\n\ninvestments_subcategories=[\n    (9, 'Collections', 10),\n    (9, 'Financial investments', 20),\n    (9, 'Realty', 30),\n    (9, 'Savings', 40),\n    (9, 'Vehicles, chattels', 50)\n]\ncursor.executemany('INSERT OR IGNORE INTO subcategories (category_id, name, display_order) VALUES (?, ?, ?)', investments_subcategories)\n\nincome_subcategories=[\n    (10, 'Checks, coupons', 10),\n    (10, 'Child Support', 20),\n    (10, 'Dues & grants', 30),\n    (10, 'Gifts', 40),\n    (10, 'Interests, dividends', 50),\n    (10, 'Lending, renting', 60),\n    (10, 'Lottery earning', 70),\n    (10, 'Refunds (tax, purchase)', 80),\n    (10, 'Rental income', 90),\n    (10, 'Sale', 100),\n    (10, 'Wage, invoices', 110)\n]\ncursor.executemany('INSERT OR IGNORE INTO subcategories (category_id, name, display_order) VALUES (?, ?, ?)', income_subcategories)\n\ntransfer_subcatgories=[\n    (11, 'TRANSFER', 10),   \n]\ncursor.executemany('INSERT OR IGNORE INTO subcategories (category_id, name, display_order) VALUES (?, ?, ?)', transfer_subcatgories)\n\n# Commit the changes\ndb_conn.commit()\nprint(\"Database schema created successfully!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-13T13:12:33.133681Z","iopub.execute_input":"2025-04-13T13:12:33.134057Z","iopub.status.idle":"2025-04-13T13:12:33.174971Z","shell.execute_reply.started":"2025-04-13T13:12:33.134025Z","shell.execute_reply":"2025-04-13T13:12:33.173477Z"}},"outputs":[{"name":"stdout","text":"Database schema created successfully!\n","output_type":"stream"}],"execution_count":126},{"cell_type":"markdown","source":"In this step, I create the mapping beween category and subcategory","metadata":{}},{"cell_type":"code","source":"def setup_database_and_get_hierarchy(output_path=\"/kaggle/working/category_mapping.csv\"):\n    \"\"\"\n    Initialize database, return category hierarchy, and output a simple mapping CSV.\n    \n    Args:\n        output_path: Path to save the mapping CSV\n        \n    Returns:\n        tuple: (db_connection, category_hierarchy_dict, subcategory_to_category_mapping)\n    \"\"\"\n    import sqlite3\n    import pandas as pd\n    \n    print(\"Setting up database and extracting category hierarchy...\")\n    \n    # Create database connection\n    db_conn = sqlite3.connect('/kaggle/working/transaction_categories.db')\n    cursor = db_conn.cursor()\n    \n    # Create tables and populate data if needed (your existing code)\n    # ... (Keep your existing table creation and population code)\n    \n    # Get complete hierarchy in one operation\n    cursor.execute(\"\"\"\n    SELECT \n        c.name as category, \n        s.name as subcategory\n    FROM categories c\n    JOIN subcategories s ON c.category_id = s.category_id\n    ORDER BY c.display_order, s.display_order\n    \"\"\")\n    \n    # Convert query results to DataFrame\n    results = cursor.fetchall()\n    mapping_df = pd.DataFrame(results, columns=['category', 'subcategory'])\n    \n    # Process results into usable format for return values\n    category_hierarchy = {}\n    subcat_to_cat_mapping = {}\n    \n    for category, subcategory in results:\n        # Build hierarchy dictionary\n        if category not in category_hierarchy:\n            category_hierarchy[category] = []\n        category_hierarchy[category].append(subcategory)\n        \n        # Build mapping dictionary\n        subcat_to_cat_mapping[subcategory] = category\n    \n    # Save to CSV file\n    mapping_df.to_csv(output_path, index=False)\n    \n    # Print summary\n    print(f\"\\nCategory-subcategory mapping saved to {output_path}\")\n    print(f\"Found {len(mapping_df['category'].unique())} categories and {len(mapping_df)} subcategories\")\n    print(\"\\nSample of mapping:\")\n    print(mapping_df.head(5))\n    \n    db_conn.commit()\n    \n    return db_conn, category_hierarchy, subcat_to_cat_mapping","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-13T13:12:33.176268Z","iopub.execute_input":"2025-04-13T13:12:33.176565Z","iopub.status.idle":"2025-04-13T13:12:33.186146Z","shell.execute_reply.started":"2025-04-13T13:12:33.176537Z","shell.execute_reply":"2025-04-13T13:12:33.184938Z"}},"outputs":[],"execution_count":127},{"cell_type":"markdown","source":"## Load the dataset\n\nI have uploaded transaction data categorised by me. Then I group it into training data and test data.","metadata":{"id":"peFm0w_0c1CO"}},{"cell_type":"code","source":"# Load and preprocess transaction data\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n# Load your data\nfile_path = \"/kaggle/input/training/categorized_transaction.csv\"\ndf = pd.read_csv(file_path)\n\n# Split into train and test sets (80/20 split)\ndf_train, df_test = train_test_split(df, test_size=0.2, random_state=42)\n\n# Display the subcategories (labels) in your dataset\nsubcategories = df['subcategory'].unique()\nprint(f\"Number of subcategories: {len(subcategories)}\")\nprint(\"Sample subcategories:\", subcategories[:10])  # Show first 10 subcategories\n\n# Quick look at note examples\nprint(\"\\nSample notes:\")\nfor i, note in enumerate(df['note'].head(3)):\n    print(f\"{i+1}. {note} → {df['subcategory'].iloc[i]}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-13T13:12:33.187697Z","iopub.execute_input":"2025-04-13T13:12:33.188179Z","iopub.status.idle":"2025-04-13T13:12:33.241275Z","shell.execute_reply.started":"2025-04-13T13:12:33.188130Z","shell.execute_reply":"2025-04-13T13:12:33.240090Z"}},"outputs":[{"name":"stdout","text":"Number of subcategories: 65\nSample subcategories: ['Active sport, fitness' 'Advisory' 'Alcohol, tobacco'\n 'Bar, cafe, drink, snacks' 'Books, audio, subscriptions' 'Charges, Fees'\n 'Charity, gifts' 'Checks, coupons' 'Clothes & shoes'\n 'Culture, sport events']\n\nSample notes:\n1. AMAZON AUSYDNEY SOUTH CREDIT CARD PURCHASEAmazon Basics High-Density Round Foam Roller for Exercise and Recovery - 61cm, Blue Speckled → Active sport, fitness\n2. 02 DEC 20 - $98.00 LULULEMON ATHLETICA AUSTRAlbert Park [Eff Date: 30 NOV 20] → Active sport, fitness\n3. REBEL MELBOURNE CTRL MELBOURNE VI AUSTap and Pay xx3173Value Date_ 17/03/2018 → Active sport, fitness\n","output_type":"stream"}],"execution_count":128},{"cell_type":"markdown","source":"## Clean the data","metadata":{}},{"cell_type":"code","source":"import re\nimport pandas as pd\n\ndef clean_transaction_note(note):\n    \"\"\"\n    Clean transaction notes to remove common bank formatting, dates, card numbers, etc.\n    \"\"\"\n    # Handle None or empty strings\n    if note is None or pd.isna(note) or note == \"\":\n        return \"\"\n    \n    # Convert to string if needed\n    text = str(note)\n    \n    # Replace non-ASCII characters\n    text = re.sub(r'[^\\x00-\\x7F]+', ' ', text)\n    \n    # Extract main part of the transaction (before common transaction markers)\n    transaction_markers = r'\\s+(?:CREDIT CARD PURCHASE|EFTPOS|Value Date|tap and Pay|Card Purchase|CARD PURCHASE)'\n    parts = re.split(transaction_markers, text, flags=re.IGNORECASE)\n    main_text = parts[0] if parts else text\n    \n    # Clean amount figures and currency symbols\n    main_text = re.sub(r'(?:[$€£¥]|AUD|USD|EUR|GBP|NZD)\\s*[-+]?(?:\\d{1,3}(?:,\\d{3})*|\\d+)(?:\\.\\d{1,2})?', '', main_text)\n    main_text = re.sub(r'\\b[-+]?(?:\\d{1,3}(?:,\\d{3})*|\\d+)(?:\\.\\d{1,2})?\\b', '', main_text)\n    \n    # Remove card numbers (masked or full)\n    main_text = re.sub(r'(?:x{2,4}|X{2,4})\\d{4}|\\b\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}\\b', '', main_text)\n    \n    # Remove date patterns\n    date_pattern = r'(?:\\d{1,2}\\s+(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]*\\s+\\d{2,4}|' + \\\n                   r'(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]*\\s+\\d{1,2}(?:st|nd|rd|th)?\\s+\\d{2,4}|' + \\\n                   r'\\d{1,2}[-/.]\\d{1,2}[-/.]\\d{2,4}|' + \\\n                   r'\\d{4}[-/.]\\d{1,2}[-/.]\\d{1,2}|' + \\\n                   r'\\[Eff\\s+Date:.*?\\]|' + \\\n                   r'Value\\s+Date[_:]\\s*\\d{1,2}[-/.]\\d{1,2}[-/.]\\d{2,4})'\n    main_text = re.sub(date_pattern, '', main_text, flags=re.IGNORECASE)\n    \n    # Clean whitespace and punctuation\n    main_text = re.sub(r'\\s+', ' ', main_text)\n    main_text = re.sub(r'[\\s,.-]+$|^[\\s,.-]+', '', main_text)\n    main_text = re.sub(r'\\s+([,.])', r'\\1', main_text)\n    \n    return main_text.strip()[:500]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-13T13:12:33.242555Z","iopub.execute_input":"2025-04-13T13:12:33.242931Z","iopub.status.idle":"2025-04-13T13:12:33.252802Z","shell.execute_reply.started":"2025-04-13T13:12:33.242897Z","shell.execute_reply":"2025-04-13T13:12:33.251541Z"}},"outputs":[],"execution_count":129},{"cell_type":"code","source":"def add_category_column(df, db_conn):\n    \"\"\"\n    Add category column to DataFrame based on subcategory using database mapping.\n    \"\"\"\n    if 'category' in df.columns:\n        print(\"Category column already exists\")\n        return df\n    \n    try:\n        # Query the database for subcategory to category mapping\n        cursor = db_conn.cursor()\n        cursor.execute(\"\"\"\n        SELECT s.name as subcategory, c.name as category \n        FROM subcategories s\n        JOIN categories c ON s.category_id = c.category_id\n        \"\"\")\n        \n        # Create mapping dictionary\n        subcat_to_cat = {row[0]: row[1] for row in cursor.fetchall()}\n        \n        # Add category column\n        df_with_category = df.copy()\n        df_with_category['category'] = df['subcategory'].map(subcat_to_cat)\n        \n        # Check for unmapped subcategories\n        missing_count = df_with_category['category'].isna().sum()\n        if missing_count > 0:\n            print(f\"Warning: {missing_count} rows have unmapped subcategories\")\n            unmapped = df[df['subcategory'].map(lambda x: x not in subcat_to_cat)]['subcategory'].unique()\n            print(f\"Unmapped subcategories: {unmapped}\")\n            \n        # Fill missing with placeholder\n        df_with_category['category'] = df_with_category['category'].fillna(\"Unknown\")\n        \n        print(f\"Added categories to {len(df_with_category)} transactions\")\n        return df_with_category\n        \n    except Exception as e:\n        print(f\"Error getting category mapping: {e}\")\n        # Create placeholder category column if needed\n        df_copy = df.copy()\n        df_copy['category'] = \"Unknown\"\n        return df_copy","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-13T13:12:33.254225Z","iopub.execute_input":"2025-04-13T13:12:33.254560Z","iopub.status.idle":"2025-04-13T13:12:33.270158Z","shell.execute_reply.started":"2025-04-13T13:12:33.254528Z","shell.execute_reply":"2025-04-13T13:12:33.269132Z"}},"outputs":[],"execution_count":130},{"cell_type":"code","source":"def sample_balanced_data(df, samples_per_subcategory):\n    \"\"\"\n    Create a balanced dataset by sampling evenly across subcategories.\n    If a subcategory has fewer than the requested samples, uses all available rows.\n    \"\"\"\n    # Group by subcategory and sample\n    sampled_df = (\n        df.groupby(\"subcategory\")[df.columns]\n        .apply(lambda x: x.sample(min(len(x), samples_per_subcategory)))\n        .reset_index(drop=True)\n    )\n    \n    # Convert subcategory to category type for efficiency\n    sampled_df[\"subcategory\"] = sampled_df[\"subcategory\"].astype(\"category\")\n    \n    return sampled_df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-13T13:12:33.271856Z","iopub.execute_input":"2025-04-13T13:12:33.272187Z","iopub.status.idle":"2025-04-13T13:12:33.286645Z","shell.execute_reply.started":"2025-04-13T13:12:33.272155Z","shell.execute_reply":"2025-04-13T13:12:33.285395Z"}},"outputs":[],"execution_count":131},{"cell_type":"code","source":"def process_transaction_data(df, db_conn, train_samples=50, test_samples=10, sample_csv_path=None):\n    \"\"\"\n    Process transaction data through all steps: cleaning, categorizing, and sampling.\n    \n    Args:\n        df: DataFrame with transaction data\n        db_conn: Database connection for category mapping\n        train_samples: Number of samples per subcategory for training\n        test_samples: Number of samples per subcategory for testing\n        sample_csv_path: Path to save a sample CSV for review\n        \n    Returns:\n        Tuple of (train_df, test_df, df_with_categories)\n    \"\"\"\n    # Make a copy to avoid modifying the original\n    df_copy = df.copy()\n    \n    # Step 1: Clean transaction notes\n    print(\"Cleaning transaction notes...\")\n    df_copy['cleaned_note'] = df_copy['note'].apply(clean_transaction_note)\n    \n    # Step 2: Add category column\n    print(\"Adding category mapping...\")\n    df_with_categories = add_category_column(df_copy, db_conn)\n    \n    # Step 3: Split into train and test data\n    train_df, test_df = train_test_split(df_with_categories, test_size=0.2, random_state=42)\n    \n    # Step 4: Sample balanced datasets\n    print(f\"Creating balanced samples ({train_samples} per subcategory for training)...\")\n    train_sampled = sample_balanced_data(train_df, train_samples)\n    test_sampled = sample_balanced_data(test_df, test_samples)\n    \n    # Step 5: Save sample for review if requested\n    if sample_csv_path:\n        # Take a small sample from each subcategory for review\n        review_sample = sample_balanced_data(df_with_categories, 2)\n        # Include original and cleaned notes for comparison\n        review_sample = review_sample[['note', 'cleaned_note', 'category', 'subcategory']]\n        review_sample.to_csv(sample_csv_path, index=False)\n        print(f\"Saved sample data to {sample_csv_path} for review\")\n    \n    # Print statistics\n    print(f\"Original data: {len(df)} transactions\")\n    print(f\"Balanced training data: {len(train_sampled)} transactions ({train_sampled['subcategory'].nunique()} subcategories)\")\n    print(f\"Balanced test data: {len(test_sampled)} transactions ({test_sampled['subcategory'].nunique()} subcategories)\")\n    \n    return train_sampled, test_sampled, df_with_categories","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-13T13:12:33.291648Z","iopub.execute_input":"2025-04-13T13:12:33.292280Z","iopub.status.idle":"2025-04-13T13:12:33.307003Z","shell.execute_reply.started":"2025-04-13T13:12:33.292240Z","shell.execute_reply":"2025-04-13T13:12:33.305545Z"}},"outputs":[],"execution_count":132},{"cell_type":"code","source":"# Connect to the database\nimport sqlite3\ndb_conn = sqlite3.connect('/kaggle/working/transaction_categories.db')\n\n# Process the data\ndf_train_sampled, df_test_sampled, df_categorized = process_transaction_data(\n    df, \n    db_conn,\n    train_samples=50, \n    test_samples=10,\n    sample_csv_path=\"/kaggle/working/transaction_sample_review.csv\"\n)\n\n# Display sample of training data\nprint(\"\\nSample of training data:\")\nprint(df_train_sampled[['cleaned_note', 'category', 'subcategory']].head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-13T13:12:33.308399Z","iopub.execute_input":"2025-04-13T13:12:33.308808Z","iopub.status.idle":"2025-04-13T13:12:33.858204Z","shell.execute_reply.started":"2025-04-13T13:12:33.308758Z","shell.execute_reply":"2025-04-13T13:12:33.857081Z"}},"outputs":[{"name":"stdout","text":"Cleaning transaction notes...\nAdding category mapping...\nWarning: 377 rows have unmapped subcategories\nUnmapped subcategories: ['Clothes & shoes' 'Financial expenses' 'Food & Drinks' 'Free time'\n 'Housing' 'Life & Entertainment' 'Loan, interests' 'Missing' 'Others'\n 'Phone, cell phone' 'Shopping' 'Transportation']\nAdded categories to 12420 transactions\nCreating balanced samples (50 per subcategory for training)...\nSaved sample data to /kaggle/working/transaction_sample_review.csv for review\nOriginal data: 12420 transactions\nBalanced training data: 1654 transactions (63 subcategories)\nBalanced test data: 349 transactions (53 subcategories)\n\nSample of training data:\n                                        cleaned_note              category  \\\n0         DEC - LULULEMON ATHLETICA AUSTRAlbert Park  Life & Entertainment   \n1  REBEL MELBOURNE CTRL MELBOURNE VI AUSTap and P...  Life & Entertainment   \n2  STATE TRUSTEES LIMIT MELBOURNE AUSCard Value D...    Financial expenses   \n3                       LIQUORLAND EASTLAND RINGWOOD  Life & Entertainment   \n4                              BWS BOX HILL BOX HILL  Life & Entertainment   \n\n             subcategory  \n0  Active sport, fitness  \n1  Active sport, fitness  \n2               Advisory  \n3       Alcohol, tobacco  \n4       Alcohol, tobacco  \n","output_type":"stream"}],"execution_count":133},{"cell_type":"markdown","source":"## Sample the dataset\nNow sample the data. I will keep 50 rows for each subcategory for training.","metadata":{"id":"03lDs1O4ZQ0-"}},{"cell_type":"code","source":"def sample_data(df, num_samples):\n    \"\"\"\n    Sample rows from each subcategory, selecting num_samples from each.\n    If a subcategory has fewer than num_samples entries, takes all available rows.\n    \n    Args:\n        df: DataFrame containing transaction data\n        num_samples: Number of samples to take per subcategory\n        \n    Returns:\n        DataFrame with balanced samples across subcategories\n    \"\"\"\n    # Group by subcategory and sample\n    sampled_df = (\n        df.groupby(\"subcategory\")[df.columns]\n        .apply(lambda x: x.sample(min(len(x), num_samples)))\n        .reset_index(drop=True)\n    )\n    \n    # Convert subcategory to category type for efficiency\n    sampled_df[\"subcategory\"] = sampled_df[\"subcategory\"].astype(\"category\")\n    \n    return sampled_df\n\n# Sample training and test data\nTRAIN_NUM_SAMPLES = 50  # 50 samples per subcategory for training\nTEST_NUM_SAMPLES = 10   # 10 samples per subcategory for testing\n\n# Create balanced datasets\ndf_train_sampled = sample_data(df_train, TRAIN_NUM_SAMPLES)\ndf_test_sampled = sample_data(df_test, TEST_NUM_SAMPLES)\n\n# Print statistics about the sampled data\nprint(f\"Original training data: {len(df_train)} rows\")\nprint(f\"Sampled training data: {len(df_train_sampled)} rows\")\nprint(f\"Number of subcategories: {df_train_sampled['subcategory'].nunique()}\")\n\n# Show distribution of a few subcategories\nprint(\"\\nSample of subcategory counts in training data:\")\nprint(df_train_sampled['subcategory'].value_counts().head(5))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-13T13:12:33.860112Z","iopub.execute_input":"2025-04-13T13:12:33.860549Z","iopub.status.idle":"2025-04-13T13:12:33.906268Z","shell.execute_reply.started":"2025-04-13T13:12:33.860503Z","shell.execute_reply":"2025-04-13T13:12:33.905096Z"}},"outputs":[{"name":"stdout","text":"Original training data: 9936 rows\nSampled training data: 1654 rows\nNumber of subcategories: 63\n\nSample of subcategory counts in training data:\nsubcategory\nHobbies                  50\nInterests, dividends     50\nHome, garden             50\nTRANSFER                 50\nSoftware, apps, games    50\nName: count, dtype: int64\n","output_type":"stream"}],"execution_count":134},{"cell_type":"code","source":"try:\n    print(\"Retrieving category-subcategory combinations from database...\")\n    \n    # Direct database query approach - more reliable than AI-generated SQL\n    cursor = db_conn.cursor()\n    cursor.execute(\"\"\"\n    SELECT \n        c.name as category, \n        s.name as subcategory\n    FROM categories c\n    JOIN subcategories s ON c.category_id = s.category_id\n    ORDER BY c.name, s.name\n    \"\"\")\n    \n    # Get the combinations directly from database\n    combinations = cursor.fetchall()\n    \n    # Create DataFrame with the combinations\n    columns = [\"category\", \"subcategory\"]\n    combinations_df = pd.DataFrame(combinations, columns=columns)\n    \n    # Save as CSV\n    combinations_df.to_csv(\"category_subcategory_combinations.csv\", index=False)\n    \n    print(f\"Successfully retrieved and saved {len(combinations_df)} category-subcategory combinations\")\n    \n    # Display preview\n    print(\"\\nFirst 5 combinations:\")\n    print(combinations_df.head())\n    \n    # Adding categories to training data if needed\n    if 'category' not in df_train_sampled.columns:\n        print(\"\\nAdding category column to training data...\")\n        \n        # Create a lookup dictionary for mapping subcategories to categories\n        subcat_to_cat = dict(zip(combinations_df['subcategory'], combinations_df['category']))\n        \n        # Add category column to DataFrame\n        df_train_sampled['category'] = df_train_sampled['subcategory'].map(subcat_to_cat)\n        \n        print(f\"Added categories to {len(df_train_sampled)} training examples\")\n        \n        # Display sample\n        print(\"\\nSample of training data with categories:\")\n        print(df_train_sampled[['note', 'category', 'subcategory']].head())\n    \nexcept Exception as e:\n    print(f\"Error retrieving category-subcategory combinations: {e}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-13T13:12:33.907682Z","iopub.execute_input":"2025-04-13T13:12:33.908158Z","iopub.status.idle":"2025-04-13T13:12:33.928613Z","shell.execute_reply.started":"2025-04-13T13:12:33.908109Z","shell.execute_reply":"2025-04-13T13:12:33.927360Z"}},"outputs":[{"name":"stdout","text":"Retrieving category-subcategory combinations from database...\nSuccessfully retrieved and saved 639 category-subcategory combinations\n\nFirst 5 combinations:\n            category subcategory\n0  Communication, PC    Internet\n1  Communication, PC    Internet\n2  Communication, PC    Internet\n3  Communication, PC    Internet\n4  Communication, PC    Internet\n\nAdding category column to training data...\nAdded categories to 1654 training examples\n\nSample of training data with categories:\n                                                note              category  \\\n0  02 DEC 20 - $98.00 LULULEMON ATHLETICA AUSTRAl...  Life & Entertainment   \n1  REBEL MELBOURNE CTRL MELBOURNE VI AUSTap and P...  Life & Entertainment   \n2  STATE TRUSTEES LIMIT MELBOURNE AUSCard xx2819V...    Financial expenses   \n3                         BWS 3071 HWATHORN HWATHORN  Life & Entertainment   \n4                   LIQUORLAND EASTLAND 373 RINGWOOD  Life & Entertainment   \n\n             subcategory  \n0  Active sport, fitness  \n1  Active sport, fitness  \n2               Advisory  \n3       Alcohol, tobacco  \n4       Alcohol, tobacco  \n","output_type":"stream"}],"execution_count":135},{"cell_type":"code","source":"def add_category_column_to_training_data(df):\n    \"\"\"\n    Add the parent category column to the training data based on subcategory mappings\n    from the SQLite database.\n    \n    Args:\n        df: DataFrame containing transaction data with 'subcategory' column\n    \n    Returns:\n        DataFrame with added 'category' column\n    \"\"\"\n    if 'category' in df.columns:\n        print(\"Category column already exists in the DataFrame\")\n        return df\n    \n    try:\n        # Connect to the database\n        cursor = db_conn.cursor()\n        \n        # Get subcategory to category mapping\n        cursor.execute(\"\"\"\n        SELECT s.name as subcategory, c.name as category \n        FROM subcategories s\n        JOIN categories c ON s.category_id = c.category_id\n        \"\"\")\n        \n        # Create mapping dictionary\n        subcat_to_cat = {row[0]: row[1] for row in cursor.fetchall()}\n        \n        # Add category column\n        df_with_category = df.copy()\n        df_with_category['category'] = df['subcategory'].map(subcat_to_cat)\n        \n        # Check for any missing mappings\n        missing_count = df_with_category['category'].isna().sum()\n        if missing_count > 0:\n            print(f\"Warning: {missing_count} subcategories could not be mapped to a category\")\n            print(\"Unmapped subcategories:\")\n            unmapped = df[df['subcategory'].map(lambda x: x not in subcat_to_cat)]['subcategory'].unique()\n            print(unmapped)\n        \n        # Fill any missing values\n        df_with_category['category'] = df_with_category['category'].fillna(\"Uncategorized\")\n        \n        print(f\"Successfully added category column to {len(df_with_category)} rows\")\n        return df_with_category\n        \n    except Exception as e:\n        print(f\"Error adding category column: {e}\")\n        # Return original dataframe if there was an error\n        return df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-13T13:12:33.930148Z","iopub.execute_input":"2025-04-13T13:12:33.930486Z","iopub.status.idle":"2025-04-13T13:12:33.940271Z","shell.execute_reply.started":"2025-04-13T13:12:33.930453Z","shell.execute_reply":"2025-04-13T13:12:33.939105Z"}},"outputs":[],"execution_count":136},{"cell_type":"code","source":"def prepare_fine_tuning_data(df):\n    \"\"\"\n    Prepare data for fine-tuning a model\n    \"\"\"\n    # Create training examples\n    training_examples = []\n    \n    for _, row in df.iterrows():\n        # Add this transaction to training examples\n        training_examples.append({\n            \"textInput\": str(row['note']),\n            \"output\": str(row['subcategory'])\n        })\n    \n    print(f\"Created {len(training_examples)} training examples\")\n    \n    # Prepare the dataset in the required format\n    training_data = {\"examples\": training_examples}\n    \n    return training_data","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-13T13:12:33.941813Z","iopub.execute_input":"2025-04-13T13:12:33.942130Z","iopub.status.idle":"2025-04-13T13:12:33.958087Z","shell.execute_reply.started":"2025-04-13T13:12:33.942101Z","shell.execute_reply":"2025-04-13T13:12:33.956942Z"}},"outputs":[],"execution_count":137},{"cell_type":"markdown","source":"## Instruct the zero-shot prompt\nI draft the prompt asking it to only use the subcategory from the loaded table.","metadata":{}},{"cell_type":"code","source":" import sqlite3\n\ndb_file = \"transaction_categories.db\"\ndb_conn = sqlite3.connect(db_file)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-13T13:12:33.959629Z","iopub.execute_input":"2025-04-13T13:12:33.960058Z","iopub.status.idle":"2025-04-13T13:12:33.975282Z","shell.execute_reply.started":"2025-04-13T13:12:33.959998Z","shell.execute_reply":"2025-04-13T13:12:33.974021Z"}},"outputs":[],"execution_count":138},{"cell_type":"code","source":"# These are the database interaction tools defined earlier\ndb_tools = [list_tables, describe_table, execute_query]\n\ndef predict_category_and_subcategory(transaction_note):\n    \"\"\"\n    Predicts the category and subcategory for a transaction using the zero-shot system instruction approach.\n    \n    Args:\n        transaction_note: The transaction text to classify\n        \n    Returns:\n        tuple: (predicted_category, predicted_subcategory)\n    \"\"\"\n    try:\n        \n        system_instruct = f\"\"\"\n        You are a financial transaction categorization helper that can interact with a SQL database. You can first use list_tables to see what tables are present, describe_table to understand the\n        schema, and execute_query to issue an SQL SELECT query. You will be provided with a transaction \n        description (note) and must classify it following a two-step process:\n\n        1. First, select the most appropriate CATEGORY from the database\n        2. Then, select the most specific SUBCATEGORY under CATEGORY in the database\n\n        Here is the complete categorization hierarchy:\n\n        Your response must be in this exact format:\n        CATEGORY: [selected category name]\n        SUBCATEGORY: [selected subcategory name]\n        \"\"\"\n        \n        # Make prediction with system instruction\n        response = client.models.generate_content(\n            model=\"gemini-2.0-flash\",\n            config=types.GenerateContentConfig(\n                system_instruction=system_instruct,\n                tools=db_tools,\n            ),\n            contents=transaction_note\n        )\n        \n        text = response.text.strip()\n        \n        try:\n            # Extract category and subcategory\n            category_line = [line for line in text.split('\\n') if line.startswith(\"CATEGORY:\")][0]\n            subcategory_line = [line for line in text.split('\\n') if line.startswith(\"SUBCATEGORY:\")][0]\n            \n            category = category_line.replace(\"CATEGORY:\", \"\").strip()\n            subcategory = subcategory_line.replace(\"SUBCATEGORY:\", \"\").strip()\n            \n            return category, subcategory\n            \n        except (IndexError, KeyError) as e:\n            return \"(invalid category)\", \"(invalid subcategory)\"\n            \n    except Exception as e:\n        return \"(error)\", f\"(error: {str(e)})\"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-13T13:12:33.976916Z","iopub.execute_input":"2025-04-13T13:12:33.977346Z","iopub.status.idle":"2025-04-13T13:12:33.988216Z","shell.execute_reply.started":"2025-04-13T13:12:33.977293Z","shell.execute_reply":"2025-04-13T13:12:33.987003Z"}},"outputs":[],"execution_count":139},{"cell_type":"code","source":"def describe_table(table_name: str) -> list[tuple[str, str]]:\n    \"\"\"Look up the table schema.\n\n    Returns:\n      List of columns, where each entry is a tuple of (column, type).\n    \"\"\"\n    print(f' - DB CALL: describe_table({table_name})')\n\n    cursor = db_conn.cursor()\n\n    cursor.execute(f\"PRAGMA table_info({table_name});\")\n\n    schema = cursor.fetchall()\n    # [column index, column name, column type, ...]\n    return [(col[1], col[2]) for col in schema]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-13T13:12:33.989765Z","iopub.execute_input":"2025-04-13T13:12:33.990124Z","iopub.status.idle":"2025-04-13T13:12:34.009175Z","shell.execute_reply.started":"2025-04-13T13:12:33.990090Z","shell.execute_reply":"2025-04-13T13:12:34.008047Z"}},"outputs":[],"execution_count":140},{"cell_type":"code","source":"def list_tables() -> list[str]:\n    \"\"\"Retrieve the names of all tables in the database.\"\"\"\n    # Include print logging statements so you can see when functions are being called.\n    print(' - DB CALL: list_tables()')\n\n    cursor = db_conn.cursor()\n\n    # Fetch the table names.\n    cursor.execute(\"SELECT name FROM sqlite_master WHERE type='table';\")\n\n    tables = cursor.fetchall()\n    return [t[0] for t in tables]\n\n\nlist_tables()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-13T13:12:34.010792Z","iopub.execute_input":"2025-04-13T13:12:34.011159Z","iopub.status.idle":"2025-04-13T13:12:34.025918Z","shell.execute_reply.started":"2025-04-13T13:12:34.011124Z","shell.execute_reply":"2025-04-13T13:12:34.024559Z"}},"outputs":[{"name":"stdout","text":" - DB CALL: list_tables()\n","output_type":"stream"},{"execution_count":141,"output_type":"execute_result","data":{"text/plain":"['categories', 'sqlite_sequence', 'subcategories']"},"metadata":{}}],"execution_count":141},{"cell_type":"code","source":"def execute_query(sql: str) -> list[list[str]]:\n    \"\"\"Execute an SQL statement, returning the results.\"\"\"\n    print(f' - DB CALL: execute_query({sql})')\n\n    cursor = db_conn.cursor()\n\n    cursor.execute(sql)\n    return cursor.fetchall()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-13T13:12:34.027497Z","iopub.execute_input":"2025-04-13T13:12:34.027898Z","iopub.status.idle":"2025-04-13T13:12:34.036655Z","shell.execute_reply.started":"2025-04-13T13:12:34.027849Z","shell.execute_reply":"2025-04-13T13:12:34.035516Z"}},"outputs":[],"execution_count":142},{"cell_type":"markdown","source":"## Evaluate baseline performance\n\nNow I perform an evaluation on the available models to ensure I can measure how much the tuning helps.","metadata":{}},{"cell_type":"code","source":"import tqdm\nfrom tqdm.rich import tqdm as tqdmr\nimport warnings\n\n# Enable tqdm features on Pandas\ntqdmr.pandas()\n\n# Suppress the experimental warning\nwarnings.filterwarnings(\"ignore\", category=tqdm.TqdmExperimentalWarning)\n\n# Further sample the test data to be mindful of the free-tier quota\nTEST_SAMPLE_SIZE = 20\ndf_baseline_eval = df_test_sampled.sample(min(TEST_SAMPLE_SIZE, len(df_test_sampled)))\n\n# Ensure category column exists in test data\nif 'category' not in df_baseline_eval.columns:\n    # Add categories using the database mapping\n    cursor = db_conn.cursor()\n    cursor.execute(\"\"\"\n    SELECT s.name as subcategory, c.name as category \n    FROM subcategories s\n    JOIN categories c ON s.category_id = c.category_id\n    \"\"\")\n    subcat_to_cat = {row[0]: row[1] for row in cursor.fetchall()}\n    df_baseline_eval['category'] = df_baseline_eval['subcategory'].map(subcat_to_cat)\n\nprint(f\"Evaluating {len(df_baseline_eval)} transactions...\")\n\n# Make predictions using the sampled data with progress bar\n# This will return both category and subcategory\ndf_baseline_eval[['predicted_category', 'predicted_subcategory']] = df_baseline_eval['note'].progress_apply(\n    lambda x: pd.Series(predict_category_and_subcategory(x))\n)\n\n# Calculate the accuracy for both category and subcategory\ncategory_accuracy = (df_baseline_eval['category'] == df_baseline_eval['predicted_category']).mean()\nsubcategory_accuracy = (df_baseline_eval['subcategory'] == df_baseline_eval['predicted_subcategory']).mean()\ncombined_accuracy = ((df_baseline_eval['category'] == df_baseline_eval['predicted_category']) & \n                     (df_baseline_eval['subcategory'] == df_baseline_eval['predicted_subcategory'])).mean()\n\nprint(f\"Category accuracy: {category_accuracy:.2%}\")\nprint(f\"Subcategory accuracy: {subcategory_accuracy:.2%}\")\nprint(f\"Combined accuracy (both correct): {combined_accuracy:.2%}\")\n\n# Display some examples of predictions\nprint(\"\\nSample predictions:\")\nsample_results = df_baseline_eval[['note', 'category', 'subcategory', \n                                  'predicted_category', 'predicted_subcategory']].sample(min(5, len(df_baseline_eval)))\n\nfor idx, row in sample_results.iterrows():\n    print(f\"Transaction: {row['note'][:50]}...\")\n    print(f\"True category: {row['category']}\")\n    print(f\"Predicted category: {row['predicted_category']}\")\n    print(f\"Category correct: {row['category'] == row['predicted_category']}\")\n    print(f\"True subcategory: {row['subcategory']}\")\n    print(f\"Predicted subcategory: {row['predicted_subcategory']}\")\n    print(f\"Subcategory correct: {row['subcategory'] == row['predicted_subcategory']}\\n\")\n\n# Create a confusion matrix for categories\nprint(\"Category confusion matrix:\")\ncat_matrix = pd.crosstab(\n    df_baseline_eval['category'], \n    df_baseline_eval['predicted_category'],\n    rownames=['True'], \n    colnames=['Predicted']\n)\nprint(cat_matrix)\n\n# Create a confusion matrix for subcategories with errors\nprint(\"\\nMost common subcategory error patterns:\")\nerror_patterns = df_baseline_eval[df_baseline_eval['subcategory'] != df_baseline_eval['predicted_subcategory']]\nif len(error_patterns) > 0:\n    error_counts = error_patterns.groupby(['subcategory', 'predicted_subcategory']).size().reset_index(name='count')\n    error_counts = error_counts.sort_values('count', ascending=False)\n    print(error_counts.head(5))\nelse:\n    print(\"No subcategory errors found in the evaluation set!\")\n\n# Analysis of hierarchical errors\nprint(\"\\nError analysis by hierarchy:\")\nhierarchical_errors = df_baseline_eval[\n    (df_baseline_eval['category'] == df_baseline_eval['predicted_category']) & \n    (df_baseline_eval['subcategory'] != df_baseline_eval['predicted_subcategory'])\n]\nprint(f\"Correct category but wrong subcategory: {len(hierarchical_errors)} cases ({len(hierarchical_errors)/len(df_baseline_eval):.2%})\")\n\ncategory_errors = df_baseline_eval[df_baseline_eval['category'] != df_baseline_eval['predicted_category']]\nprint(f\"Wrong category: {len(category_errors)} cases ({len(category_errors)/len(df_baseline_eval):.2%})\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-13T13:12:34.038212Z","iopub.execute_input":"2025-04-13T13:12:34.038552Z","iopub.status.idle":"2025-04-13T13:14:06.037487Z","shell.execute_reply.started":"2025-04-13T13:12:34.038520Z","shell.execute_reply":"2025-04-13T13:14:06.036285Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"Output()","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ccf0579d0e754cdaa1d71a45aa8150de"}},"metadata":{}},{"name":"stdout","text":"Evaluating 20 transactions...\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT category FROM categories WHERE note LIKE '%medical%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT category FROM categories WHERE note LIKE '%medical%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: list_tables()\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: list_tables()\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: describe_table(categories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: describe_table(categories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: describe_table(subcategories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: describe_table(subcategories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE description LIKE '%medical%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE description LIKE '%medical%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%Health%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%Health%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%Medical%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%Medical%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE description LIKE '%health%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE description LIKE '%health%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE description LIKE '%doctor%' OR description LIKE \n'%health%' OR name LIKE '%health%' OR name LIKE '%medical%' OR description LIKE '%Medical%' OR description LIKE \n'%Doctor%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE description LIKE '%doctor%' OR description LIKE \n'%health%' OR name LIKE '%health%' OR name LIKE '%medical%' OR description LIKE '%Medical%' OR description LIKE \n'%Doctor%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE description LIKE '%medical%' OR name LIKE '%medical%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE description LIKE '%medical%' OR name LIKE '%medical%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT category FROM categories WHERE note LIKE '%Merry Seasons Boxhill Box Hill AU%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT category FROM categories WHERE note LIKE '%Merry Seasons Boxhill Box Hill AU%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: describe_table(categories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: describe_table(categories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE description LIKE '%Merry Seasons Boxhill Box Hill AU%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE description LIKE '%Merry Seasons Boxhill Box Hill AU%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT subcategory_id, name FROM subcategories WHERE description LIKE '%Merry Seasons \nBoxhill Box Hill AU%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT subcategory_id, name FROM subcategories WHERE description LIKE '%Merry Seasons \nBoxhill Box Hill AU%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT category_id, name FROM subcategories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT category_id, name FROM subcategories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT category FROM category_table WHERE note LIKE '%Health & Wellness%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT category FROM category_table WHERE note LIKE '%Health &amp; Wellness%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: list_tables()\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: list_tables()\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: describe_table(categories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: describe_table(categories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: describe_table(subcategories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: describe_table(subcategories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%Health & Wellness%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%Health &amp; Wellness%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%Health%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%Health%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%Medical%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%Medical%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%Personal Care%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%Personal Care%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM subcategories WHERE category_id = (SELECT category_id FROM categories \nWHERE name = 'Shopping') AND name LIKE '%Health%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM subcategories WHERE category_id = (SELECT category_id FROM categories \nWHERE name = 'Shopping') AND name LIKE '%Health%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT category FROM categories WHERE note_contains LIKE '%real estate%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT category FROM categories WHERE note_contains LIKE '%real estate%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: describe_table(categories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: describe_table(categories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE description LIKE '%real estate%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE description LIKE '%real estate%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%Real Estate%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%Real Estate%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE description LIKE '%property%' OR name LIKE \n'%Property%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE description LIKE '%property%' OR name LIKE \n'%Property%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE description LIKE '%rent%' OR name LIKE '%Rent%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE description LIKE '%rent%' OR name LIKE '%Rent%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM subcategories WHERE category_id = (SELECT category_id FROM categories \nWHERE name = 'Housing') AND (description LIKE '%rent%' OR name LIKE '%Rent%'))\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM subcategories WHERE category_id = (SELECT category_id FROM categories \nWHERE name = 'Housing') AND (description LIKE '%rent%' OR name LIKE '%Rent%'))\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT category FROM categories WHERE note LIKE '%Debit%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT category FROM categories WHERE note LIKE '%Debit%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT subcategory FROM subcategories WHERE note LIKE '%Debit%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT subcategory FROM subcategories WHERE note LIKE '%Debit%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: list_tables()\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: list_tables()\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: describe_table(categories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: describe_table(categories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: describe_table(subcategories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: describe_table(subcategories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE description LIKE '%Debit%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE description LIKE '%Debit%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE description LIKE '%payment%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE description LIKE '%payment%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%payment%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%payment%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%transfer%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%transfer%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM subcategories WHERE description LIKE '%debit%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM subcategories WHERE description LIKE '%debit%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM subcategories WHERE name LIKE '%transfer%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM subcategories WHERE name LIKE '%transfer%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT category FROM category_table WHERE note LIKE '%Transfer%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT category FROM category_table WHERE note LIKE '%Transfer%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: list_tables()\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: list_tables()\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: describe_table(categories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: describe_table(categories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: describe_table(subcategories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: describe_table(subcategories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%Transfer%' OR name LIKE '%Finance%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%Transfer%' OR name LIKE '%Finance%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM subcategories WHERE category_id = (SELECT category_id FROM categories \nWHERE name = 'Transfer') AND (name LIKE '%Online%' OR name LIKE '%External%'))\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM subcategories WHERE category_id = (SELECT category_id FROM categories \nWHERE name = 'Transfer') AND (name LIKE '%Online%' OR name LIKE '%External%'))\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM subcategories WHERE category_id = (SELECT category_id FROM categories \nWHERE name = 'TRANSFER') AND (name LIKE '%Online%' OR name LIKE '%External%'))\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM subcategories WHERE category_id = (SELECT category_id FROM categories \nWHERE name = 'TRANSFER') AND (name LIKE '%Online%' OR name LIKE '%External%'))\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM subcategories WHERE category_id = (SELECT category_id FROM categories \nWHERE name = 'Transfer'))\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM subcategories WHERE category_id = (SELECT category_id FROM categories \nWHERE name = 'Transfer'))\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT category FROM category_table WHERE note LIKE '%Youtube%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT category FROM category_table WHERE note LIKE '%Youtube%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: list_tables()\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: list_tables()\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: describe_table(categories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: describe_table(categories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: describe_table(subcategories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: describe_table(subcategories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%Entertainment%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%Entertainment%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM subcategories WHERE category_id = (SELECT category_id FROM categories \nWHERE name = 'Life & Entertainment') AND name LIKE '%Streaming%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM subcategories WHERE category_id = (SELECT category_id FROM categories \nWHERE name = 'Life &amp; Entertainment') AND name LIKE '%Streaming%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT category FROM categories WHERE note LIKE '%CHOICE MARRICKVILLE%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT category FROM categories WHERE note LIKE '%CHOICE MARRICKVILLE%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT subcategory FROM categories WHERE note LIKE '%CHOICE MARRICKVILLE%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT subcategory FROM categories WHERE note LIKE '%CHOICE MARRICKVILLE%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: describe_table(categories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: describe_table(categories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: describe_table(subcategories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: describe_table(subcategories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE description LIKE '%CHOICE MARRICKVILLE%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE description LIKE '%CHOICE MARRICKVILLE%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM subcategories WHERE description LIKE '%CHOICE MARRICKVILLE%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM subcategories WHERE description LIKE '%CHOICE MARRICKVILLE%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT c.name, s.name FROM categories c JOIN subcategories s ON c.category_id = \ns.category_id WHERE s.description LIKE '%CHOICE MARRICKVILLE%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT c.name, s.name FROM categories c JOIN subcategories s ON c.category_id = \ns.category_id WHERE s.description LIKE '%CHOICE MARRICKVILLE%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT category FROM category_hierarchy WHERE note LIKE '%Amazon%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT category FROM category_hierarchy WHERE note LIKE '%Amazon%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: list_tables()\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: list_tables()\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: describe_table(categories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: describe_table(categories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: describe_table(subcategories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: describe_table(subcategories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE description LIKE '%Amazon%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE description LIKE '%Amazon%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%Shopping%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%Shopping%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT subcategories.name FROM subcategories JOIN categories ON subcategories.category_id\n= categories.category_id WHERE categories.name = 'Shopping' AND subcategories.name LIKE '%Electronics%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT subcategories.name FROM subcategories JOIN categories ON subcategories.category_id\n= categories.category_id WHERE categories.name = 'Shopping' AND subcategories.name LIKE '%Electronics%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT category FROM categories WHERE note LIKE '%Amazon%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT category FROM categories WHERE note LIKE '%Amazon%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: describe_table(categories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: describe_table(categories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE description LIKE '%Amazon%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE description LIKE '%Amazon%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%Online%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%Online%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM subcategories WHERE name LIKE '%Online%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM subcategories WHERE name LIKE '%Online%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM subcategories WHERE description LIKE '%Amazon%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM subcategories WHERE description LIKE '%Amazon%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT * FROM subcategories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT * FROM subcategories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: describe_table(subcategories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: describe_table(subcategories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: list_tables()\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: list_tables()\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: list_tables()\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: list_tables()\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: describe_table(categories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: describe_table(categories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: describe_table(subcategories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: describe_table(subcategories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM subcategories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM subcategories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT category FROM category_hierarchy WHERE category LIKE 'Income')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT category FROM category_hierarchy WHERE category LIKE 'Income')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: list_tables()\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: list_tables()\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: describe_table(categories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: describe_table(categories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: describe_table(subcategories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: describe_table(subcategories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE 'Income')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE 'Income')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM subcategories WHERE category_id = (SELECT category_id FROM categories \nWHERE name = 'Income') AND name LIKE 'Interest')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM subcategories WHERE category_id = (SELECT category_id FROM categories \nWHERE name = 'Income') AND name LIKE 'Interest')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM subcategories WHERE category_id = (SELECT category_id FROM categories \nWHERE name = 'Income'))\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM subcategories WHERE category_id = (SELECT category_id FROM categories \nWHERE name = 'Income'))\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT category FROM category_hierarchy WHERE note = 'Contributions Tax')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT category FROM category_hierarchy WHERE note = 'Contributions Tax')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: list_tables()\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: list_tables()\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: describe_table(categories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: describe_table(categories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: describe_table(subcategories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: describe_table(subcategories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE 'Taxes')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE 'Taxes')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE 'Tax%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE 'Tax%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE description LIKE '%Tax%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE description LIKE '%Tax%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM subcategories WHERE name LIKE '%Tax%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM subcategories WHERE name LIKE '%Tax%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT CATEGORY FROM CATEGORIES WHERE CATEGORY LIKE '%Home%' OR CATEGORY LIKE \n'%Business%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT CATEGORY FROM CATEGORIES WHERE CATEGORY LIKE '%Home%' OR CATEGORY LIKE \n'%Business%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: list_tables()\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: list_tables()\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: describe_table(categories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: describe_table(categories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: describe_table(subcategories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: describe_table(subcategories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%Home%' OR name LIKE '%Business%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%Home%' OR name LIKE '%Business%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM subcategories WHERE category_id = 8)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM subcategories WHERE category_id = 8)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM subcategories WHERE category_id = (SELECT category_id FROM categories \nWHERE name = 'Shopping') AND name LIKE '%Home%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM subcategories WHERE category_id = (SELECT category_id FROM categories \nWHERE name = 'Shopping') AND name LIKE '%Home%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT category FROM categories WHERE note LIKE '%tax%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT category FROM categories WHERE note LIKE '%tax%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT subcategory FROM subcategories WHERE category = 'Tax' AND note LIKE '%tax%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT subcategory FROM subcategories WHERE category = 'Tax' AND note LIKE '%tax%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: list_tables()\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: list_tables()\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: describe_table(categories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: describe_table(categories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: describe_table(subcategories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: describe_table(subcategories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%Tax%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%Tax%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE description LIKE '%tax%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE description LIKE '%tax%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%Professional Services%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%Professional Services%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE description LIKE '%professional services%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE description LIKE '%professional services%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE description LIKE '%accounting%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE description LIKE '%accounting%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT * FROM categories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT * FROM categories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT Category FROM Categories WHERE Description LIKE '%Amazon Prime%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT Category FROM Categories WHERE Description LIKE '%Amazon Prime%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: describe_table(Categories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: describe_table(Categories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM Categories WHERE Description LIKE '%Amazon Prime%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM Categories WHERE Description LIKE '%Amazon Prime%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM Categories WHERE name LIKE '%Amazon%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM Categories WHERE name LIKE '%Amazon%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM Categories WHERE Description LIKE '%Amazon%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM Categories WHERE Description LIKE '%Amazon%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT * FROM Categories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT * FROM Categories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: describe_table(Subcategories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: describe_table(Subcategories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT * FROM Subcategories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT * FROM Subcategories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT category_id FROM Categories WHERE name = 'Life & Entertainment')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT category_id FROM Categories WHERE name = 'Life &amp; Entertainment')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM Subcategories WHERE category_id = 6 AND name LIKE '%TV, Streaming%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM Subcategories WHERE category_id = 6 AND name LIKE '%TV, Streaming%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT category FROM categories WHERE note LIKE '%paypal%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT category FROM categories WHERE note LIKE '%paypal%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: describe_table(categories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: describe_table(categories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE description LIKE '%paypal%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE description LIKE '%paypal%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%Shopping%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%Shopping%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM subcategories WHERE name LIKE '%Online%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM subcategories WHERE name LIKE '%Online%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT category_id FROM categories WHERE name = 'Shopping')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT category_id FROM categories WHERE name = 'Shopping')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM subcategories WHERE category_id = 2 AND name LIKE '%Online%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM subcategories WHERE category_id = 2 AND name LIKE '%Online%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM subcategories WHERE category_id = 2 AND name LIKE '%Merchandise%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM subcategories WHERE category_id = 2 AND name LIKE '%Merchandise%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%Bills%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%Bills%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%Utilities%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%Utilities%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT CATEGORY FROM CATEGORIES WHERE CATEGORY LIKE 'Travel')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT CATEGORY FROM CATEGORIES WHERE CATEGORY LIKE 'Travel')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: list_tables()\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: list_tables()\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: describe_table(categories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: describe_table(categories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: describe_table(subcategories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: describe_table(subcategories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE 'Travel')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE 'Travel')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE 'Travel%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE 'Travel%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%Travel%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%Travel%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM subcategories WHERE category_id = (SELECT category_id FROM categories \nWHERE name = 'Life & Entertainment'))\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM subcategories WHERE category_id = (SELECT category_id FROM categories \nWHERE name = 'Life &amp; Entertainment'))\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT category FROM categories WHERE note LIKE '%PIGEON TRADE%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT category FROM categories WHERE note LIKE '%PIGEON TRADE%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: describe_table(categories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: describe_table(categories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE description LIKE '%PIGEON TRADE%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE description LIKE '%PIGEON TRADE%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%Business Services%')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE '%Business Services%')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT * FROM categories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT * FROM categories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT * FROM subcategories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT * FROM subcategories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT category_id FROM categories WHERE name = 'Shopping')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT category_id FROM categories WHERE name = 'Shopping')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM subcategories WHERE category_id = 2)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM subcategories WHERE category_id = 2)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT category FROM category_subcategories WHERE note_contains='Amazon')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT category FROM category_subcategories WHERE note_contains='Amazon')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: list_tables()\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: list_tables()\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: describe_table(categories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: describe_table(categories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: describe_table(subcategories)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: describe_table(subcategories)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE 'Shopping')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM categories WHERE name LIKE 'Shopping')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM subcategories WHERE category_id = (SELECT category_id FROM categories \nWHERE name = 'Shopping') AND name LIKE 'Online Retailer')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM subcategories WHERE category_id = (SELECT category_id FROM categories \nWHERE name = 'Shopping') AND name LIKE 'Online Retailer')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM subcategories WHERE category_id = (SELECT category_id FROM categories \nWHERE name = 'Shopping') AND name LIKE 'Merchandise')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM subcategories WHERE category_id = (SELECT category_id FROM categories \nWHERE name = 'Shopping') AND name LIKE 'Merchandise')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT category_id FROM categories WHERE name = 'Shopping')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT category_id FROM categories WHERE name = 'Shopping')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM subcategories WHERE category_id = 2 AND name LIKE 'Online')\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM subcategories WHERE category_id = 2 AND name LIKE 'Online')\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":" - DB CALL: execute_query(SELECT name FROM subcategories WHERE category_id = 2)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"> - DB CALL: execute_query(SELECT name FROM subcategories WHERE category_id = 2)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n</pre>\n"},"metadata":{}},{"name":"stdout","text":"Category accuracy: 35.00%\nSubcategory accuracy: 25.00%\nCombined accuracy (both correct): 25.00%\n\nSample predictions:\nTransaction: 15 MAR 20 - $200.00 TFR to ONLINE XXXXXX XXXXX6251...\nTrue category: Transfer\nPredicted category: Transfer\nCategory correct: True\nTrue subcategory: TRANSFER\nPredicted subcategory: Transfer\nSubcategory correct: False\n\nTransaction: AMAZON AUSYDNEY SOUTH CREDIT CARD PURCHASEAmazon B...\nTrue category: Life & Entertainment\nPredicted category: (error)\nCategory correct: False\nTrue subcategory: Active sport, fitness\nPredicted subcategory: (error: 'NoneType' object has no attribute 'strip')\nSubcategory correct: False\n\nTransaction: BUNNINGS WAREHOUSE 6432 RINGWOOD...\nTrue category: Housing\nPredicted category: Shopping\nCategory correct: False\nTrue subcategory: Maintenance, repairs\nPredicted subcategory: Home, garden\nSubcategory correct: False\n\nTransaction: Ringwood Family Medic Ringwood AU...\nTrue category: Life & Entertainment\nPredicted category: (error)\nCategory correct: False\nTrue subcategory: Health care, doctor\nPredicted subcategory: (error: 'NoneType' object has no attribute 'strip')\nSubcategory correct: False\n\nTransaction: Interest for 01/12/2020 - 31/12/2020...\nTrue category: Income\nPredicted category: Income\nCategory correct: True\nTrue subcategory: Interests, dividends\nPredicted subcategory: Interests, dividends\nSubcategory correct: True\n\nCategory confusion matrix:\nPredicted             (error)  (invalid category)  Financial expenses  \\\nTrue                                                                    \nFinancial expenses          1                   1                   1   \nFood & Beverages            0                   1                   0   \nHousing                     0                   0                   0   \nIncome                      0                   0                   0   \nLife & Entertainment        4                   0                   0   \nShopping                    2                   0                   0   \nTransfer                    0                   0                   0   \n\nPredicted             Housing  Income  Life & Entertainment  Shopping  \\\nTrue                                                                    \nFinancial expenses          0       0                     0         0   \nFood & Beverages            0       0                     0         1   \nHousing                     1       0                     0         1   \nIncome                      0       1                     0         0   \nLife & Entertainment        0       0                     2         0   \nShopping                    0       0                     0         1   \nTransfer                    0       0                     0         0   \n\nPredicted             TRANSFER  Transfer  \nTrue                                      \nFinancial expenses           1         0  \nFood & Beverages             0         0  \nHousing                      0         0  \nIncome                       0         0  \nLife & Entertainment         1         0  \nShopping                     0         0  \nTransfer                     0         1  \n\nMost common subcategory error patterns:\n               subcategory                              predicted_subcategory  \\\n0    Active sport, fitness  (error: 'NoneType' object has no attribute 'st...   \n253  Restaurant, fast-food                              (invalid subcategory)   \n276      Stationery, tools  (error: 'NoneType' object has no attribute 'st...   \n54     Drug-store, chemist  (error: 'NoneType' object has no attribute 'st...   \n132    Health care, doctor  (error: 'NoneType' object has no attribute 'st...   \n\n     count  \n0        1  \n253      1  \n276      1  \n54       1  \n132      1  \n\nError analysis by hierarchy:\nCorrect category but wrong subcategory: 2 cases (10.00%)\nWrong category: 13 cases (65.00%)\n","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_30/3292486879.py:73: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n  error_counts = error_patterns.groupby(['subcategory', 'predicted_subcategory']).size().reset_index(name='count')\n","output_type":"stream"}],"execution_count":143},{"cell_type":"markdown","source":"## Tune my model\nNow I train the model with training data to tune it for assessment and potential use.","metadata":{}},{"cell_type":"markdown","source":"from collections.abc import Iterable\nimport datetime\nimport time\nimport os\n\n# 1. Prepare your transaction data for fine-tuning\nprint(\"Preparing transaction data for fine-tuning...\")\n\n# Convert the DataFrame into the format expected by the API\ntraining_examples = []\nfor _, row in df_train_sampled.iterrows():\n    training_examples.append({\n        \"textInput\": str(row['note']),\n        \"output\": str(row['subcategory'])\n    })\n\nprint(f\"Created {len(training_examples)} training examples\")\nprint(f\"Sample example - Input: '{training_examples[0]['textInput'][:50]}...'\")\nprint(f\"Sample example - Output: '{training_examples[0]['output']}'\")\n\n# 2. Prepare the dataset in the required format\ntraining_data = {\"examples\": training_examples}\n\n# 3. Set up the fine-tuning job - find existing or create new\nmodel_id = None\n\ntry:\n    # Try to read previous model ID from file\n    try:\n        with open(\"tuned_model_id.txt\", \"r\") as f:\n            saved_model_id = f.read().strip()\n            if saved_model_id:\n                print(f\"Found previously saved model ID: {saved_model_id}\")\n                model_id = saved_model_id\n    except FileNotFoundError:\n        print(\"No previously saved model ID found.\")\n    \n    # If no saved ID, check for existing models\n    if not model_id:\n        queued_model = None\n        print(\"Checking for existing tuned models...\")\n        \n        # List models in reverse order (newest first)\n        for m in reversed(client.tunings.list()):\n            # Look for transaction classifier models with flexible matching\n            if (\"transaction\" in m.name.lower() or\n                m.name.startswith('tunedModels/personal-transaction-classifier-')):\n                \n                print(f\"Found potential model: {m.name} in state: {m.state.name}\")\n                \n                # If there is a completed model, use it\n                if m.state.name == 'JOB_STATE_SUCCEEDED':\n                    model_id = m.name\n                    print(f'Found existing completed model to reuse: {model_id}')\n                    break\n                elif m.state.name == 'JOB_STATE_RUNNING' and not queued_model:\n                    # If there's a model still running, remember it\n                    queued_model = m.name\n                    print(f'Found model still in progress: {queued_model}')\n        \n        # Use queued model if found and no completed model\n        if not model_id and queued_model:\n            model_id = queued_model\n            print(f'Using in-progress model: {model_id}')\n    \n    # Create new model if needed\n    if not model_id:\n        print(\"Starting new fine-tuning job...\")\n        tuning_op = client.tunings.tune(\n            base_model=\"models/gemini-1.5-flash-001-tuning\",\n            training_dataset=training_data,\n            config=types.CreateTuningJobConfig(\n                tuned_model_display_name=\"transaction-category-classifier\",  \n                batch_size=16,\n                epoch_count=3,\n            ),\n        )\n        \n        model_id = tuning_op.name\n        print(f\"Fine-tuning initiated. Model ID: {model_id}\")\n        print(f\"Current status: {tuning_op.state}\")\n        \n        # Poll for status updates (optional)\n        print(\"Initial training status:\")\n        print(f\"  - State: {tuning_op.state}\")\n        print(f\"  - Create time: {tuning_op.create_time}\")\n        if hasattr(tuning_op, 'progress') and tuning_op.progress:\n            print(f\"  - Progress: {tuning_op.progress}%\")\n    \n    # Save the model ID for later use\n    with open(\"tuned_model_id.txt\", \"w\") as f:\n        f.write(model_id)\n    \n    print(f\"\\nUsing model: {model_id}\")\n    print(\"This ID has been saved and will be used for predictions\")\n    \nexcept Exception as e:\n    print(f\"Error in fine-tuning process: {e}\")","metadata":{"execution":{"iopub.execute_input":"2025-04-10T05:48:56.388511Z","iopub.status.busy":"2025-04-10T05:48:56.387205Z","iopub.status.idle":"2025-04-10T05:48:58.145557Z","shell.execute_reply":"2025-04-10T05:48:58.144833Z","shell.execute_reply.started":"2025-04-10T05:48:56.388457Z"}}},{"cell_type":"markdown","source":"## Monitoring progress\nHere I monitor whether this model has been tuned and ready to use.","metadata":{}},{"cell_type":"code","source":"# 4. Monitor the fine-tuning progress\nstart_time = datetime.datetime.now(datetime.timezone.utc)\ntuned_model = client.tunings.get(name=model_id)\n\nwhile not tuned_model.has_ended:\n    print(f\"Current state: {tuned_model.state.name}\")\n    if hasattr(tuned_model, 'progress'):\n        print(f\"Progress: {tuned_model.progress}%\")\n    \n    time.sleep(60)  # Check every minute\n    tuned_model = client.tunings.get(name=model_id)\n\nprint(f\"Done! The model state is: {tuned_model.state.name}\")\n\nif not tuned_model.has_succeeded and tuned_model.error:\n    print(\"Error:\", tuned_model.error)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-13T13:14:06.038899Z","iopub.execute_input":"2025-04-13T13:14:06.039218Z","iopub.status.idle":"2025-04-13T13:14:06.077318Z","shell.execute_reply.started":"2025-04-13T13:14:06.039186Z","shell.execute_reply":"2025-04-13T13:14:06.075608Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[144], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m# 4. Monitor the fine-tuning progress\u001b[39;00m\n\u001b[0;32m----> 2\u001b[0m start_time \u001b[38;5;241m=\u001b[39m \u001b[43mdatetime\u001b[49m\u001b[38;5;241m.\u001b[39mdatetime\u001b[38;5;241m.\u001b[39mnow(datetime\u001b[38;5;241m.\u001b[39mtimezone\u001b[38;5;241m.\u001b[39mutc)\n\u001b[1;32m      3\u001b[0m tuned_model \u001b[38;5;241m=\u001b[39m client\u001b[38;5;241m.\u001b[39mtunings\u001b[38;5;241m.\u001b[39mget(name\u001b[38;5;241m=\u001b[39mmodel_id)\n\u001b[1;32m      5\u001b[0m \u001b[38;5;28;01mwhile\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m tuned_model\u001b[38;5;241m.\u001b[39mhas_ended:\n","\u001b[0;31mNameError\u001b[0m: name 'datetime' is not defined"],"ename":"NameError","evalue":"name 'datetime' is not defined","output_type":"error"}],"execution_count":144},{"cell_type":"markdown","source":"## Evaluate Tuned Model\nHere I test and evaluate the performance of the tuned model.","metadata":{}},{"cell_type":"code","source":"# 5. Test the tuned model with a sample transaction\ndef categorize_transaction(transaction_note):\n    \"\"\"Use the fine-tuned model to categorize a transaction.\"\"\"\n    response = client.models.generate_content(\n        model=model_id,\n        contents=transaction_note,\n        config=types.GenerateContentConfig(\n            temperature=0.0,  # Use deterministic output for classification\n            max_output_tokens=10,  # Keep it short, we just need the category\n        )\n    )\n    \n    if response.candidates and response.candidates[0].content:\n        return response.candidates[0].content.parts[0].text.strip()\n    else:\n        return \"(error)\"\n\n# Test with a sample transaction\nsample_transaction = \"AMAZON PRIME MEMBERSHIP ANNUAL RENEWAL\"\npredicted_category = categorize_transaction(sample_transaction)\nprint(f\"Transaction: {sample_transaction}\")\nprint(f\"Predicted category: {predicted_category}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-13T13:14:06.078467Z","iopub.status.idle":"2025-04-13T13:14:06.078874Z","shell.execute_reply.started":"2025-04-13T13:14:06.078670Z","shell.execute_reply":"2025-04-13T13:14:06.078687Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# 6. Evaluate the model on test data\nimport tqdm\nfrom tqdm.rich import tqdm as tqdmr\nimport warnings\n\n# Enable tqdm features on Pandas\ntqdmr.pandas()\n\n# Suppress the experimental warning\nwarnings.filterwarnings(\"ignore\", category=tqdm.TqdmExperimentalWarning)\n\n# Sample a subset of test data for evaluation\nTEST_SAMPLE_SIZE = 20\ndf_eval = df_test_sampled.sample(min(TEST_SAMPLE_SIZE, len(df_test_sampled)))\n\nprint(f\"Evaluating on {len(df_eval)} test transactions...\")\n\n# Make predictions with progress bar\ndf_eval['prediction'] = df_eval['note'].progress_apply(categorize_transaction)\n\n# Calculate accuracy\naccuracy = (df_eval['subcategory'] == df_eval['prediction']).mean()\nprint(f\"Model accuracy: {accuracy:.2%}\")\n\n# Display some examples\nprint(\"\\nSample predictions:\")\nfor idx, row in df_eval.sample(min(5, len(df_eval))).iterrows():\n    print(f\"Transaction: {row['note'][:50]}...\")\n    print(f\"True category: {row['subcategory']}\")\n    print(f\"Predicted: {row['prediction']}\")\n    print(f\"Correct: {row['subcategory'] == row['prediction']}\\n\")\n\n# Show error analysis\nerrors = df_eval[df_eval['subcategory'] != df_eval['prediction']]\nif len(errors) > 0:\n    print(f\"Found {len(errors)} misclassifications\")\n    print(\"Most common error patterns:\")\n    error_matrix = pd.crosstab(\n        errors['subcategory'], \n        errors['prediction'], \n        rownames=['True'], \n        colnames=['Predicted']\n    )\n    print(error_matrix)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-13T13:14:06.080821Z","iopub.status.idle":"2025-04-13T13:14:06.081194Z","shell.execute_reply.started":"2025-04-13T13:14:06.081027Z","shell.execute_reply":"2025-04-13T13:14:06.081045Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# These are the database interaction tools defined earlier\ndb_tools = [list_tables, describe_table, execute_query]\n\n# System instruction for the AI to understand what it needs to do\ninstruction = \"\"\"You are a helpful chatbot that can interact with an SQL database for financial transactions. \nYou will first use list_tables to see what tables are present, describe_table to understand the\nschema, and execute_query to issue an SQL SELECT query to retrieve all category-subcategory combinations.\"\"\"\n\n# Create the Google Genai client\nclient = genai.Client(api_key=GOOGLE_API_KEY)\n\nfrom google.api_core import retry\nimport pandas as pd\n\n# Define retry logic for API rate limits\nis_retriable = lambda e: (isinstance(e, genai.errors.APIError) and e.code in {429, 503})\n\n# User query to get direct category-subcategory combinations\nuser_query = \"\"\"1. Find all unique combinations of category and subcategory from the database.\n2. Execute a SQL query that joins the categories and subcategories tables.\n3. Return the full category name and full subcategory name.\n4. Format your response as simple tabular data that can be saved as CSV.\"\"\"\n\n# Function to get category-subcategory combinations with retry logic\n@retry.Retry(predicate=is_retriable)\ndef get_category_subcategory_combinations():\n    response = client.models.generate_content(\n        model=\"gemini-2.0-flash\",\n        contents=user_query,\n        config=types.GenerateContentConfig(\n            system_instruction=instruction,\n            tools=db_tools,\n        ),\n    )\n    return response.text","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-13T13:14:06.082304Z","iopub.status.idle":"2025-04-13T13:14:06.082672Z","shell.execute_reply.started":"2025-04-13T13:14:06.082498Z","shell.execute_reply":"2025-04-13T13:14:06.082517Z"}},"outputs":[],"execution_count":null}]}