{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "1e632ef2",
   "metadata": {
    "id": "4KDIFPAL2EnL",
    "papermill": {
     "duration": 0.00601,
     "end_time": "2025-04-10T06:26:50.042746",
     "exception": false,
     "start_time": "2025-04-10T06:26:50.036736",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Categorise finance transactions\n",
    "\n",
    "In life, my financial transactions are often categorised incorrectly in my budgeting app. I decided to find a better solution.\n",
    "\n",
    "In this example, I will first try to categrise with an exsiting Gemini model using zero-shot prompt and evaluate it performance.Then I will tune a model with the data catagorised by me,and evaluate its performance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3627b123",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-10T06:26:50.054955Z",
     "iopub.status.busy": "2025-04-10T06:26:50.054559Z",
     "iopub.status.idle": "2025-04-10T06:27:09.057269Z",
     "shell.execute_reply": "2025-04-10T06:27:09.056017Z"
    },
    "id": "9wafTyEH1_xF",
    "papermill": {
     "duration": 19.011864,
     "end_time": "2025-04-10T06:27:09.059907",
     "exception": false,
     "start_time": "2025-04-10T06:26:50.048043",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "!pip uninstall -qqy jupyterlab  # Remove unused conflicting packages\n",
    "!pip install -U -q \"google-genai==1.7.0\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5c444f1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-10T06:27:09.072445Z",
     "iopub.status.busy": "2025-04-10T06:27:09.072044Z",
     "iopub.status.idle": "2025-04-10T06:27:10.422655Z",
     "shell.execute_reply": "2025-04-10T06:27:10.421417Z"
    },
    "id": "T0CBG9xL2PvT",
    "papermill": {
     "duration": 1.359746,
     "end_time": "2025-04-10T06:27:10.425043",
     "exception": false,
     "start_time": "2025-04-10T06:27:09.065297",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'1.7.0'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from google import genai\n",
    "from google.genai import types\n",
    "\n",
    "genai.__version__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c8f261f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-10T06:27:10.438438Z",
     "iopub.status.busy": "2025-04-10T06:27:10.437398Z",
     "iopub.status.idle": "2025-04-10T06:27:10.761178Z",
     "shell.execute_reply": "2025-04-10T06:27:10.760133Z"
    },
    "id": "VuJPY3GK2SLZ",
    "papermill": {
     "duration": 0.333378,
     "end_time": "2025-04-10T06:27:10.764147",
     "exception": false,
     "start_time": "2025-04-10T06:27:10.430769",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from kaggle_secrets import UserSecretsClient\n",
    "\n",
    "GOOGLE_API_KEY = UserSecretsClient().get_secret(\"GOOGLE_API_KEY\")\n",
    "\n",
    "client = genai.Client(api_key=GOOGLE_API_KEY)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19a463f8",
   "metadata": {
    "id": "CqVA5QFO6n4z",
    "papermill": {
     "duration": 0.005212,
     "end_time": "2025-04-10T06:27:10.775438",
     "exception": false,
     "start_time": "2025-04-10T06:27:10.770226",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explore available models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fe855ffa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-10T06:27:10.787850Z",
     "iopub.status.busy": "2025-04-10T06:27:10.787431Z",
     "iopub.status.idle": "2025-04-10T06:27:11.061250Z",
     "shell.execute_reply": "2025-04-10T06:27:11.060018Z"
    },
    "id": "coEacWAB6o0G",
    "papermill": {
     "duration": 0.283038,
     "end_time": "2025-04-10T06:27:11.063899",
     "exception": false,
     "start_time": "2025-04-10T06:27:10.780861",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "models/chat-bison-001\n",
      "models/text-bison-001\n",
      "models/embedding-gecko-001\n",
      "models/gemini-1.0-pro-vision-latest\n",
      "models/gemini-pro-vision\n",
      "models/gemini-1.5-pro-latest\n",
      "models/gemini-1.5-pro-001\n",
      "models/gemini-1.5-pro-002\n",
      "models/gemini-1.5-pro\n",
      "models/gemini-1.5-flash-latest\n",
      "models/gemini-1.5-flash-001\n",
      "models/gemini-1.5-flash-001-tuning\n",
      "models/gemini-1.5-flash\n",
      "models/gemini-1.5-flash-002\n",
      "models/gemini-1.5-flash-8b\n",
      "models/gemini-1.5-flash-8b-001\n",
      "models/gemini-1.5-flash-8b-latest\n",
      "models/gemini-1.5-flash-8b-exp-0827\n",
      "models/gemini-1.5-flash-8b-exp-0924\n",
      "models/gemini-2.5-pro-exp-03-25\n",
      "models/gemini-2.5-pro-preview-03-25\n",
      "models/gemini-2.0-flash-exp\n",
      "models/gemini-2.0-flash\n",
      "models/gemini-2.0-flash-001\n",
      "models/gemini-2.0-flash-exp-image-generation\n",
      "models/gemini-2.0-flash-lite-001\n",
      "models/gemini-2.0-flash-lite\n",
      "models/gemini-2.0-flash-lite-preview-02-05\n",
      "models/gemini-2.0-flash-lite-preview\n",
      "models/gemini-2.0-pro-exp\n",
      "models/gemini-2.0-pro-exp-02-05\n",
      "models/gemini-exp-1206\n",
      "models/gemini-2.0-flash-thinking-exp-01-21\n",
      "models/gemini-2.0-flash-thinking-exp\n",
      "models/gemini-2.0-flash-thinking-exp-1219\n",
      "models/learnlm-1.5-pro-experimental\n",
      "models/gemma-3-1b-it\n",
      "models/gemma-3-4b-it\n",
      "models/gemma-3-12b-it\n",
      "models/gemma-3-27b-it\n",
      "models/embedding-001\n",
      "models/text-embedding-004\n",
      "models/gemini-embedding-exp-03-07\n",
      "models/gemini-embedding-exp\n",
      "models/aqa\n",
      "models/imagen-3.0-generate-002\n",
      "models/veo-2.0-generate-001\n",
      "models/gemini-2.0-flash-live-001\n"
     ]
    }
   ],
   "source": [
    "for model in client.models.list():\n",
    "        print(model.name)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2d35c8a",
   "metadata": {
    "id": "peFm0w_0c1CO",
    "papermill": {
     "duration": 0.0053,
     "end_time": "2025-04-10T06:27:11.075953",
     "exception": false,
     "start_time": "2025-04-10T06:27:11.070653",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Use the dataset\n",
    "\n",
    "I have uploaded transaction data categorised by me. Then I group it to training data and test data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "54882297",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-10T06:27:11.088629Z",
     "iopub.status.busy": "2025-04-10T06:27:11.088012Z",
     "iopub.status.idle": "2025-04-10T06:27:13.627354Z",
     "shell.execute_reply": "2025-04-10T06:27:13.625782Z"
    },
    "papermill": {
     "duration": 2.549937,
     "end_time": "2025-04-10T06:27:13.631181",
     "exception": false,
     "start_time": "2025-04-10T06:27:11.081244",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of subcategories: 65\n",
      "Sample subcategories: ['Active sport, fitness' 'Advisory' 'Alcohol, tobacco'\n",
      " 'Bar, cafe, drink, snacks' 'Books, audio, subscriptions' 'Charges, Fees'\n",
      " 'Charity, gifts' 'Checks, coupons' 'Clothes & shoes'\n",
      " 'Culture, sport events']\n",
      "\n",
      "Sample notes:\n",
      "1. AMAZON AU      SYDNEY SOUTH CREDIT CARD PURCHASEAmazon Basics High-Density Round Foam Roller for Exercise and Recovery - 61cm, Blue Speckled → Active sport, fitness\n",
      "2. 02 DEC 20 - $98.00 LULULEMON ATHLETICA AUSTRAlbert Park [Eff Date: 30 NOV 20] → Active sport, fitness\n",
      "3. REBEL MELBOURNE CTRL MELBOURNE VI AUSTap and Pay xx3173Value Date_ 17/03/2018 → Active sport, fitness\n"
     ]
    }
   ],
   "source": [
    "# Load your transaction data\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# Load your data\n",
    "file_path = \"/kaggle/input/training/categorized_transaction.csv\"\n",
    "df = pd.read_csv(file_path)\n",
    "\n",
    "# Split into train and test sets (80/20 split)\n",
    "df_train, df_test = train_test_split(df, test_size=0.2, random_state=42)\n",
    "\n",
    "# Display the subcategories (labels) in your dataset\n",
    "subcategories = df['subcategory'].unique()\n",
    "print(f\"Number of subcategories: {len(subcategories)}\")\n",
    "print(\"Sample subcategories:\", subcategories[:10])  # Show first 10 subcategories\n",
    "\n",
    "# Quick look at note examples\n",
    "print(\"\\nSample notes:\")\n",
    "for i, note in enumerate(df['note'].head(3)):\n",
    "    print(f\"{i+1}. {note} → {df['subcategory'].iloc[i]}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a44222cb",
   "metadata": {
    "id": "03lDs1O4ZQ0-",
    "papermill": {
     "duration": 0.005416,
     "end_time": "2025-04-10T06:27:13.642620",
     "exception": false,
     "start_time": "2025-04-10T06:27:13.637204",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Sample the dataset\n",
    "Now sample the data. I will keep 50 rows for each subcategory for training."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "044545d7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-10T06:27:13.655603Z",
     "iopub.status.busy": "2025-04-10T06:27:13.655079Z",
     "iopub.status.idle": "2025-04-10T06:27:13.707872Z",
     "shell.execute_reply": "2025-04-10T06:27:13.706153Z"
    },
    "papermill": {
     "duration": 0.062482,
     "end_time": "2025-04-10T06:27:13.710442",
     "exception": false,
     "start_time": "2025-04-10T06:27:13.647960",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original training data: 9936 rows\n",
      "Sampled training data: 1654 rows\n",
      "Number of subcategories: 63\n",
      "\n",
      "Sample of subcategory counts in training data:\n",
      "subcategory\n",
      "Hobbies                  50\n",
      "Interests, dividends     50\n",
      "Home, garden             50\n",
      "TRANSFER                 50\n",
      "Software, apps, games    50\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "def sample_data(df, num_samples):\n",
    "    \"\"\"\n",
    "    Sample rows from each subcategory, selecting num_samples from each.\n",
    "    If a subcategory has fewer than num_samples entries, takes all available rows.\n",
    "    \n",
    "    Args:\n",
    "        df: DataFrame containing transaction data\n",
    "        num_samples: Number of samples to take per subcategory\n",
    "        \n",
    "    Returns:\n",
    "        DataFrame with balanced samples across subcategories\n",
    "    \"\"\"\n",
    "    # Group by subcategory and sample\n",
    "    sampled_df = (\n",
    "        df.groupby(\"subcategory\")[df.columns]\n",
    "        .apply(lambda x: x.sample(min(len(x), num_samples)))\n",
    "        .reset_index(drop=True)\n",
    "    )\n",
    "    \n",
    "    # Convert subcategory to category type for efficiency\n",
    "    sampled_df[\"subcategory\"] = sampled_df[\"subcategory\"].astype(\"category\")\n",
    "    \n",
    "    return sampled_df\n",
    "\n",
    "# Sample training and test data\n",
    "TRAIN_NUM_SAMPLES = 50  # 50 samples per subcategory for training\n",
    "TEST_NUM_SAMPLES = 10   # 10 samples per subcategory for testing\n",
    "\n",
    "# Create balanced datasets\n",
    "df_train_sampled = sample_data(df_train, TRAIN_NUM_SAMPLES)\n",
    "df_test_sampled = sample_data(df_test, TEST_NUM_SAMPLES)\n",
    "\n",
    "# Print statistics about the sampled data\n",
    "print(f\"Original training data: {len(df_train)} rows\")\n",
    "print(f\"Sampled training data: {len(df_train_sampled)} rows\")\n",
    "print(f\"Number of subcategories: {df_train_sampled['subcategory'].nunique()}\")\n",
    "\n",
    "# Show distribution of a few subcategories\n",
    "print(\"\\nSample of subcategory counts in training data:\")\n",
    "print(df_train_sampled['subcategory'].value_counts().head(5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f466a69",
   "metadata": {
    "papermill": {
     "duration": 0.005273,
     "end_time": "2025-04-10T06:27:13.721378",
     "exception": false,
     "start_time": "2025-04-10T06:27:13.716105",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Load the subcategory and category tabe\n",
    "In this step, I load the subcategory and category table."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6b551e27",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-10T06:27:13.734877Z",
     "iopub.status.busy": "2025-04-10T06:27:13.734434Z",
     "iopub.status.idle": "2025-04-10T06:27:13.824967Z",
     "shell.execute_reply": "2025-04-10T06:27:13.823598Z"
    },
    "papermill": {
     "duration": 0.10118,
     "end_time": "2025-04-10T06:27:13.827995",
     "exception": false,
     "start_time": "2025-04-10T06:27:13.726815",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Database schema created successfully!\n"
     ]
    }
   ],
   "source": [
    "import sqlite3\n",
    "\n",
    "# Connect to your database\n",
    "db_conn = sqlite3.connect('/kaggle/working/transaction_categories.db')\n",
    "cursor = db_conn.cursor()\n",
    "\n",
    "# Create the tables\n",
    "cursor.execute('''\n",
    "CREATE TABLE IF NOT EXISTS categories (\n",
    "    category_id INTEGER PRIMARY KEY AUTOINCREMENT,\n",
    "    name VARCHAR(100) NOT NULL UNIQUE,\n",
    "    description TEXT,\n",
    "    display_order INT DEFAULT 100,\n",
    "    is_active BOOLEAN DEFAULT 1,\n",
    "    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n",
    ")\n",
    "''')\n",
    "\n",
    "cursor.execute('''\n",
    "CREATE TABLE IF NOT EXISTS subcategories (\n",
    "    subcategory_id INTEGER PRIMARY KEY AUTOINCREMENT,\n",
    "    category_id INTEGER NOT NULL,\n",
    "    name VARCHAR(100) NOT NULL,\n",
    "    description TEXT,\n",
    "    display_order INT DEFAULT 100,\n",
    "    is_active BOOLEAN DEFAULT 1,\n",
    "    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n",
    "    FOREIGN KEY (category_id) REFERENCES categories(category_id)\n",
    ")\n",
    "''')\n",
    "\n",
    "cursor.execute('''\n",
    "CREATE TABLE IF NOT EXISTS keyword_rules (\n",
    "    rule_id INTEGER PRIMARY KEY AUTOINCREMENT,\n",
    "    category_id INTEGER NOT NULL,\n",
    "    subcategory_id INTEGER,\n",
    "    keyword VARCHAR(255) NOT NULL,\n",
    "    match_type VARCHAR(20) DEFAULT 'contains',\n",
    "    priority INT DEFAULT 100,\n",
    "    is_active BOOLEAN DEFAULT 1,\n",
    "    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n",
    "    created_by VARCHAR(100),\n",
    "    FOREIGN KEY (category_id) REFERENCES categories(category_id),\n",
    "    FOREIGN KEY (subcategory_id) REFERENCES subcategories(subcategory_id)\n",
    ")\n",
    "''')\n",
    "\n",
    "cursor.execute('''\n",
    "CREATE TABLE IF NOT EXISTS transaction_categories (\n",
    "    transaction_id VARCHAR(100) PRIMARY KEY,\n",
    "    category_id INTEGER,\n",
    "    subcategory_id INTEGER,\n",
    "    confidence_score DECIMAL(5,4),\n",
    "    categorization_method VARCHAR(50),\n",
    "    is_manually_reviewed BOOLEAN DEFAULT 0,\n",
    "    categorized_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n",
    "    FOREIGN KEY (category_id) REFERENCES categories(category_id),\n",
    "    FOREIGN KEY (subcategory_id) REFERENCES subcategories(subcategory_id)\n",
    ")\n",
    "''')\n",
    "\n",
    "# Insert main categories\n",
    "categories = [\n",
    "    ('Food & Beverages', 'Expenses related to food and drinks', 10),\n",
    "    ('Shopping', 'Retail purchases and shopping expenses', 20),\n",
    "    ('Housing', 'Home-related expenses including rent and utilities', 30),\n",
    "    ('Transportation', 'Public and private transportation costs', 40),\n",
    "    ('Vehicle', 'Car and vehicle related expenses', 50),\n",
    "    ('Life & Entertainment', 'Leisure activities and entertainment', 60),\n",
    "    ('Communication, PC', 'Internet, phone and computer expenses', 70),\n",
    "    ('Financial expenses', 'Banking fees, loans, and financial costs', 80),\n",
    "    ('Investments', 'Investment-related transactions', 90),\n",
    "    ('Income', 'All sources of incoming money', 100),\n",
    "    ('Transfer', 'Money transfers between accounts', 110)\n",
    "]\n",
    "\n",
    "cursor.executemany('INSERT OR IGNORE INTO categories (name, description, display_order) VALUES (?, ?, ?)', categories)\n",
    "\n",
    "# Insert subcategories for Food & Beverages\n",
    "food_subcategories = [\n",
    "    (1, 'Bar, cafe, drink, snacks', 10),\n",
    "    (1, 'Groceries', 20),\n",
    "    (1, 'Restaurant, fast-food', 30)\n",
    "]\n",
    "cursor.executemany('INSERT OR IGNORE INTO subcategories (category_id, name, display_order) VALUES (?, ?, ?)', food_subcategories)\n",
    "\n",
    "# Insert subcategories for Shopping\n",
    "shopping_subcategories = [\n",
    "    (2, 'Clothes & Footwear', 10),\n",
    "    (2, 'Drug-store, chemist', 20),\n",
    "    (2, 'Electronics, accessories', 30),\n",
    "    (2, 'Gifts, joy', 40),\n",
    "    (2, 'Health and beauty', 50),\n",
    "    (2, 'Home, garden', 60),\n",
    "    (2, 'Jewels, accessories', 70),\n",
    "    (2, 'Kids', 80),\n",
    "    (2, 'Leisure time', 90),\n",
    "    (2, 'Pets, animals', 100),\n",
    "    (2, 'Stationery, tools', 110)\n",
    "]\n",
    "cursor.executemany('INSERT OR IGNORE INTO subcategories (category_id, name, display_order) VALUES (?, ?, ?)', shopping_subcategories)\n",
    "\n",
    "housing_subcategories=[\n",
    "    (3, 'Energy, utilities', 10),\n",
    "    (3, 'Maintenance, repairs', 20),\n",
    "    (3, 'Mortgage', 30),\n",
    "    (3, 'Property insurance', 40),\n",
    "    (3, 'Rent', 50),\n",
    "    (3, 'Services', 60)\n",
    "]\n",
    "cursor.executemany('INSERT OR IGNORE INTO subcategories (category_id, name, display_order) VALUES (?, ?, ?)', housing_subcategories)\n",
    "\n",
    "\n",
    "transportation_subcategories=[\n",
    "    (4, 'Business trips', 10),\n",
    "    (4, 'Long distance', 20),\n",
    "    (4, 'Public transport', 30),\n",
    "    (4, 'Taxi', 40)\n",
    "]\n",
    "cursor.executemany('INSERT OR IGNORE INTO subcategories (category_id, name, display_order) VALUES (?, ?, ?)', transportation_subcategories)\n",
    "\n",
    "vehicle_subcategories=[\n",
    "    (5, 'Fuel', 10),\n",
    "    (5, 'Leasing', 20),\n",
    "    (5, 'Parking', 30),\n",
    "    (5, 'Rentals', 40),\n",
    "    (5, 'Vehicle insurance', 50),\n",
    "    (5, 'Vehicle maintenance', 60)\n",
    "]\n",
    "cursor.executemany('INSERT OR IGNORE INTO subcategories (category_id, name, display_order) VALUES (?, ?, ?)', vehicle_subcategories)\n",
    "\n",
    "life_subcategories=[\n",
    "    (6, 'Active sport, fitness', 10),\n",
    "    (6, 'Alcohol, tobacco', 20),\n",
    "    (6, 'Books, audio, subscriptions', 30),\n",
    "    (6, 'Charity, gifts', 40),\n",
    "    (6, 'Culture, sport events', 50),\n",
    "    (6, 'Education, development', 60),\n",
    "    (6, 'Health care, doctor', 70),\n",
    "    (6, 'Hobbies', 80),\n",
    "    (6, 'Holiday, trips, hotels', 90),\n",
    "    (6, 'Life events', 100),\n",
    "    (6, 'Lottery, gambling', 110),\n",
    "    (6, 'TV, Streaming', 120),\n",
    "    (6, 'Wellness, beauty', 130)\n",
    "]\n",
    "cursor.executemany('INSERT OR IGNORE INTO subcategories (category_id, name, display_order) VALUES (?, ?, ?)', life_subcategories)\n",
    "\n",
    "communication_subcategories=[\n",
    "    (7, 'Internet', 10),\n",
    "    (7, 'Postal services', 20),\n",
    "    (7, 'Software, apps, games', 30),\n",
    "    (7, 'Telephony, mobile phone', 40)\n",
    "]\n",
    "cursor.executemany('INSERT OR IGNORE INTO subcategories (category_id, name, display_order) VALUES (?, ?, ?)', communication_subcategories)\n",
    "\n",
    "financial_subcategories=[\n",
    "    (8, 'Advisory', 10),\n",
    "    (8, 'Charges, Fees', 20),\n",
    "    (8, 'Child Support', 30),\n",
    "    (8, 'Fines', 40),\n",
    "    (8, 'Insurances', 50),\n",
    "    (8, 'Loans, interests', 60),\n",
    "    (8, 'Taxes', 70)\n",
    "]\n",
    "cursor.executemany('INSERT OR IGNORE INTO subcategories (category_id, name, display_order) VALUES (?, ?, ?)', financial_subcategories)\n",
    "\n",
    "investments_subcategories=[\n",
    "    (9, 'Collections', 10),\n",
    "    (9, 'Financial investments', 20),\n",
    "    (9, 'Realty', 30),\n",
    "    (9, 'Savings', 40),\n",
    "    (9, 'Vehicles, chattels', 50)\n",
    "]\n",
    "cursor.executemany('INSERT OR IGNORE INTO subcategories (category_id, name, display_order) VALUES (?, ?, ?)', investments_subcategories)\n",
    "\n",
    "income_subcategories=[\n",
    "    (10, 'Checks, coupons', 10),\n",
    "    (10, 'Child Support', 20),\n",
    "    (10, 'Dues & grants', 30),\n",
    "    (10, 'Gifts', 40),\n",
    "    (10, 'Interests, dividends', 50),\n",
    "    (10, 'Lending, renting', 60),\n",
    "    (10, 'Lottery, gambling', 70),\n",
    "    (10, 'Refunds (tax, purchase)', 80),\n",
    "    (10, 'Rental income', 90),\n",
    "    (10, 'Sale', 100),\n",
    "    (10, 'Wage, invoices', 110)\n",
    "]\n",
    "cursor.executemany('INSERT OR IGNORE INTO subcategories (category_id, name, display_order) VALUES (?, ?, ?)', income_subcategories)\n",
    "\n",
    "transfer_subcatgories=[\n",
    "    (11, 'Transfer', 10),   \n",
    "]\n",
    "cursor.executemany('INSERT OR IGNORE INTO subcategories (category_id, name, display_order) VALUES (?, ?, ?)', transfer_subcatgories)\n",
    "\n",
    "# Commit the changes\n",
    "db_conn.commit()\n",
    "print(\"Database schema created successfully!\")\n",
    "\n",
    "# Close the connection when done\n",
    "db_conn.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ec11568",
   "metadata": {
    "papermill": {
     "duration": 0.005216,
     "end_time": "2025-04-10T06:27:13.839103",
     "exception": false,
     "start_time": "2025-04-10T06:27:13.833887",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Instruct the zero-shot prompt\n",
    "I draft the prompt asking it to only use the subcategory from the loaded table."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e18c6c69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-10T06:27:13.852248Z",
     "iopub.status.busy": "2025-04-10T06:27:13.851555Z",
     "iopub.status.idle": "2025-04-10T06:27:13.856505Z",
     "shell.execute_reply": "2025-04-10T06:27:13.855284Z"
    },
    "papermill": {
     "duration": 0.013618,
     "end_time": "2025-04-10T06:27:13.858428",
     "exception": false,
     "start_time": "2025-04-10T06:27:13.844810",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    " import sqlite3\n",
    "\n",
    "db_file = \"transaction_categories.db\"\n",
    "db_conn = sqlite3.connect(db_file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "57ce3e9f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-10T06:27:13.871640Z",
     "iopub.status.busy": "2025-04-10T06:27:13.870739Z",
     "iopub.status.idle": "2025-04-10T06:27:14.065884Z",
     "shell.execute_reply": "2025-04-10T06:27:14.064747Z"
    },
    "papermill": {
     "duration": 0.204499,
     "end_time": "2025-04-10T06:27:14.068397",
     "exception": false,
     "start_time": "2025-04-10T06:27:13.863898",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from google.api_core import retry\n",
    "\n",
    "# Define a system instruction for classification with the subcategories list\n",
    "system_instruct = \"\"\"\n",
    "You are a financial transaction categorization service. You will be provided with a transaction \n",
    "description (note) and must classify it into exactly one of the following subcategories:\n",
    "\n",
    "{}\n",
    "\n",
    "Your response must be ONLY the exact subcategory name from this list, with no additional text.\n",
    "Do not create new categories or modify existing ones.\n",
    "If uncertain, choose the most likely subcategory from the list above.\n",
    "\"\"\"\n",
    "\n",
    "# Get the list of subcategories and format them for the prompt\n",
    "all_subcategories = sorted(df['subcategory'].unique())\n",
    "subcategories_text = \"\\n\".join([f\"- {subcat}\" for subcat in all_subcategories])\n",
    "\n",
    "# Insert the subcategories into the system instruction\n",
    "system_instruct = system_instruct.format(subcategories_text)\n",
    "\n",
    "# Define a helper to retry when per-minute quota is reached\n",
    "is_retriable = lambda e: (isinstance(e, genai.errors.APIError) and e.code in {429, 503})\n",
    "\n",
    "@retry.Retry(predicate=is_retriable)\n",
    "def predict_label(transaction_note: str) -> str:\n",
    "    \"\"\"Classify the provided transaction note into a subcategory from the predefined list.\"\"\"\n",
    "    response = client.models.generate_content(\n",
    "        model=\"gemini-2.0-flash\",\n",
    "        config=types.GenerateContentConfig(\n",
    "            system_instruction=system_instruct),\n",
    "        contents=transaction_note)\n",
    "    rc = response.candidates[0]\n",
    "    \n",
    "    # Any errors, filters, recitation, etc we can mark as a general error\n",
    "    if rc.finish_reason.name != \"STOP\":\n",
    "        return \"(error)\"\n",
    "    else:\n",
    "        # Clean up the response\n",
    "        prediction = response.text.strip()\n",
    "        \n",
    "        # Verify the prediction is from our list of subcategories\n",
    "        if prediction in all_subcategories:\n",
    "            return prediction\n",
    "        else:\n",
    "            # Find the closest matching subcategory if possible\n",
    "            for subcat in all_subcategories:\n",
    "                if subcat.lower() in prediction.lower():\n",
    "                    return subcat\n",
    "            return \"(invalid category)\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "605b6bd7",
   "metadata": {
    "papermill": {
     "duration": 0.00551,
     "end_time": "2025-04-10T06:27:14.079620",
     "exception": false,
     "start_time": "2025-04-10T06:27:14.074110",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Evaluate baseline performance\n",
    "\n",
    "Now I perform an evaluation on the available models to ensure I can measure how much the tuning helps."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "10a34c67",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-10T06:27:14.092814Z",
     "iopub.status.busy": "2025-04-10T06:27:14.092187Z",
     "iopub.status.idle": "2025-04-10T06:27:22.225909Z",
     "shell.execute_reply": "2025-04-10T06:27:22.224538Z"
    },
    "papermill": {
     "duration": 8.143765,
     "end_time": "2025-04-10T06:27:22.229020",
     "exception": false,
     "start_time": "2025-04-10T06:27:14.085255",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8a5a839b912c4dea9fa1e741faf9bfd7",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Output()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Evaluating 20 transactions...\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"
      ],
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Baseline accuracy: 30.00%\n",
      "\n",
      "Sample predictions:\n",
      "Transaction: PayPal *Uber AU Sydney AU...\n",
      "True subcategory: Taxi\n",
      "Predicted: Taxi\n",
      "Correct: True\n",
      "\n",
      "Transaction: 7-ELEVEN 1023 HAWTHORN VI AUSTap and Pay xx3173Val...\n",
      "True subcategory: Food & Drinks\n",
      "Predicted: Food & Drinks\n",
      "Correct: True\n",
      "\n",
      "Transaction: DIRECT DEBIT RECEIVED - THANK YOU...\n",
      "True subcategory: TRANSFER\n",
      "Predicted: Wage, invoices\n",
      "Correct: False\n",
      "\n",
      "Transaction: PAYPAL *ZOOS VIC 039340...\n",
      "True subcategory: Holiday, trips, hotels\n",
      "Predicted: Culture, sport events\n",
      "Correct: False\n",
      "\n",
      "Transaction: 2% CASHBACK - ENJOY WOOLWORTHS 3307 08OCT19  56689...\n",
      "True subcategory: Refunds (tax, purchase)\n",
      "Predicted: Groceries\n",
      "Correct: False\n",
      "\n",
      "Most common error patterns:\n",
      "                 subcategory             prediction  count\n",
      "275  Refunds (tax, purchase)              Groceries      2\n",
      "107    Financial investments              Groceries      2\n",
      "161                  Hobbies  Culture, sport events      2\n",
      "173   Holiday, trips, hotels               TRANSFER      1\n",
      "137               Gifts, joy               Shopping      1\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_17/3877153812.py:38: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  error_counts = error_patterns.groupby(['subcategory', 'prediction']).size().reset_index(name='count')\n"
     ]
    }
   ],
   "source": [
    "import tqdm\n",
    "from tqdm.rich import tqdm as tqdmr\n",
    "import warnings\n",
    "\n",
    "# Enable tqdm features on Pandas\n",
    "tqdmr.pandas()\n",
    "\n",
    "# Suppress the experimental warning\n",
    "warnings.filterwarnings(\"ignore\", category=tqdm.TqdmExperimentalWarning)\n",
    "\n",
    "# Further sample the test data to be mindful of the free-tier quota\n",
    "# Sample a small subset of test data (adjust number as needed)\n",
    "TEST_SAMPLE_SIZE = 20\n",
    "df_baseline_eval = df_test_sampled.sample(min(TEST_SAMPLE_SIZE, len(df_test_sampled)))\n",
    "\n",
    "print(f\"Evaluating {len(df_baseline_eval)} transactions...\")\n",
    "\n",
    "# Make predictions using the sampled data with progress bar\n",
    "df_baseline_eval['prediction'] = df_baseline_eval['note'].progress_apply(predict_label)\n",
    "\n",
    "# Calculate the accuracy\n",
    "accuracy = (df_baseline_eval['subcategory'] == df_baseline_eval['prediction']).mean()\n",
    "print(f\"Baseline accuracy: {accuracy:.2%}\")\n",
    "\n",
    "# Display some examples of predictions\n",
    "print(\"\\nSample predictions:\")\n",
    "sample_results = df_baseline_eval[['note', 'subcategory', 'prediction']].sample(min(5, len(df_baseline_eval)))\n",
    "for idx, row in sample_results.iterrows():\n",
    "    print(f\"Transaction: {row['note'][:50]}...\")\n",
    "    print(f\"True subcategory: {row['subcategory']}\")\n",
    "    print(f\"Predicted: {row['prediction']}\")\n",
    "    print(f\"Correct: {row['subcategory'] == row['prediction']}\\n\")\n",
    "\n",
    "# Create a confusion matrix to see where the model is making mistakes\n",
    "print(\"Most common error patterns:\")\n",
    "error_patterns = df_baseline_eval[df_baseline_eval['subcategory'] != df_baseline_eval['prediction']]\n",
    "if len(error_patterns) > 0:\n",
    "    error_counts = error_patterns.groupby(['subcategory', 'prediction']).size().reset_index(name='count')\n",
    "    error_counts = error_counts.sort_values('count', ascending=False)\n",
    "    print(error_counts.head(5))\n",
    "else:\n",
    "    print(\"No errors found in the evaluation set!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b0a9781",
   "metadata": {
    "papermill": {
     "duration": 0.008864,
     "end_time": "2025-04-10T06:27:22.248706",
     "exception": false,
     "start_time": "2025-04-10T06:27:22.239842",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Tune my model\n",
    "Now I train the model with training data to tune it for assessment and potential use."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "419295a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-10T06:27:22.507380Z",
     "iopub.status.busy": "2025-04-10T06:27:22.506999Z",
     "iopub.status.idle": "2025-04-10T06:27:23.440425Z",
     "shell.execute_reply": "2025-04-10T06:27:23.438950Z"
    },
    "papermill": {
     "duration": 1.185614,
     "end_time": "2025-04-10T06:27:23.443268",
     "exception": false,
     "start_time": "2025-04-10T06:27:22.257654",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Preparing transaction data for fine-tuning...\n",
      "Created 1654 training examples\n",
      "Sample example - Input: 'REBEL MELBOURNE CTRL MELBOURNE VI AUSTap and Pay x...'\n",
      "Sample example - Output: 'Active sport, fitness'\n",
      "Checking for existing tuned models...\n",
      "Starting new fine-tuning job...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_17/3441513278.py:64: ExperimentalWarning: The SDK's tuning implementation is experimental, and may change in future versions.\n",
      "  tuning_op = client.tunings.tune(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fine-tuning initiated. Model ID: tunedModels/transactioncategoryclassifier-al3eu3hkf9\n",
      "Current status: JOB_STATE_QUEUED\n",
      "\n",
      "Using model: tunedModels/transactioncategoryclassifier-al3eu3hkf9\n"
     ]
    }
   ],
   "source": [
    "from collections.abc import Iterable\n",
    "import datetime\n",
    "import time\n",
    "import os\n",
    "\n",
    "# 1. Prepare your transaction data for fine-tuning\n",
    "print(\"Preparing transaction data for fine-tuning...\")\n",
    "\n",
    "# Convert the DataFrame into the format expected by the API\n",
    "training_examples = []\n",
    "for _, row in df_train_sampled.iterrows():\n",
    "    training_examples.append({\n",
    "        \"textInput\": str(row['note']),\n",
    "        \"output\": str(row['subcategory'])\n",
    "    })\n",
    "\n",
    "print(f\"Created {len(training_examples)} training examples\")\n",
    "print(f\"Sample example - Input: '{training_examples[0]['textInput'][:50]}...'\")\n",
    "print(f\"Sample example - Output: '{training_examples[0]['output']}'\")\n",
    "\n",
    "# 2. Prepare the dataset in the required format\n",
    "training_data = {\"examples\": training_examples}\n",
    "\n",
    "# 3. Set up the fine-tuning job - find existing or create new\n",
    "model_id = None\n",
    "TUNED_MODEL_PREFIX = 'tunedModels/transaction-category-classifier'\n",
    "\n",
    "try:\n",
    "    # Try to read previous model ID from file\n",
    "    if os.path.exists(\"tuned_model_id.txt\"):\n",
    "        with open(\"tuned_model_id.txt\", \"r\") as f:\n",
    "            saved_model_id = f.read().strip()\n",
    "            if saved_model_id:\n",
    "                print(f\"Found previously saved model ID: {saved_model_id}\")\n",
    "                model_id = saved_model_id\n",
    "    \n",
    "    # If no saved ID, check for existing models\n",
    "    if not model_id:\n",
    "        queued_model = None\n",
    "        print(\"Checking for existing tuned models...\")\n",
    "        \n",
    "        # List models in reverse order (newest first)\n",
    "        for m in reversed(client.tunings.list()):\n",
    "            # Look for transaction classification models\n",
    "            if m.name.startswith(TUNED_MODEL_PREFIX):\n",
    "                # If there is a completed model, use it\n",
    "                if m.state.name == 'JOB_STATE_SUCCEEDED':\n",
    "                    model_id = m.name\n",
    "                    print(f'Found existing completed model to reuse: {model_id}')\n",
    "                    break\n",
    "                elif m.state.name == 'JOB_STATE_RUNNING' and not queued_model:\n",
    "                    # If there's a model still running, remember it\n",
    "                    queued_model = m.name\n",
    "                    print(f'Found model still in progress: {queued_model}')\n",
    "        \n",
    "        # Use queued model if found and no completed model\n",
    "        if not model_id and queued_model:\n",
    "            model_id = queued_model\n",
    "            print(f'Using in-progress model: {model_id}')\n",
    "    \n",
    "    # Create new model if needed\n",
    "    if not model_id:\n",
    "        print(\"Starting new fine-tuning job...\")\n",
    "        tuning_op = client.tunings.tune(\n",
    "            base_model=\"models/gemini-1.5-flash-001-tuning\",\n",
    "            training_dataset=training_data,\n",
    "            config=types.CreateTuningJobConfig(\n",
    "                tuned_model_display_name=\"transaction-category-classifier\",\n",
    "                batch_size=16,\n",
    "                epoch_count=3,\n",
    "            ),\n",
    "        )\n",
    "        \n",
    "        model_id = tuning_op.name\n",
    "        print(f\"Fine-tuning initiated. Model ID: {model_id}\")\n",
    "        print(f\"Current status: {tuning_op.state}\")\n",
    "    \n",
    "    # Save the model ID for later use\n",
    "    with open(\"tuned_model_id.txt\", \"w\") as f:\n",
    "        f.write(model_id)\n",
    "    \n",
    "    print(f\"\\nUsing model: {model_id}\")\n",
    "    \n",
    "except Exception as e:\n",
    "    print(f\"Error in fine-tuning process: {e}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48a45635",
   "metadata": {
    "papermill": {
     "duration": 0.006459,
     "end_time": "2025-04-10T06:27:23.456605",
     "exception": false,
     "start_time": "2025-04-10T06:27:23.450146",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Monitoring progress\n",
    "Here I monitor whether this model has been tuned and ready to use."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8758e8a4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-10T06:27:23.471614Z",
     "iopub.status.busy": "2025-04-10T06:27:23.471147Z",
     "iopub.status.idle": "2025-04-10T06:52:36.209173Z",
     "shell.execute_reply": "2025-04-10T06:52:36.207997Z"
    },
    "papermill": {
     "duration": 1512.755888,
     "end_time": "2025-04-10T06:52:36.218964",
     "exception": false,
     "start_time": "2025-04-10T06:27:23.463076",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Current state: JOB_STATE_RUNNING\n",
      "Current state: JOB_STATE_RUNNING\n",
      "Current state: JOB_STATE_RUNNING\n",
      "Current state: JOB_STATE_RUNNING\n",
      "Current state: JOB_STATE_RUNNING\n",
      "Current state: JOB_STATE_RUNNING\n",
      "Current state: JOB_STATE_RUNNING\n",
      "Current state: JOB_STATE_RUNNING\n",
      "Current state: JOB_STATE_RUNNING\n",
      "Current state: JOB_STATE_RUNNING\n",
      "Current state: JOB_STATE_RUNNING\n",
      "Current state: JOB_STATE_RUNNING\n",
      "Current state: JOB_STATE_RUNNING\n",
      "Current state: JOB_STATE_RUNNING\n",
      "Current state: JOB_STATE_RUNNING\n",
      "Current state: JOB_STATE_RUNNING\n",
      "Current state: JOB_STATE_RUNNING\n",
      "Current state: JOB_STATE_RUNNING\n",
      "Current state: JOB_STATE_RUNNING\n",
      "Current state: JOB_STATE_RUNNING\n",
      "Current state: JOB_STATE_RUNNING\n",
      "Current state: JOB_STATE_RUNNING\n",
      "Current state: JOB_STATE_RUNNING\n",
      "Current state: JOB_STATE_RUNNING\n",
      "Current state: JOB_STATE_RUNNING\n",
      "Done! The model state is: JOB_STATE_SUCCEEDED\n"
     ]
    }
   ],
   "source": [
    "# 4. Monitor the fine-tuning progress\n",
    "start_time = datetime.datetime.now(datetime.timezone.utc)\n",
    "tuned_model = client.tunings.get(name=model_id)\n",
    "\n",
    "while not tuned_model.has_ended:\n",
    "    print(f\"Current state: {tuned_model.state.name}\")\n",
    "    if hasattr(tuned_model, 'progress'):\n",
    "        print(f\"Progress: {tuned_model.progress}%\")\n",
    "    \n",
    "    time.sleep(60)  # Check every minute\n",
    "    tuned_model = client.tunings.get(name=model_id)\n",
    "\n",
    "print(f\"Done! The model state is: {tuned_model.state.name}\")\n",
    "\n",
    "if not tuned_model.has_succeeded and tuned_model.error:\n",
    "    print(\"Error:\", tuned_model.error)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "642f4974",
   "metadata": {
    "papermill": {
     "duration": 0.007658,
     "end_time": "2025-04-10T06:52:36.234654",
     "exception": false,
     "start_time": "2025-04-10T06:52:36.226996",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Evaluate Tuned Model\n",
    "Here I test and evaluate the performance of the tuned model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "6c6b46e4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-10T06:52:36.253334Z",
     "iopub.status.busy": "2025-04-10T06:52:36.252305Z",
     "iopub.status.idle": "2025-04-10T06:52:42.017819Z",
     "shell.execute_reply": "2025-04-10T06:52:42.016345Z"
    },
    "papermill": {
     "duration": 5.77803,
     "end_time": "2025-04-10T06:52:42.020755",
     "exception": false,
     "start_time": "2025-04-10T06:52:36.242725",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Transaction: AMAZON PRIME MEMBERSHIP ANNUAL RENEWAL\n",
      "Predicted category: Subscriptions\n"
     ]
    }
   ],
   "source": [
    "# 5. Test the tuned model with a sample transaction\n",
    "def categorize_transaction(transaction_note):\n",
    "    \"\"\"Use the fine-tuned model to categorize a transaction.\"\"\"\n",
    "    response = client.models.generate_content(\n",
    "        model=model_id,\n",
    "        contents=transaction_note,\n",
    "        config=types.GenerateContentConfig(\n",
    "            temperature=0.0,  # Use deterministic output for classification\n",
    "            max_output_tokens=10,  # Keep it short, we just need the category\n",
    "        )\n",
    "    )\n",
    "    \n",
    "    if response.candidates and response.candidates[0].content:\n",
    "        return response.candidates[0].content.parts[0].text.strip()\n",
    "    else:\n",
    "        return \"(error)\"\n",
    "\n",
    "# Test with a sample transaction\n",
    "sample_transaction = \"AMAZON PRIME MEMBERSHIP ANNUAL RENEWAL\"\n",
    "predicted_category = categorize_transaction(sample_transaction)\n",
    "print(f\"Transaction: {sample_transaction}\")\n",
    "print(f\"Predicted category: {predicted_category}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d91dc1d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-10T06:52:42.040667Z",
     "iopub.status.busy": "2025-04-10T06:52:42.040118Z",
     "iopub.status.idle": "2025-04-10T06:53:23.520713Z",
     "shell.execute_reply": "2025-04-10T06:53:23.519098Z"
    },
    "papermill": {
     "duration": 41.494097,
     "end_time": "2025-04-10T06:53:23.523718",
     "exception": false,
     "start_time": "2025-04-10T06:52:42.029621",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "65a8d9578dc946ad89994e7ad5420818",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Output()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Evaluating on 20 test transactions...\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"
      ],
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model accuracy: 70.00%\n",
      "\n",
      "Sample predictions:\n",
      "Transaction: ADOBE *ACROPRO SUBS Ado SAGGART...\n",
      "True category: Books, audio, subscriptions\n",
      "Predicted: Software, apps, games\n",
      "Correct: False\n",
      "\n",
      "Transaction: CHEMIST WAREHOUSE BOX H BOX HILL...\n",
      "True category: Drug-store, chemist\n",
      "Predicted: (error)\n",
      "Correct: False\n",
      "\n",
      "Transaction: Bonus Interest Activated...\n",
      "True category: Interests, dividends\n",
      "Predicted: Interests, dividends\n",
      "Correct: True\n",
      "\n",
      "Transaction: Mecca Brands Pty Ltd Richmond AU...\n",
      "True category: Health and beauty\n",
      "Predicted: Clothes & shoes\n",
      "Correct: False\n",
      "\n",
      "Transaction: V1257 28/03 ALDIMOBILE CHAT Ref: 74564500090...\n",
      "True category: Phone, cell phone\n",
      "Predicted: Phone, cell phone\n",
      "Correct: True\n",
      "\n",
      "Found 6 misclassifications\n",
      "Most common error patterns:\n",
      "Predicted                    (error)  Bar, cafe, drink, snacks  \\\n",
      "True                                                             \n",
      "Books, audio, subscriptions        0                         0   \n",
      "Drug-store, chemist                1                         0   \n",
      "Financial investments              0                         0   \n",
      "Health and beauty                  0                         0   \n",
      "Public transport                   0                         1   \n",
      "TRANSFER                           0                         0   \n",
      "\n",
      "Predicted                    Clothes & shoes  Life events  \\\n",
      "True                                                        \n",
      "Books, audio, subscriptions                0            0   \n",
      "Drug-store, chemist                        0            0   \n",
      "Financial investments                      0            1   \n",
      "Health and beauty                          1            0   \n",
      "Public transport                           0            0   \n",
      "TRANSFER                                   0            0   \n",
      "\n",
      "Predicted                    Software, apps, games  TRANSFERTRANSFER  \n",
      "True                                                                  \n",
      "Books, audio, subscriptions                      1                 0  \n",
      "Drug-store, chemist                              0                 0  \n",
      "Financial investments                            0                 0  \n",
      "Health and beauty                                0                 0  \n",
      "Public transport                                 0                 0  \n",
      "TRANSFER                                         0                 1  \n"
     ]
    }
   ],
   "source": [
    "# 6. Evaluate the model on test data\n",
    "import tqdm\n",
    "from tqdm.rich import tqdm as tqdmr\n",
    "import warnings\n",
    "\n",
    "# Enable tqdm features on Pandas\n",
    "tqdmr.pandas()\n",
    "\n",
    "# Suppress the experimental warning\n",
    "warnings.filterwarnings(\"ignore\", category=tqdm.TqdmExperimentalWarning)\n",
    "\n",
    "# Sample a subset of test data for evaluation\n",
    "TEST_SAMPLE_SIZE = 20\n",
    "df_eval = df_test_sampled.sample(min(TEST_SAMPLE_SIZE, len(df_test_sampled)))\n",
    "\n",
    "print(f\"Evaluating on {len(df_eval)} test transactions...\")\n",
    "\n",
    "# Make predictions with progress bar\n",
    "df_eval['prediction'] = df_eval['note'].progress_apply(categorize_transaction)\n",
    "\n",
    "# Calculate accuracy\n",
    "accuracy = (df_eval['subcategory'] == df_eval['prediction']).mean()\n",
    "print(f\"Model accuracy: {accuracy:.2%}\")\n",
    "\n",
    "# Display some examples\n",
    "print(\"\\nSample predictions:\")\n",
    "for idx, row in df_eval.sample(min(5, len(df_eval))).iterrows():\n",
    "    print(f\"Transaction: {row['note'][:50]}...\")\n",
    "    print(f\"True category: {row['subcategory']}\")\n",
    "    print(f\"Predicted: {row['prediction']}\")\n",
    "    print(f\"Correct: {row['subcategory'] == row['prediction']}\\n\")\n",
    "\n",
    "# Show error analysis\n",
    "errors = df_eval[df_eval['subcategory'] != df_eval['prediction']]\n",
    "if len(errors) > 0:\n",
    "    print(f\"Found {len(errors)} misclassifications\")\n",
    "    print(\"Most common error patterns:\")\n",
    "    error_matrix = pd.crosstab(\n",
    "        errors['subcategory'], \n",
    "        errors['prediction'], \n",
    "        rownames=['True'], \n",
    "        colnames=['Predicted']\n",
    "    )\n",
    "    print(error_matrix)"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "name": "day-4-fine-tuning-a-custom-model.ipynb",
   "toc_visible": true
  },
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 7099621,
     "sourceId": 11349158,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30786,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 1599.023284,
   "end_time": "2025-04-10T06:53:25.716503",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-04-10T06:26:46.693219",
   "version": "2.6.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "1cb7080fc2ce46279e0f994b25dac376": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "65a8d9578dc946ad89994e7ad5420818": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/output",
       "_model_module_version": "1.0.0",
       "_model_name": "OutputModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/output",
       "_view_module_version": "1.0.0",
       "_view_name": "OutputView",
       "layout": "IPY_MODEL_b9b0d90d96c545fc9fb4c60b187560a4",
       "msg_id": "",
       "outputs": [
        {
         "data": {
          "text/html": "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #800080; text-decoration-color: #800080\"> 100%</span> <span style=\"color: #729c1f; text-decoration-color: #729c1f\">━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━</span> <span style=\"color: #008000; text-decoration-color: #008000\">20/20 </span> [ <span style=\"color: #808000; text-decoration-color: #808000\">0:00:37</span> &lt; <span style=\"color: #008080; text-decoration-color: #008080\">0:00:00</span> , <span style=\"color: #800000; text-decoration-color: #800000\">0 it/s</span> ]\n</pre>\n",
          "text/plain": "\u001b[35m 100%\u001b[0m \u001b[38;2;114;156;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m20/20 \u001b[0m [ \u001b[33m0:00:37\u001b[0m < \u001b[36m0:00:00\u001b[0m , \u001b[31m0 it/s\u001b[0m ]\n"
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ]
      }
     },
     "8a5a839b912c4dea9fa1e741faf9bfd7": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/output",
       "_model_module_version": "1.0.0",
       "_model_name": "OutputModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/output",
       "_view_module_version": "1.0.0",
       "_view_name": "OutputView",
       "layout": "IPY_MODEL_1cb7080fc2ce46279e0f994b25dac376",
       "msg_id": "",
       "outputs": [
        {
         "data": {
          "text/html": "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #800080; text-decoration-color: #800080\"> 100%</span> <span style=\"color: #729c1f; text-decoration-color: #729c1f\">━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━</span> <span style=\"color: #008000; text-decoration-color: #008000\">20/20 </span> [ <span style=\"color: #808000; text-decoration-color: #808000\">0:00:07</span> &lt; <span style=\"color: #008080; text-decoration-color: #008080\">0:00:00</span> , <span style=\"color: #800000; text-decoration-color: #800000\">3 it/s</span> ]\n</pre>\n",
          "text/plain": "\u001b[35m 100%\u001b[0m \u001b[38;2;114;156;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m20/20 \u001b[0m [ \u001b[33m0:00:07\u001b[0m < \u001b[36m0:00:00\u001b[0m , \u001b[31m3 it/s\u001b[0m ]\n"
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ]
      }
     },
     "b9b0d90d96c545fc9fb4c60b187560a4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
